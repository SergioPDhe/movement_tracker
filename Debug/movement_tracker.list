
movement_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b04c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800b1ec  0800b1ec  0001b1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b320  0800b320  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b328  0800b328  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006664  200001e8  0800b518  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000684c  0800b518  0002684c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cb24  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000555a  00000000  00000000  0004cd3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e20  00000000  00000000  00052298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  000540b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b869  00000000  00000000  00055d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002400e  00000000  00000000  00071581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009efba  00000000  00000000  0009558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134549  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082a4  00000000  00000000  0013459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1d4 	.word	0x0800b1d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800b1d4 	.word	0x0800b1d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <I2C_Start>:
#include "I2C.h"


// START I2C COMMUNICATION
uint8_t I2C_Start(I2C_HandleTypeDef *i2cHandle)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 |= I2C_CR1_ACK; // set ACK bit
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004ee:	601a      	str	r2, [r3, #0]

  i2cHandle->Instance->CR1 |= I2C_CR1_START; // set START bit to generate start condition
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fe:	601a      	str	r2, [r3, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_SB)); // wait for SB to set
 8000500:	bf00      	nop
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f8      	beq.n	8000502 <I2C_Start+0x2a>

  return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <I2C_Restart>:

// RESTART I2C COMMUNICATION
uint8_t I2C_Restart(I2C_HandleTypeDef *i2cHandle)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 |= I2C_CR1_START; // set START bit to generate start condition
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000534:	601a      	str	r2, [r3, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_SB)); // wait for SB to set
 8000536:	bf00      	nop
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <I2C_Restart+0x1a>

  return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <I2C_AddressReadNACK>:

  return 0;
}

uint8_t I2C_AddressReadNACK(I2C_HandleTypeDef *i2cHandle, uint8_t address)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
  address |= 0x01; 					// set read/write bit to 'read'
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	70fb      	strb	r3, [r7, #3]
  i2cHandle->Instance->DR = address; 		// send address
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	78fa      	ldrb	r2, [r7, #3]
 800056e:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_ADDR)); 	// wait for ADDR bit to set
 8000570:	bf00      	nop
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f8      	beq.n	8000572 <I2C_AddressReadNACK+0x1e>

  i2cHandle->Instance->CR1 &= ~I2C_CR1_ACK;		// disable ACK
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800058e:	601a      	str	r2, [r3, #0]

  uint8_t temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	4313      	orrs	r3, r2
 80005a2:	73fb      	strb	r3, [r7, #15]

  return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <I2C_AddressWrite>:

// SEND ADDRESS FOR WRITING
uint8_t I2C_AddressWrite(I2C_HandleTypeDef *i2cHandle, uint8_t address)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]
  i2cHandle->Instance->DR = address; // send address
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	78fa      	ldrb	r2, [r7, #3]
 80005c4:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_ADDR)); // wait for ADDR bit to set
 80005c6:	bf00      	nop
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f8      	beq.n	80005c8 <I2C_AddressWrite+0x16>

  uint8_t temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	73fb      	strb	r3, [r7, #15]

  return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <I2C_Stop>:


// SEND STOP CONDITION
uint8_t I2C_Stop(I2C_HandleTypeDef *i2cHandle)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 |= I2C_CR1_STOP; // set STOP bit to generate stop condition
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800060e:	601a      	str	r2, [r3, #0]

  return 0;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <I2C_SendByte>:


uint8_t I2C_SendByte(I2C_HandleTypeDef *i2cHandle, uint8_t *data)
{
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_TXE)); // wait for TXE bit to set (TX empty)
 8000628:	bf00      	nop
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0f8      	beq.n	800062a <I2C_SendByte+0xc>

  i2cHandle->Instance->DR = *data;	// send data into Data Register
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_BTF)); // wait for BTF bit to set (done transmitting)
 8000642:	bf00      	nop
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f8      	beq.n	8000644 <I2C_SendByte+0x26>

  return 0;
 8000652:	2300      	movs	r3, #0

}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <I2C_ReadByte>:
  return 0;
}


uint8_t I2C_ReadByte(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	460b      	mov	r3, r1
 800066c:	72fb      	strb	r3, [r7, #11]
 800066e:	4613      	mov	r3, r2
 8000670:	72bb      	strb	r3, [r7, #10]
  I2C_RequestRead(i2cHandle, deviceAddress, memoryAddress);	// Request specific device and memory address to be read
 8000672:	7aba      	ldrb	r2, [r7, #10]
 8000674:	7afb      	ldrb	r3, [r7, #11]
 8000676:	4619      	mov	r1, r3
 8000678:	68f8      	ldr	r0, [r7, #12]
 800067a:	f000 f81e 	bl	80006ba <I2C_RequestRead>

  I2C_Restart(i2cHandle);					// Send (Re)Start condition
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f7ff ff4d 	bl	800051e <I2C_Restart>

  I2C_AddressReadNACK(i2cHandle, deviceAddress);		// Send device address and disable ACK
 8000684:	7afb      	ldrb	r3, [r7, #11]
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f7ff ff63 	bl	8000554 <I2C_AddressReadNACK>

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_RXNE)); 		// wait for RXNE bit to set (RX NOT empty)
 800068e:	bf00      	nop
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f8      	beq.n	8000690 <I2C_ReadByte+0x30>

  *data = (i2cHandle->Instance->DR & 0x00FF);			// read Data register
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	701a      	strb	r2, [r3, #0]

  I2C_Stop(i2cHandle);						// STOP condition
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff ffa4 	bl	80005f8 <I2C_Stop>

  return 0;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <I2C_RequestRead>:
  return 0;
}

// START COMMUNICATION AND REQUEST DATA FROM DEVICE MEMORY
uint8_t I2C_RequestRead(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70fb      	strb	r3, [r7, #3]
 80006c6:	4613      	mov	r3, r2
 80006c8:	70bb      	strb	r3, [r7, #2]
  I2C_Start(i2cHandle);				// Start I2C communication
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff04 	bl	80004d8 <I2C_Start>
  I2C_AddressWrite(i2cHandle, deviceAddress);	// Send device address
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	4619      	mov	r1, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff6c 	bl	80005b2 <I2C_AddressWrite>
  I2C_SendByte(i2cHandle, &memoryAddress);	// Send memory address of device to be read
 80006da:	1cbb      	adds	r3, r7, #2
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff ff9d 	bl	800061e <I2C_SendByte>

  return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <MPU6050_Init>:
//#include "usbd_cdc_if.h"
#include "MPU6050.h"


uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
 80006f6:	6039      	str	r1, [r7, #0]
  dev->i2cHandle = i2cHandle;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	601a      	str	r2, [r3, #0]
  dev->address = (0x68 << 1);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	22d0      	movs	r2, #208	; 0xd0
 8000702:	711a      	strb	r2, [r3, #4]

  dev->accelerometer[0] = 0.0f;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f04f 0200 	mov.w	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  dev->accelerometer[1] = 0.0f;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f04f 0200 	mov.w	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  dev->accelerometer[2] = 0.0f;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	611a      	str	r2, [r3, #16]

  dev->gyroscope[0] = 0.0f;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	615a      	str	r2, [r3, #20]
  dev->gyroscope[1] = 0.0f;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f04f 0200 	mov.w	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  dev->gyroscope[2] = 0.0f;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	61da      	str	r2, [r3, #28]

  dev->temp = 0.0f;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	621a      	str	r2, [r3, #32]


  dev->accelOffset[0] = 0.0f;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  dev->accelOffset[1] = 0.0f;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f04f 0200 	mov.w	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28
  dev->accelOffset[2] = 0.0f;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f04f 0200 	mov.w	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c

  dev->gyroOffset[0] = 0.0f;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  dev->gyroOffset[1] = 0.0f;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	635a      	str	r2, [r3, #52]	; 0x34
  dev->gyroOffset[2] = 0.0f;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f04f 0200 	mov.w	r2, #0
 800076a:	639a      	str	r2, [r3, #56]	; 0x38

  dev->tempOffset = 0.0f;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f04f 0200 	mov.w	r2, #0
 8000772:	63da      	str	r2, [r3, #60]	; 0x3c

  uint8_t errNum = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status;

  uint8_t regData;

  //status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
  status = I2C_ReadByte(dev->i2cHandle, dev->address, WHO_AM_I, &regData);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7919      	ldrb	r1, [r3, #4]
 8000780:	f107 030d 	add.w	r3, r7, #13
 8000784:	2275      	movs	r2, #117	; 0x75
 8000786:	f7ff ff6b 	bl	8000660 <I2C_ReadByte>
 800078a:	4603      	mov	r3, r0
 800078c:	73bb      	strb	r3, [r7, #14]
  errNum += (status != HAL_OK);
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4413      	add	r3, r2
 80007a0:	73fb      	strb	r3, [r7, #15]

  if (regData != MPU6050_ID)
 80007a2:	7b7b      	ldrb	r3, [r7, #13]
 80007a4:	2b68      	cmp	r3, #104	; 0x68
 80007a6:	d001      	beq.n	80007ac <MPU6050_Init+0xbe>
    {
      return 255;
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	e011      	b.n	80007d0 <MPU6050_Init+0xe2>
    }
  status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x00);
 80007ac:	2200      	movs	r2, #0
 80007ae:	216b      	movs	r1, #107	; 0x6b
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f906 	bl	80009c2 <MPU6050_WriteRegister>
 80007b6:	4603      	mov	r3, r0
 80007b8:	73bb      	strb	r3, [r7, #14]
  errNum += (status != HAL_OK);
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf14      	ite	ne
 80007c0:	2301      	movne	r3, #1
 80007c2:	2300      	moveq	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4413      	add	r3, r2
 80007cc:	73fb      	strb	r3, [r7, #15]
  status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
  errNum += (status != HAL_OK);
  status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x00);
  errNum += (status != HAL_OK);*/

  return errNum;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]

}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MPU6050_ReadTemp>:

HAL_StatusTypeDef MPU6050_ReadTemp(MPU6050 *dev)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint8_t regData[2];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, TEMP_OUT_H, regData, 2);
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	2302      	movs	r3, #2
 80007e6:	2141      	movs	r1, #65	; 0x41
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 f8cb 	bl	8000984 <MPU6050_ReadRegisters>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]

  int16_t tempRaw = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 80007f2:	7a3b      	ldrb	r3, [r7, #8]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	7a7b      	ldrb	r3, [r7, #9]
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	81bb      	strh	r3, [r7, #12]

  dev->temp = ((float)tempRaw/340.0f) + 35.53f;
 8000800:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800080c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800082c <MPU6050_ReadTemp+0x54>
 8000810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000814:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000830 <MPU6050_ReadTemp+0x58>
 8000818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	edc3 7a08 	vstr	s15, [r3, #32]

  return status;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	43aa0000 	.word	0x43aa0000
 8000830:	420e1eb8 	.word	0x420e1eb8

08000834 <MPU6050_ReadAccel>:



HAL_StatusTypeDef MPU6050_ReadAccel(MPU6050 *dev)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint8_t regData[6];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, regData, 6);
 800083c:	f107 0210 	add.w	r2, r7, #16
 8000840:	2306      	movs	r3, #6
 8000842:	213b      	movs	r1, #59	; 0x3b
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f89d 	bl	8000984 <MPU6050_ReadRegisters>
 800084a:	4603      	mov	r3, r0
 800084c:	75fb      	strb	r3, [r7, #23]

  int16_t accelRaw[3];

  accelRaw[0] = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 800084e:	7c3b      	ldrb	r3, [r7, #16]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	7c7b      	ldrb	r3, [r7, #17]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	813b      	strh	r3, [r7, #8]
  accelRaw[1] = ((int16_t)regData[2]<<8) | (int16_t)regData[3];
 800085e:	7cbb      	ldrb	r3, [r7, #18]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b21a      	sxth	r2, r3
 8000864:	7cfb      	ldrb	r3, [r7, #19]
 8000866:	b21b      	sxth	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	817b      	strh	r3, [r7, #10]
  accelRaw[2] = ((int16_t)regData[4]<<8) | (int16_t)regData[5];
 800086e:	7d3b      	ldrb	r3, [r7, #20]
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b21a      	sxth	r2, r3
 8000874:	7d7b      	ldrb	r3, [r7, #21]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	81bb      	strh	r3, [r7, #12]

  dev->accelerometer[0] = ((float)accelRaw[0]/16384.0f);
 800087e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000882:	ee07 3a90 	vmov	s15, r3
 8000886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80008d8 <MPU6050_ReadAccel+0xa4>
 800088e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	edc3 7a02 	vstr	s15, [r3, #8]
  dev->accelerometer[1] = ((float)accelRaw[1]/16384.0f);
 8000898:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800089c:	ee07 3a90 	vmov	s15, r3
 80008a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80008d8 <MPU6050_ReadAccel+0xa4>
 80008a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edc3 7a03 	vstr	s15, [r3, #12]
  dev->accelerometer[2] = ((float)accelRaw[2]/16384.0f);
 80008b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008b6:	ee07 3a90 	vmov	s15, r3
 80008ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008be:	eddf 6a06 	vldr	s13, [pc, #24]	; 80008d8 <MPU6050_ReadAccel+0xa4>
 80008c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	edc3 7a04 	vstr	s15, [r3, #16]

  return status;
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	46800000 	.word	0x46800000

080008dc <MPU6050_ReadGyro>:

HAL_StatusTypeDef MPU6050_ReadGyro(MPU6050 *dev)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint8_t regData[6];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, regData, 6);
 80008e4:	f107 0210 	add.w	r2, r7, #16
 80008e8:	2306      	movs	r3, #6
 80008ea:	2143      	movs	r1, #67	; 0x43
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f000 f849 	bl	8000984 <MPU6050_ReadRegisters>
 80008f2:	4603      	mov	r3, r0
 80008f4:	75fb      	strb	r3, [r7, #23]

  int16_t gyroRaw[3];

  gyroRaw[0] = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 80008f6:	7c3b      	ldrb	r3, [r7, #16]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	7c7b      	ldrb	r3, [r7, #17]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21b      	sxth	r3, r3
 8000904:	813b      	strh	r3, [r7, #8]
  gyroRaw[1] = ((int16_t)regData[2]<<8) | (int16_t)regData[3];
 8000906:	7cbb      	ldrb	r3, [r7, #18]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7cfb      	ldrb	r3, [r7, #19]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21b      	sxth	r3, r3
 8000914:	817b      	strh	r3, [r7, #10]
  gyroRaw[2] = ((int16_t)regData[4]<<8) | (int16_t)regData[5];
 8000916:	7d3b      	ldrb	r3, [r7, #20]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	7d7b      	ldrb	r3, [r7, #21]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21b      	sxth	r3, r3
 8000924:	81bb      	strh	r3, [r7, #12]

  dev->gyroscope[0] = ((float)gyroRaw[0]/131.0f);
 8000926:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000932:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000980 <MPU6050_ReadGyro+0xa4>
 8000936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	edc3 7a05 	vstr	s15, [r3, #20]
  dev->gyroscope[1] = ((float)gyroRaw[1]/131.0f);
 8000940:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000944:	ee07 3a90 	vmov	s15, r3
 8000948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000980 <MPU6050_ReadGyro+0xa4>
 8000950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	edc3 7a06 	vstr	s15, [r3, #24]
  dev->gyroscope[2] = ((float)gyroRaw[2]/131.0f);
 800095a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800095e:	ee07 3a90 	vmov	s15, r3
 8000962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000966:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000980 <MPU6050_ReadGyro+0xa4>
 800096a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	edc3 7a07 	vstr	s15, [r3, #28]

  return status;
 8000974:	7dfb      	ldrb	r3, [r7, #23]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	43030000 	.word	0x43030000

08000984 <MPU6050_ReadRegisters>:
{
  return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af04      	add	r7, sp, #16
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	461a      	mov	r2, r3
 8000990:	460b      	mov	r3, r1
 8000992:	72fb      	strb	r3, [r7, #11]
 8000994:	4613      	mov	r3, r2
 8000996:	72bb      	strb	r3, [r7, #10]
  return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	7abb      	ldrb	r3, [r7, #10]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	9102      	str	r1, [sp, #8]
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	21d0      	movs	r1, #208	; 0xd0
 80009b4:	f001 f876 	bl	8001aa4 <HAL_I2C_Mem_Read>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <MPU6050_WriteRegister>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b088      	sub	sp, #32
 80009c6:	af04      	add	r7, sp, #16
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
  return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	7afb      	ldrb	r3, [r7, #11]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	9302      	str	r3, [sp, #8]
 80009de:	2301      	movs	r3, #1
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	2301      	movs	r3, #1
 80009e8:	21d0      	movs	r1, #208	; 0xd0
 80009ea:	f000 ff61 	bl	80018b0 <HAL_I2C_Mem_Write>
 80009ee:	4603      	mov	r3, r0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b092      	sub	sp, #72	; 0x48
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fe:	f000 fb13 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f839 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 f8f7 	bl	8000bf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0a:	f000 f89d 	bl	8000b48 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 f8c9 	bl	8000ba4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&acc, &hi2c1);
 8000a12:	4910      	ldr	r1, [pc, #64]	; (8000a54 <main+0x5c>)
 8000a14:	4810      	ldr	r0, [pc, #64]	; (8000a58 <main+0x60>)
 8000a16:	f7ff fe6a 	bl	80006ee <MPU6050_Init>

  int errors = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	647b      	str	r3, [r7, #68]	; 0x44


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a1e:	f007 f873 	bl	8007b08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadIMU */
  ReadIMUHandle = osThreadNew(StartReadIMU, NULL, &ReadIMU_attributes);
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <main+0x64>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <main+0x68>)
 8000a28:	f007 f8b8 	bl	8007b9c <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <main+0x6c>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of SendBLEData */
  SendBLEDataHandle = osThreadNew(StartSendBLEData, NULL, &SendBLEData_attributes);
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <main+0x70>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	; (8000a6c <main+0x74>)
 8000a38:	f007 f8b0 	bl	8007b9c <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <main+0x78>)
 8000a40:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	480a      	ldr	r0, [pc, #40]	; (8000a74 <main+0x7c>)
 8000a4a:	f000 fdb9 	bl	80015c0 <HAL_GPIO_WritePin>


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a4e:	f007 f87f 	bl	8007b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x5a>
 8000a54:	20004e3c 	.word	0x20004e3c
 8000a58:	20004dfc 	.word	0x20004dfc
 8000a5c:	0800b260 	.word	0x0800b260
 8000a60:	08000cb9 	.word	0x08000cb9
 8000a64:	20004ed8 	.word	0x20004ed8
 8000a68:	0800b284 	.word	0x0800b284
 8000a6c:	08000ce5 	.word	0x08000ce5
 8000a70:	20004e90 	.word	0x20004e90
 8000a74:	40020800 	.word	0x40020800

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00a fad6 	bl	800b038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <SystemClock_Config+0xc8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <SystemClock_Config+0xc8>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <SystemClock_Config+0xc8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <SystemClock_Config+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a20      	ldr	r2, [pc, #128]	; (8000b44 <SystemClock_Config+0xcc>)
 8000ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <SystemClock_Config+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae8:	2319      	movs	r3, #25
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000aec:	23c0      	movs	r3, #192	; 0xc0
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fed5 	bl	80038ac <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b08:	f000 f90e 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2103      	movs	r1, #3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f937 	bl	8003d9c <HAL_RCC_ClockConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b34:	f000 f8f8 	bl	8000d28 <Error_Handler>
  }
}
 8000b38:	bf00      	nop
 8000b3a:	3750      	adds	r7, #80	; 0x50
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_I2C1_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b86:	f000 fd4f 	bl	8001628 <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 f8ca 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20004e3c 	.word	0x20004e3c
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	000186a0 	.word	0x000186a0

08000ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART1_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f003 fd60 	bl	80046a0 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f000 f89f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20004e94 	.word	0x20004e94
 8000bf4:	40011000 	.word	0x40011000

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a1f      	ldr	r2, [pc, #124]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_GPIO_Init+0xb8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0xbc>)
 8000c86:	f000 fc9b 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_GPIO_Init+0xbc>)
 8000ca4:	f000 fb08 	bl	80012b8 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <StartReadIMU>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadIMU */
void StartReadIMU(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000cc0:	f009 fc9c 	bl	800a5fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      MPU6050_ReadAccel(&acc);
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <StartReadIMU+0x28>)
 8000cc6:	f7ff fdb5 	bl	8000834 <MPU6050_ReadAccel>
      MPU6050_ReadTemp(&acc);
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <StartReadIMU+0x28>)
 8000ccc:	f7ff fd84 	bl	80007d8 <MPU6050_ReadTemp>
      MPU6050_ReadGyro(&acc);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <StartReadIMU+0x28>)
 8000cd2:	f7ff fe03 	bl	80008dc <MPU6050_ReadGyro>

      osDelay(100);
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f006 fff2 	bl	8007cc0 <osDelay>
      MPU6050_ReadAccel(&acc);
 8000cdc:	e7f2      	b.n	8000cc4 <StartReadIMU+0xc>
 8000cde:	bf00      	nop
 8000ce0:	20004dfc 	.word	0x20004dfc

08000ce4 <StartSendBLEData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendBLEData */
void StartSendBLEData(void *argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendBLEData */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <StartSendBLEData+0x1c>)
 8000cf2:	f000 fc7e 	bl	80015f2 <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfa:	f006 ffe1 	bl	8007cc0 <osDelay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cfe:	e7f5      	b.n	8000cec <StartSendBLEData+0x8>
 8000d00:	40020800 	.word	0x40020800

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 f9a9 	bl	800106c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40014000 	.word	0x40014000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x54>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <HAL_MspInit+0x54>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x54>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_MspInit+0x54>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x54>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x54>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 fa73 	bl	8001264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_I2C_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_I2C_MspInit+0x8c>)
 8000de8:	f000 fa66 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400

08000e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12b      	bne.n	8000e96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e48:	f043 0310 	orr.w	r3, r3, #16
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e76:	23c0      	movs	r3, #192	; 0xc0
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e86:	2307      	movs	r3, #7
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0x8c>)
 8000e92:	f000 fa11 	bl	80012b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40011000 	.word	0x40011000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2018      	movs	r0, #24
 8000ec2:	f000 f9cf 	bl	8001264 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ec6:	2018      	movs	r0, #24
 8000ec8:	f000 f9e8 	bl	800129c <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_InitTick+0xa0>)
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_InitTick+0xa0>)
 8000ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eda:	6453      	str	r3, [r2, #68]	; 0x44
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_InitTick+0xa0>)
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee8:	f107 0210 	add.w	r2, r7, #16
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 f922 	bl	800413c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ef8:	f003 f90c 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 8000efc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_InitTick+0xa4>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_InitTick+0xac>)
 8000f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f18:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f2e:	f003 f937 	bl	80041a0 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d104      	bne.n	8000f42 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <HAL_InitTick+0xa8>)
 8000f3a:	f003 f98b 	bl	8004254 <HAL_TIM_Base_Start_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	431bde83 	.word	0x431bde83
 8000f54:	20004edc 	.word	0x20004edc
 8000f58:	40014000 	.word	0x40014000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f8e:	f003 f9c3 	bl	8004318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20004edc 	.word	0x20004edc

08000f9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <OTG_FS_IRQHandler+0x10>)
 8000fa2:	f001 fc50 	bl	8002846 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20006438 	.word	0x20006438

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff0:	4c0b      	ldr	r4, [pc, #44]	; (8001020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffe:	f7ff ffd7 	bl	8000fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f009 ffe5 	bl	800afd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fcf7 	bl	80009f8 <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001018:	0800b330 	.word	0x0800b330
  ldr r2, =_sbss
 800101c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001020:	2000684c 	.word	0x2000684c

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f8fc 	bl	800124e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	200f      	movs	r0, #15
 8001058:	f7ff ff28 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe6a 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20004f24 	.word	0x20004f24

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20004f24 	.word	0x20004f24

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff4c 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001276:	f7ff ff61 	bl	800113c <__NVIC_GetPriorityGrouping>
 800127a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7ff ffb1 	bl	80011e8 <NVIC_EncodePriority>
 8001286:	4602      	mov	r2, r0
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff80 	bl	8001194 <__NVIC_SetPriority>
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff54 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e159      	b.n	8001588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8148 	bne.w	8001582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a2 	beq.w	8001582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a56      	ldr	r2, [pc, #344]	; (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <HAL_GPIO_Init+0x2e8>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a52      	ldr	r2, [pc, #328]	; (80015a4 <HAL_GPIO_Init+0x2ec>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <HAL_GPIO_Init+0x2f0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x202>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_GPIO_Init+0x2f4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x1fe>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <HAL_GPIO_Init+0x2f8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x1fa>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_GPIO_Init+0x2fc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x1f6>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <HAL_GPIO_Init+0x300>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x1f2>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e008      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014ae:	2303      	movs	r3, #3
 80014b0:	e004      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014b2:	2302      	movs	r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x204>
 80014ba:	2300      	movs	r3, #0
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	f002 0203 	and.w	r2, r2, #3
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	4093      	lsls	r3, r2
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014cc:	4935      	ldr	r1, [pc, #212]	; (80015a4 <HAL_GPIO_Init+0x2ec>)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014da:	4b38      	ldr	r3, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x304>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014fe:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001528:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_GPIO_Init+0x304>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001552:	4a1a      	ldr	r2, [pc, #104]	; (80015bc <HAL_GPIO_Init+0x304>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x304>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_GPIO_Init+0x304>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	f67f aea2 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	041a      	lsls	r2, r3, #16
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43d9      	mvns	r1, r3
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	400b      	ands	r3, r1
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e12b      	b.n	8001892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fb9c 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2224      	movs	r2, #36	; 0x24
 8001658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800167a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800168c:	f002 fd2e 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4a81      	ldr	r2, [pc, #516]	; (800189c <HAL_I2C_Init+0x274>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d807      	bhi.n	80016ac <HAL_I2C_Init+0x84>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4a80      	ldr	r2, [pc, #512]	; (80018a0 <HAL_I2C_Init+0x278>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	bf94      	ite	ls
 80016a4:	2301      	movls	r3, #1
 80016a6:	2300      	movhi	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e006      	b.n	80016ba <HAL_I2C_Init+0x92>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a7d      	ldr	r2, [pc, #500]	; (80018a4 <HAL_I2C_Init+0x27c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0e7      	b.n	8001892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a78      	ldr	r2, [pc, #480]	; (80018a8 <HAL_I2C_Init+0x280>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_I2C_Init+0x274>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d802      	bhi.n	80016fc <HAL_I2C_Init+0xd4>
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3301      	adds	r3, #1
 80016fa:	e009      	b.n	8001710 <HAL_I2C_Init+0xe8>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	4a69      	ldr	r2, [pc, #420]	; (80018ac <HAL_I2C_Init+0x284>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	3301      	adds	r3, #1
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	430b      	orrs	r3, r1
 8001716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001722:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	495c      	ldr	r1, [pc, #368]	; (800189c <HAL_I2C_Init+0x274>)
 800172c:	428b      	cmp	r3, r1
 800172e:	d819      	bhi.n	8001764 <HAL_I2C_Init+0x13c>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1e59      	subs	r1, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fbb1 f3f3 	udiv	r3, r1, r3
 800173e:	1c59      	adds	r1, r3, #1
 8001740:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001744:	400b      	ands	r3, r1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <HAL_I2C_Init+0x138>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1e59      	subs	r1, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fbb1 f3f3 	udiv	r3, r1, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	e051      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 8001760:	2304      	movs	r3, #4
 8001762:	e04f      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d111      	bne.n	8001790 <HAL_I2C_Init+0x168>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e58      	subs	r0, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e012      	b.n	80017b6 <HAL_I2C_Init+0x18e>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	0099      	lsls	r1, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Init+0x196>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e022      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10e      	bne.n	80017e4 <HAL_I2C_Init+0x1bc>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e58      	subs	r0, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	440b      	add	r3, r1
 80017d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e2:	e00f      	b.n	8001804 <HAL_I2C_Init+0x1dc>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1e58      	subs	r0, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	6809      	ldr	r1, [r1, #0]
 8001808:	4313      	orrs	r3, r2
 800180a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6911      	ldr	r1, [r2, #16]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68d2      	ldr	r2, [r2, #12]
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	000186a0 	.word	0x000186a0
 80018a0:	001e847f 	.word	0x001e847f
 80018a4:	003d08ff 	.word	0x003d08ff
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	10624dd3 	.word	0x10624dd3

080018b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4603      	mov	r3, r0
 80018c0:	817b      	strh	r3, [r7, #10]
 80018c2:	460b      	mov	r3, r1
 80018c4:	813b      	strh	r3, [r7, #8]
 80018c6:	4613      	mov	r3, r2
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018ca:	f7ff fbe3 	bl	8001094 <HAL_GetTick>
 80018ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b20      	cmp	r3, #32
 80018da:	f040 80d9 	bne.w	8001a90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2319      	movs	r3, #25
 80018e4:	2201      	movs	r2, #1
 80018e6:	496d      	ldr	r1, [pc, #436]	; (8001a9c <HAL_I2C_Mem_Write+0x1ec>)
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fc7f 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
 80018f6:	e0cc      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_I2C_Mem_Write+0x56>
 8001902:	2302      	movs	r3, #2
 8001904:	e0c5      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2221      	movs	r2, #33	; 0x21
 8001940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800195c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_I2C_Mem_Write+0x1f0>)
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800196e:	88f8      	ldrh	r0, [r7, #6]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	8979      	ldrh	r1, [r7, #10]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4603      	mov	r3, r0
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fab6 	bl	8001ef0 <I2C_RequestMemoryWrite>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d052      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e081      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fd00 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00d      	beq.n	80019ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d107      	bne.n	80019b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e06b      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d11b      	bne.n	8001a30 <HAL_I2C_Mem_Write+0x180>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d017      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1aa      	bne.n	800198e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fcec 	bl	800241a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d107      	bne.n	8001a60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e016      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e000      	b.n	8001a92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a90:	2302      	movs	r3, #2
  }
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	00100002 	.word	0x00100002
 8001aa0:	ffff0000 	.word	0xffff0000

08001aa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	817b      	strh	r3, [r7, #10]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	813b      	strh	r3, [r7, #8]
 8001aba:	4613      	mov	r3, r2
 8001abc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001abe:	f7ff fae9 	bl	8001094 <HAL_GetTick>
 8001ac2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	f040 8208 	bne.w	8001ee2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2319      	movs	r3, #25
 8001ad8:	2201      	movs	r2, #1
 8001ada:	497b      	ldr	r1, [pc, #492]	; (8001cc8 <HAL_I2C_Mem_Read+0x224>)
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fb85 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e1fb      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_I2C_Mem_Read+0x56>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e1f4      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d007      	beq.n	8001b20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2222      	movs	r2, #34	; 0x22
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	; (8001ccc <HAL_I2C_Mem_Read+0x228>)
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b62:	88f8      	ldrh	r0, [r7, #6]
 8001b64:	893a      	ldrh	r2, [r7, #8]
 8001b66:	8979      	ldrh	r1, [r7, #10]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	4603      	mov	r3, r0
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 fa52 	bl	800201c <I2C_RequestMemoryRead>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1b0      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d113      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	623b      	str	r3, [r7, #32]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e184      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d11b      	bne.n	8001bf2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e164      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d11b      	bne.n	8001c32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	e144      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c48:	e138      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	f200 80f1 	bhi.w	8001e36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d123      	bne.n	8001ca4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fc1b 	bl	800249c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e139      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691a      	ldr	r2, [r3, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ca2:	e10b      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d14e      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	4906      	ldr	r1, [pc, #24]	; (8001cd0 <HAL_I2C_Mem_Read+0x22c>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fa98 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e10e      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
 8001cc6:	bf00      	nop
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000
 8001cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d48:	e0b8      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d50:	2200      	movs	r2, #0
 8001d52:	4966      	ldr	r1, [pc, #408]	; (8001eec <HAL_I2C_Mem_Read+0x448>)
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fa49 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0bf      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dac:	2200      	movs	r2, #0
 8001dae:	494f      	ldr	r1, [pc, #316]	; (8001eec <HAL_I2C_Mem_Read+0x448>)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fa1b 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e091      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691a      	ldr	r2, [r3, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e34:	e042      	b.n	8001ebc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 fb2e 	bl	800249c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e04c      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d118      	bne.n	8001ebc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f aec2 	bne.w	8001c4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ee2:	2302      	movs	r3, #2
  }
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00010004 	.word	0x00010004

08001ef0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	817b      	strh	r3, [r7, #10]
 8001f02:	460b      	mov	r3, r1
 8001f04:	813b      	strh	r3, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f960 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f40:	d103      	bne.n	8001f4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e05f      	b.n	800200e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f4e:	897b      	ldrh	r3, [r7, #10]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <I2C_RequestMemoryWrite+0x128>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f998 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04c      	b.n	800200e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	6a39      	ldr	r1, [r7, #32]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa02 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d107      	bne.n	8001fb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e02b      	b.n	800200e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fbc:	893b      	ldrh	r3, [r7, #8]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	e021      	b.n	800200c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fc8:	893b      	ldrh	r3, [r7, #8]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f9dc 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d107      	bne.n	8001ffe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e005      	b.n	800200e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002002:	893b      	ldrh	r3, [r7, #8]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	00010002 	.word	0x00010002

0800201c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	461a      	mov	r2, r3
 800202a:	4603      	mov	r3, r0
 800202c:	817b      	strh	r3, [r7, #10]
 800202e:	460b      	mov	r3, r1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002044:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	2200      	movs	r2, #0
 800205e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f8c2 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00d      	beq.n	800208a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d103      	bne.n	8002086 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0aa      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	6a3a      	ldr	r2, [r7, #32]
 800209e:	4952      	ldr	r1, [pc, #328]	; (80021e8 <I2C_RequestMemoryRead+0x1cc>)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f8fa 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e097      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	6a39      	ldr	r1, [r7, #32]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f964 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d107      	bne.n	80020ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e076      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020f8:	893b      	ldrh	r3, [r7, #8]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	e021      	b.n	8002148 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002104:	893b      	ldrh	r3, [r7, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f93e 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b04      	cmp	r3, #4
 8002128:	d107      	bne.n	800213a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e050      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800213e:	893b      	ldrh	r3, [r7, #8]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f923 	bl	8002398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e035      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002182:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	2200      	movs	r2, #0
 800218c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f82b 	bl	80021ec <I2C_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021aa:	d103      	bne.n	80021b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e013      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	6a3a      	ldr	r2, [r7, #32]
 80021cc:	4906      	ldr	r1, [pc, #24]	; (80021e8 <I2C_RequestMemoryRead+0x1cc>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f863 	bl	800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00010002 	.word	0x00010002

080021ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fc:	e025      	b.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d021      	beq.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7fe ff45 	bl	8001094 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d116      	bne.n	800224a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f043 0220 	orr.w	r2, r3, #32
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e023      	b.n	8002292 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10d      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf0c      	ite	eq
 8002266:	2301      	moveq	r3, #1
 8002268:	2300      	movne	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	e00c      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	43da      	mvns	r2, r3
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4013      	ands	r3, r2
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	429a      	cmp	r2, r3
 800228e:	d0b6      	beq.n	80021fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022a8:	e051      	b.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b8:	d123      	bne.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0204 	orr.w	r2, r3, #4
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e046      	b.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d021      	beq.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	f7fe fec3 	bl	8001094 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d302      	bcc.n	8002320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d116      	bne.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e020      	b.n	8002390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d10c      	bne.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	e00b      	b.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	43da      	mvns	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4013      	ands	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d18d      	bne.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023a4:	e02d      	b.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f8ce 	bl	8002548 <I2C_IsAcknowledgeFailed>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02d      	b.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d021      	beq.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7fe fe69 	bl	8001094 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d302      	bcc.n	80023d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d116      	bne.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f043 0220 	orr.w	r2, r3, #32
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d1ca      	bne.n	80023a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002426:	e02d      	b.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f88d 	bl	8002548 <I2C_IsAcknowledgeFailed>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e02d      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d021      	beq.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002440:	f7fe fe28 	bl	8001094 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	429a      	cmp	r2, r3
 800244e:	d302      	bcc.n	8002456 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f043 0220 	orr.w	r2, r3, #32
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e007      	b.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d1ca      	bne.n	8002428 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a8:	e042      	b.n	8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b10      	cmp	r3, #16
 80024b6:	d119      	bne.n	80024ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0210 	mvn.w	r2, #16
 80024c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e029      	b.n	8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7fe fdd2 	bl	8001094 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d1b5      	bne.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d11b      	bne.n	8002598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0204 	orr.w	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a8:	b08f      	sub	sp, #60	; 0x3c
 80025aa:	af0a      	add	r7, sp, #40	; 0x28
 80025ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e10f      	b.n	80027d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f008 f9f2 	bl	800a9bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fb7d 	bl	8004cf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	687e      	ldr	r6, [r7, #4]
 8002604:	466d      	mov	r5, sp
 8002606:	f106 0410 	add.w	r4, r6, #16
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002616:	e885 0003 	stmia.w	r5, {r0, r1}
 800261a:	1d33      	adds	r3, r6, #4
 800261c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f002 fa54 	bl	8004acc <USB_CoreInit>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0d0      	b.n	80027d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f002 fb6b 	bl	8004d18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e04a      	b.n	80026de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	333d      	adds	r3, #61	; 0x3d
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	333c      	adds	r3, #60	; 0x3c
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	b298      	uxth	r0, r3
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3342      	adds	r3, #66	; 0x42
 8002684:	4602      	mov	r2, r0
 8002686:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	333f      	adds	r3, #63	; 0x3f
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3344      	adds	r3, #68	; 0x44
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3348      	adds	r3, #72	; 0x48
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3350      	adds	r3, #80	; 0x50
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3301      	adds	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3af      	bcc.n	8002648 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e044      	b.n	8002778 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002704:	7bfa      	ldrb	r2, [r7, #15]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	1a9b      	subs	r3, r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	3301      	adds	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d3b5      	bcc.n	80026ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	687e      	ldr	r6, [r7, #4]
 800278a:	466d      	mov	r5, sp
 800278c:	f106 0410 	add.w	r4, r6, #16
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002798:	e894 0003 	ldmia.w	r4, {r0, r1}
 800279c:	e885 0003 	stmia.w	r5, {r0, r1}
 80027a0:	1d33      	adds	r3, r6, #4
 80027a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	f002 fb03 	bl	8004db0 <USB_DevInit>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e00d      	b.n	80027d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 fb7f 	bl	8005ed4 <USB_DevDisconnect>

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_PCD_Start+0x1c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e020      	b.n	800283e <HAL_PCD_Start+0x5e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	2b01      	cmp	r3, #1
 800280a:	d109      	bne.n	8002820 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002810:	2b01      	cmp	r3, #1
 8002812:	d005      	beq.n	8002820 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fa55 	bl	8004cd4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fb2f 	bl	8005e92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002846:	b590      	push	{r4, r7, lr}
 8002848:	b08d      	sub	sp, #52	; 0x34
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fbed 	bl	800603c <USB_GetMode>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	f040 839d 	bne.w	8002fa4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f003 fb51 	bl	8005f16 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8393 	beq.w	8002fa2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fb48 	bl	8005f16 <USB_ReadInterrupts>
 8002886:	4603      	mov	r3, r0
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	d107      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f002 0202 	and.w	r2, r2, #2
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fb36 	bl	8005f16 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d161      	bne.n	8002978 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0210 	bic.w	r2, r2, #16
 80028c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f003 020f 	and.w	r2, r3, #15
 80028d0:	4613      	mov	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	0c5b      	lsrs	r3, r3, #17
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d124      	bne.n	800293a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d035      	beq.n	8002968 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800290a:	b29b      	uxth	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	6a38      	ldr	r0, [r7, #32]
 8002910:	f003 f96d 	bl	8005bee <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002920:	441a      	add	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002932:	441a      	add	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	e016      	b.n	8002968 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	0c5b      	lsrs	r3, r3, #17
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	2b06      	cmp	r3, #6
 8002944:	d110      	bne.n	8002968 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800294c:	2208      	movs	r2, #8
 800294e:	4619      	mov	r1, r3
 8002950:	6a38      	ldr	r0, [r7, #32]
 8002952:	f003 f94c 	bl	8005bee <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002962:	441a      	add	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0210 	orr.w	r2, r2, #16
 8002976:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 faca 	bl	8005f16 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002988:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800298c:	d16e      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fad0 	bl	8005f3c <USB_ReadDevAllOutEpInterrupt>
 800299c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800299e:	e062      	b.n	8002a66 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d057      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 faf5 	bl	8005fa4 <USB_ReadDevOutEPInterrupt>
 80029ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d2:	461a      	mov	r2, r3
 80029d4:	2301      	movs	r3, #1
 80029d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fdb0 	bl	8003540 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f6:	461a      	mov	r2, r3
 80029f8:	2308      	movs	r3, #8
 80029fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 feaa 	bl	8003758 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d008      	beq.n	8002a20 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d008      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a36:	461a      	mov	r2, r3
 8002a38:	2320      	movs	r3, #32
 8002a3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a52:	461a      	mov	r2, r3
 8002a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	085b      	lsrs	r3, r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d199      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fa50 	bl	8005f16 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a80:	f040 80c0 	bne.w	8002c04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fa71 	bl	8005f70 <USB_ReadDevAllInEpInterrupt>
 8002a8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a94:	e0b2      	b.n	8002bfc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a7 	beq.w	8002bf0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 fa97 	bl	8005fe0 <USB_ReadDevInEPInterrupt>
 8002ab2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d057      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ade:	4013      	ands	r3, r2
 8002ae0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aee:	461a      	mov	r2, r3
 8002af0:	2301      	movs	r3, #1
 8002af2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d132      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3348      	adds	r3, #72	; 0x48
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4403      	add	r3, r0
 8002b1c:	3344      	adds	r3, #68	; 0x44
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4419      	add	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4403      	add	r3, r0
 8002b30:	3348      	adds	r3, #72	; 0x48
 8002b32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d113      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x31c>
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3350      	adds	r3, #80	; 0x50
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d108      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	f003 fa9f 	bl	80060a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f007 ffa8 	bl	800aabe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b84:	461a      	mov	r2, r3
 8002b86:	2308      	movs	r3, #8
 8002b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2310      	movs	r3, #16
 8002ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2302      	movs	r3, #2
 8002bdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002be8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fc1b 	bl	8003426 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f47f af49 	bne.w	8002a96 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 f984 	bl	8005f16 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c18:	d122      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d108      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c40:	2100      	movs	r1, #0
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fe26 	bl	8003894 <HAL_PCDEx_LPM_Callback>
 8002c48:	e002      	b.n	8002c50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f007 ffa4 	bl	800ab98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 f956 	bl	8005f16 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c74:	d112      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f007 ff60 	bl	800ab4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 f938 	bl	8005f16 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	f040 80c7 	bne.w	8002e42 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2110      	movs	r1, #16
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 f9d2 	bl	8005078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd8:	e056      	b.n	8002d88 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfe:	0151      	lsls	r1, r2, #5
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	440a      	add	r2, r1
 8002d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d0c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1e:	0151      	lsls	r1, r2, #5
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	440a      	add	r2, r1
 8002d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d52:	0151      	lsls	r1, r2, #5
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	440a      	add	r2, r1
 8002d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	3301      	adds	r3, #1
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d3a3      	bcc.n	8002cda <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002da4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbe:	f043 030b 	orr.w	r3, r3, #11
 8002dc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd4:	f043 030b 	orr.w	r3, r3, #11
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	e015      	b.n	8002e08 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002df2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e02:	f043 030b 	orr.w	r3, r3, #11
 8002e06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f003 f937 	bl	80060a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f003 f865 	bl	8005f16 <USB_ReadInterrupts>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e56:	d124      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 f8fb 	bl	8006058 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 f963 	bl	8005132 <USB_GetDevSpeed>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681c      	ldr	r4, [r3, #0]
 8002e78:	f001 f92c 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4620      	mov	r0, r4
 8002e88:	f001 fe82 	bl	8004b90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f007 fe3e 	bl	800ab0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 f835 	bl	8005f16 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d10a      	bne.n	8002ecc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f007 fe1b 	bl	800aaf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f002 0208 	and.w	r2, r2, #8
 8002eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 f820 	bl	8005f16 <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee0:	d10f      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f007 fe73 	bl	800abd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f805 	bl	8005f16 <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f16:	d10f      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f007 fe46 	bl	800abb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 ffea 	bl	8005f16 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d10a      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f007 fe54 	bl	800abfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 ffd4 	bl	8005f16 <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d115      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f007 fe44 	bl	800ac18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e000      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002fa2:	bf00      	nop
    }
  }
}
 8002fa4:	3734      	adds	r7, #52	; 0x34
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}

08002faa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_PCD_SetAddress+0x1a>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e013      	b.n	8002fec <HAL_PCD_SetAddress+0x42>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 ff32 	bl	8005e46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	70fb      	strb	r3, [r7, #3]
 8003006:	460b      	mov	r3, r1
 8003008:	803b      	strh	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003016:	2b00      	cmp	r3, #0
 8003018:	da0f      	bge.n	800303a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	3338      	adds	r3, #56	; 0x38
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	3304      	adds	r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	705a      	strb	r2, [r3, #1]
 8003038:	e00f      	b.n	800305a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003066:	883a      	ldrh	r2, [r7, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	78ba      	ldrb	r2, [r7, #2]
 8003070:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003084:	78bb      	ldrb	r3, [r7, #2]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d102      	bne.n	8003090 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_EP_Open+0xaa>
 800309a:	2302      	movs	r3, #2
 800309c:	e00e      	b.n	80030bc <HAL_PCD_EP_Open+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 f865 	bl	800517c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da0f      	bge.n	80030f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3338      	adds	r3, #56	; 0x38
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
 80030f6:	e00f      	b.n	8003118 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_EP_Close+0x6e>
 800312e:	2302      	movs	r3, #2
 8003130:	e00e      	b.n	8003150 <HAL_PCD_EP_Close+0x8c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	4618      	mov	r0, r3
 8003142:	f002 f8a3 	bl	800528c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	460b      	mov	r3, r1
 8003166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	f002 fb7e 	bl	80058cc <USB_EP0StartXfer>
 80031d0:	e008      	b.n	80031e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	f002 f930 	bl	8005444 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003210:	681b      	ldr	r3, [r3, #0]
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	460b      	mov	r3, r1
 800322c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3338      	adds	r3, #56	; 0x38
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	3304      	adds	r3, #4
 8003244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	b2da      	uxtb	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	f002 fb1c 	bl	80058cc <USB_EP0StartXfer>
 8003294:	e008      	b.n	80032a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	f002 f8ce 	bl	8005444 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d901      	bls.n	80032d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e050      	b.n	8003372 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da0f      	bge.n	80032f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3338      	adds	r3, #56	; 0x38
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
 80032f6:	e00d      	b.n	8003314 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_PCD_EP_SetStall+0x82>
 8003330:	2302      	movs	r3, #2
 8003332:	e01e      	b.n	8003372 <HAL_PCD_EP_SetStall+0xc0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	f002 fcab 	bl	8005c9e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	b2d9      	uxtb	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003362:	461a      	mov	r2, r3
 8003364:	f002 fe9c 	bl	80060a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d901      	bls.n	8003398 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e042      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0f      	bge.n	80033c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3338      	adds	r3, #56	; 0x38
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	705a      	strb	r2, [r3, #1]
 80033be:	e00f      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_EP_ClrStall+0x86>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e00e      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f002 fcb3 	bl	8005d7a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b08a      	sub	sp, #40	; 0x28
 800342a:	af02      	add	r7, sp, #8
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	3338      	adds	r3, #56	; 0x38
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d901      	bls.n	800345e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06c      	b.n	8003538 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	429a      	cmp	r2, r3
 8003472:	d902      	bls.n	800347a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3303      	adds	r3, #3
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003482:	e02b      	b.n	80034dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	429a      	cmp	r2, r3
 8003498:	d902      	bls.n	80034a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3303      	adds	r3, #3
 80034a4:	089b      	lsrs	r3, r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68d9      	ldr	r1, [r3, #12]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4603      	mov	r3, r0
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f002 fb57 	bl	8005b72 <USB_WritePacket>

    ep->xfer_buff  += len;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	441a      	add	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	441a      	add	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d809      	bhi.n	8003506 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d203      	bcs.n	8003506 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1be      	bne.n	8003484 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	429a      	cmp	r2, r3
 8003510:	d811      	bhi.n	8003536 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	2201      	movs	r2, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	43db      	mvns	r3, r3
 800352c:	6939      	ldr	r1, [r7, #16]
 800352e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003532:	4013      	ands	r3, r2
 8003534:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	333c      	adds	r3, #60	; 0x3c
 8003558:	3304      	adds	r3, #4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 80a0 	bne.w	80036b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d015      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a72      	ldr	r2, [pc, #456]	; (8003750 <PCD_EP_OutXfrComplete_int+0x210>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f240 80dd 	bls.w	8003746 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80d7 	beq.w	8003746 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e0cb      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	2320      	movs	r3, #32
 80035c8:	6093      	str	r3, [r2, #8]
 80035ca:	e0bc      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 80b7 	bne.w	8003746 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a5d      	ldr	r2, [pc, #372]	; (8003750 <PCD_EP_OutXfrComplete_int+0x210>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d90f      	bls.n	8003600 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	461a      	mov	r2, r3
 80035f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fc:	6093      	str	r3, [r2, #8]
 80035fe:	e0a2      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003612:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	0159      	lsls	r1, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	440b      	add	r3, r1
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003626:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800363a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4419      	add	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003678:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d114      	bne.n	80036aa <PCD_EP_OutXfrComplete_int+0x16a>
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036a2:	461a      	mov	r2, r3
 80036a4:	2101      	movs	r1, #1
 80036a6:	f002 fcfb 	bl	80060a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	4619      	mov	r1, r3
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f007 f9e9 	bl	800aa88 <HAL_PCD_DataOutStageCallback>
 80036b6:	e046      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a26      	ldr	r2, [pc, #152]	; (8003754 <PCD_EP_OutXfrComplete_int+0x214>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d124      	bne.n	800370a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d6:	461a      	mov	r2, r3
 80036d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036dc:	6093      	str	r3, [r2, #8]
 80036de:	e032      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	461a      	mov	r2, r3
 80036f8:	2320      	movs	r3, #32
 80036fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f007 f9c0 	bl	800aa88 <HAL_PCD_DataOutStageCallback>
 8003708:	e01d      	b.n	8003746 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d114      	bne.n	800373a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d108      	bne.n	800373a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003732:	461a      	mov	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	f002 fcb3 	bl	80060a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f007 f9a1 	bl	800aa88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	4f54300a 	.word	0x4f54300a
 8003754:	4f54310a 	.word	0x4f54310a

08003758 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	333c      	adds	r3, #60	; 0x3c
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d90e      	bls.n	80037ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003794:	2b00      	cmp	r3, #0
 8003796:	d009      	beq.n	80037ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	461a      	mov	r2, r3
 80037a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f007 f959 	bl	800aa64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d90c      	bls.n	80037d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037cc:	461a      	mov	r2, r3
 80037ce:	2101      	movs	r1, #1
 80037d0:	f002 fc66 	bl	80060a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	4f54300a 	.word	0x4f54300a

080037e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
 80037f0:	4613      	mov	r3, r2
 80037f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003802:	883b      	ldrh	r3, [r7, #0]
 8003804:	0419      	lsls	r1, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	430a      	orrs	r2, r1
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
 8003810:	e028      	b.n	8003864 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4413      	add	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e00d      	b.n	8003842 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	3340      	adds	r3, #64	; 0x40
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	3301      	adds	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	3b01      	subs	r3, #1
 8003848:	429a      	cmp	r2, r3
 800384a:	d3ec      	bcc.n	8003826 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800384c:	883b      	ldrh	r3, [r7, #0]
 800384e:	0418      	lsls	r0, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	3b01      	subs	r3, #1
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4302      	orrs	r2, r0
 800385c:	3340      	adds	r3, #64	; 0x40
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e264      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	4ba3      	ldr	r3, [pc, #652]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d112      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b99      	ldr	r3, [pc, #612]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e23f      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x74>
 8003912:	4b91      	ldr	r3, [pc, #580]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a90      	ldr	r2, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a8a      	ldr	r2, [pc, #552]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003944:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a80      	ldr	r2, [pc, #512]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fd fb96 	bl	8001094 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396c:	f7fd fb92 	bl	8001094 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e204      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b76      	ldr	r3, [pc, #472]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xc0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd fb82 	bl	8001094 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd fb7e 	bl	8001094 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1f0      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0xe8>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b62      	ldr	r3, [pc, #392]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1c4      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b56      	ldr	r3, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4952      	ldr	r1, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e03a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <HAL_RCC_OscConfig+0x2b0>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fb37 	bl	8001094 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fb33 	bl	8001094 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1a5      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b43      	ldr	r3, [pc, #268]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4940      	ldr	r1, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e015      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <HAL_RCC_OscConfig+0x2b0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7fd fb16 	bl	8001094 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fb12 	bl	8001094 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e184      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d030      	beq.n	8003af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_RCC_OscConfig+0x2b4>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fd faf6 	bl	8001094 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aac:	f7fd faf2 	bl	8001094 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e164      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x200>
 8003aca:	e015      	b.n	8003af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003acc:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_OscConfig+0x2b4>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7fd fadf 	bl	8001094 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ada:	f7fd fadb 	bl	8001094 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e14d      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a0 	beq.w	8003c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10f      	bne.n	8003b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d121      	bne.n	8003b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_RCC_OscConfig+0x2b8>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd faa1 	bl	8001094 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	e011      	b.n	8003b7a <HAL_RCC_OscConfig+0x2ce>
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	42470000 	.word	0x42470000
 8003b60:	42470e80 	.word	0x42470e80
 8003b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd fa94 	bl	8001094 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e106      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7a:	4b85      	ldr	r3, [pc, #532]	; (8003d90 <HAL_RCC_OscConfig+0x4e4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2f0>
 8003b8e:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a80      	ldr	r2, [pc, #512]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x312>
 8003ba4:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a7a      	ldr	r2, [pc, #488]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	4b78      	ldr	r3, [pc, #480]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	4a77      	ldr	r2, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	; 0x70
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x32a>
 8003bbe:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	4a74      	ldr	r2, [pc, #464]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bce:	4a71      	ldr	r2, [pc, #452]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bde:	f7fd fa59 	bl	8001094 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fa55 	bl	8001094 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0c5      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x33a>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fa43 	bl	8001094 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd fa3f 	bl	8001094 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e0af      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b56      	ldr	r3, [pc, #344]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4a55      	ldr	r2, [pc, #340]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 809b 	beq.w	8003d86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d05c      	beq.n	8003d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d141      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b4c      	ldr	r3, [pc, #304]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fa13 	bl	8001094 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd fa0f 	bl	8001094 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e081      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	4b43      	ldr	r3, [pc, #268]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	019b      	lsls	r3, r3, #6
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	4937      	ldr	r1, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cba:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f9e8 	bl	8001094 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f9e4 	bl	8001094 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e056      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b2e      	ldr	r3, [pc, #184]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x41c>
 8003ce6:	e04e      	b.n	8003d86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fd f9d1 	bl	8001094 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fd f9cd 	bl	8001094 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e03f      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d08:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x44a>
 8003d14:	e037      	b.n	8003d86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e032      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_RCC_OscConfig+0x4e8>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d028      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d121      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d11a      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d52:	4013      	ands	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d111      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40007000 	.word	0x40007000
 8003d94:	40023800 	.word	0x40023800
 8003d98:	42470060 	.word	0x42470060

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7fd f902 	bl	8001094 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fd f8fe 	bl	8001094 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc ffb2 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800b2a8 	.word	0x0800b2a8
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b5b0      	push	{r4, r5, r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f6e:	2100      	movs	r1, #0
 8003f70:	6079      	str	r1, [r7, #4]
 8003f72:	2100      	movs	r1, #0
 8003f74:	60f9      	str	r1, [r7, #12]
 8003f76:	2100      	movs	r1, #0
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f7e:	4952      	ldr	r1, [pc, #328]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f80:	6889      	ldr	r1, [r1, #8]
 8003f82:	f001 010c 	and.w	r1, r1, #12
 8003f86:	2908      	cmp	r1, #8
 8003f88:	d00d      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003f8a:	2908      	cmp	r1, #8
 8003f8c:	f200 8094 	bhi.w	80040b8 <HAL_RCC_GetSysClockFreq+0x150>
 8003f90:	2900      	cmp	r1, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x32>
 8003f94:	2904      	cmp	r1, #4
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x38>
 8003f98:	e08e      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9a:	4b4c      	ldr	r3, [pc, #304]	; (80040cc <HAL_RCC_GetSysClockFreq+0x164>)
 8003f9c:	60bb      	str	r3, [r7, #8]
       break;
 8003f9e:	e08e      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa0:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fa2:	60bb      	str	r3, [r7, #8]
      break;
 8003fa4:	e08b      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa6:	4948      	ldr	r1, [pc, #288]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fa8:	6849      	ldr	r1, [r1, #4]
 8003faa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003fae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb0:	4945      	ldr	r1, [pc, #276]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fb2:	6849      	ldr	r1, [r1, #4]
 8003fb4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003fb8:	2900      	cmp	r1, #0
 8003fba:	d024      	beq.n	8004006 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbc:	4942      	ldr	r1, [pc, #264]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fbe:	6849      	ldr	r1, [r1, #4]
 8003fc0:	0989      	lsrs	r1, r1, #6
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003fcc:	f04f 0500 	mov.w	r5, #0
 8003fd0:	ea00 0204 	and.w	r2, r0, r4
 8003fd4:	ea01 0305 	and.w	r3, r1, r5
 8003fd8:	493d      	ldr	r1, [pc, #244]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fda:	fb01 f003 	mul.w	r0, r1, r3
 8003fde:	2100      	movs	r1, #0
 8003fe0:	fb01 f102 	mul.w	r1, r1, r2
 8003fe4:	1844      	adds	r4, r0, r1
 8003fe6:	493a      	ldr	r1, [pc, #232]	; (80040d0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003fe8:	fba2 0101 	umull	r0, r1, r2, r1
 8003fec:	1863      	adds	r3, r4, r1
 8003fee:	4619      	mov	r1, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	f7fc f8f2 	bl	80001e0 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4613      	mov	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e04a      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b30      	ldr	r3, [pc, #192]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	461a      	mov	r2, r3
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	ea02 0400 	and.w	r4, r2, r0
 800401e:	ea03 0501 	and.w	r5, r3, r1
 8004022:	4620      	mov	r0, r4
 8004024:	4629      	mov	r1, r5
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	014b      	lsls	r3, r1, #5
 8004030:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004034:	0142      	lsls	r2, r0, #5
 8004036:	4610      	mov	r0, r2
 8004038:	4619      	mov	r1, r3
 800403a:	1b00      	subs	r0, r0, r4
 800403c:	eb61 0105 	sbc.w	r1, r1, r5
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	018b      	lsls	r3, r1, #6
 800404a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800404e:	0182      	lsls	r2, r0, #6
 8004050:	1a12      	subs	r2, r2, r0
 8004052:	eb63 0301 	sbc.w	r3, r3, r1
 8004056:	f04f 0000 	mov.w	r0, #0
 800405a:	f04f 0100 	mov.w	r1, #0
 800405e:	00d9      	lsls	r1, r3, #3
 8004060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004064:	00d0      	lsls	r0, r2, #3
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	1912      	adds	r2, r2, r4
 800406c:	eb45 0303 	adc.w	r3, r5, r3
 8004070:	f04f 0000 	mov.w	r0, #0
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	0299      	lsls	r1, r3, #10
 800407a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800407e:	0290      	lsls	r0, r2, #10
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	f7fc f8a6 	bl	80001e0 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	60bb      	str	r3, [r7, #8]
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <HAL_RCC_GetSysClockFreq+0x164>)
 80040ba:	60bb      	str	r3, [r7, #8]
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	68bb      	ldr	r3, [r7, #8]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bdb0      	pop	{r4, r5, r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	017d7840 	.word	0x017d7840

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000000 	.word	0x20000000

080040ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040f0:	f7ff fff0 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0a9b      	lsrs	r3, r3, #10
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	; (8004110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	0800b2b8 	.word	0x0800b2b8

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004118:	f7ff ffdc 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0b5b      	lsrs	r3, r3, #13
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	0800b2b8 	.word	0x0800b2b8

0800413c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	220f      	movs	r2, #15
 800414a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0203 	and.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_RCC_GetClockConfig+0x5c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	08db      	lsrs	r3, r3, #3
 8004176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <HAL_RCC_GetClockConfig+0x60>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0207 	and.w	r2, r3, #7
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800
 800419c:	40023c00 	.word	0x40023c00

080041a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e041      	b.n	8004236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f839 	bl	800423e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4619      	mov	r1, r3
 80041de:	4610      	mov	r0, r2
 80041e0:	f000 f9ca 	bl	8004578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d001      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e044      	b.n	80042f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_TIM_Base_Start_IT+0xb0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x6c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d013      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	; (8004308 <HAL_TIM_Base_Start_IT+0xb4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_TIM_Base_Start_IT+0xb8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x6c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_TIM_Base_Start_IT+0xbc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_Base_Start_IT+0x6c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <HAL_TIM_Base_Start_IT+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d111      	bne.n	80042e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d010      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	e007      	b.n	80042f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000

08004318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b02      	cmp	r3, #2
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b02      	cmp	r3, #2
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0202 	mvn.w	r2, #2
 8004344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8ee 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f8e0 	bl	8004528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f8f1 	bl	8004550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d122      	bne.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d11b      	bne.n	80043c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0204 	mvn.w	r2, #4
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f8c4 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 80043b4:	e005      	b.n	80043c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f8b6 	bl	8004528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8c7 	bl	8004550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d122      	bne.n	800441c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0208 	mvn.w	r2, #8
 80043ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2204      	movs	r2, #4
 80043f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f89a 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f88c 	bl	8004528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f89d 	bl	8004550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b10      	cmp	r3, #16
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0310 	and.w	r3, r3, #16
 8004434:	2b10      	cmp	r3, #16
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0210 	mvn.w	r2, #16
 8004440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2208      	movs	r2, #8
 8004446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f870 	bl	800453c <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f862 	bl	8004528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f873 	bl	8004550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0201 	mvn.w	r2, #1
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fc34 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b80      	cmp	r3, #128	; 0x80
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8e2 	bl	800468c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f838 	bl	8004564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0220 	mvn.w	r2, #32
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8ac 	bl	8004678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a34      	ldr	r2, [pc, #208]	; (800465c <TIM_Base_SetConfig+0xe4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d00b      	beq.n	80045b0 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a31      	ldr	r2, [pc, #196]	; (8004660 <TIM_Base_SetConfig+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_Base_SetConfig+0x38>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a30      	ldr	r2, [pc, #192]	; (8004664 <TIM_Base_SetConfig+0xec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_Base_SetConfig+0x38>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a2f      	ldr	r2, [pc, #188]	; (8004668 <TIM_Base_SetConfig+0xf0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d108      	bne.n	80045c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0xe4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01b      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d017      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a22      	ldr	r2, [pc, #136]	; (8004660 <TIM_Base_SetConfig+0xe8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <TIM_Base_SetConfig+0xec>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00f      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a20      	ldr	r2, [pc, #128]	; (8004668 <TIM_Base_SetConfig+0xf0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00b      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <TIM_Base_SetConfig+0xf4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <TIM_Base_SetConfig+0xf8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <TIM_Base_SetConfig+0xfc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d108      	bne.n	8004614 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a08      	ldr	r2, [pc, #32]	; (800465c <TIM_Base_SetConfig+0xe4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	615a      	str	r2, [r3, #20]
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40010000 	.word	0x40010000
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800
 8004668:	40000c00 	.word	0x40000c00
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e03f      	b.n	8004732 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fba8 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2224      	movs	r2, #36	; 0x24
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f829 	bl	800473c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800473c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004740:	b09f      	sub	sp, #124	; 0x7c
 8004742:	af00      	add	r7, sp, #0
 8004744:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004752:	68d9      	ldr	r1, [r3, #12]
 8004754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	ea40 0301 	orr.w	r3, r0, r1
 800475c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800475e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	431a      	orrs	r2, r3
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	431a      	orrs	r2, r3
 800476e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4313      	orrs	r3, r2
 8004774:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004780:	f021 010c 	bic.w	r1, r1, #12
 8004784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800478a:	430b      	orrs	r3, r1
 800478c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800478e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479a:	6999      	ldr	r1, [r3, #24]
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	ea40 0301 	orr.w	r3, r0, r1
 80047a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4bc5      	ldr	r3, [pc, #788]	; (8004ac0 <UART_SetConfig+0x384>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d004      	beq.n	80047ba <UART_SetConfig+0x7e>
 80047b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	4bc3      	ldr	r3, [pc, #780]	; (8004ac4 <UART_SetConfig+0x388>)
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d103      	bne.n	80047c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047ba:	f7ff fcab 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80047be:	6778      	str	r0, [r7, #116]	; 0x74
 80047c0:	e002      	b.n	80047c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047c2:	f7ff fc93 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 80047c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	f040 80b6 	bne.w	8004940 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d6:	461c      	mov	r4, r3
 80047d8:	f04f 0500 	mov.w	r5, #0
 80047dc:	4622      	mov	r2, r4
 80047de:	462b      	mov	r3, r5
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	6439      	str	r1, [r7, #64]	; 0x40
 80047e4:	415b      	adcs	r3, r3
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44
 80047e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ec:	1912      	adds	r2, r2, r4
 80047ee:	eb45 0303 	adc.w	r3, r5, r3
 80047f2:	f04f 0000 	mov.w	r0, #0
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	00d9      	lsls	r1, r3, #3
 80047fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004800:	00d0      	lsls	r0, r2, #3
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	1911      	adds	r1, r2, r4
 8004808:	6639      	str	r1, [r7, #96]	; 0x60
 800480a:	416b      	adcs	r3, r5
 800480c:	667b      	str	r3, [r7, #100]	; 0x64
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	461a      	mov	r2, r3
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	1891      	adds	r1, r2, r2
 800481a:	63b9      	str	r1, [r7, #56]	; 0x38
 800481c:	415b      	adcs	r3, r3
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004824:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004828:	f7fb fcda 	bl	80001e0 <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4ba5      	ldr	r3, [pc, #660]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004832:	fba3 2302 	umull	r2, r3, r3, r2
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	011e      	lsls	r6, r3, #4
 800483a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483c:	461c      	mov	r4, r3
 800483e:	f04f 0500 	mov.w	r5, #0
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	1891      	adds	r1, r2, r2
 8004848:	6339      	str	r1, [r7, #48]	; 0x30
 800484a:	415b      	adcs	r3, r3
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004852:	1912      	adds	r2, r2, r4
 8004854:	eb45 0303 	adc.w	r3, r5, r3
 8004858:	f04f 0000 	mov.w	r0, #0
 800485c:	f04f 0100 	mov.w	r1, #0
 8004860:	00d9      	lsls	r1, r3, #3
 8004862:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004866:	00d0      	lsls	r0, r2, #3
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	1911      	adds	r1, r2, r4
 800486e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004870:	416b      	adcs	r3, r5
 8004872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	461a      	mov	r2, r3
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	1891      	adds	r1, r2, r2
 8004880:	62b9      	str	r1, [r7, #40]	; 0x28
 8004882:	415b      	adcs	r3, r3
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004886:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800488a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800488e:	f7fb fca7 	bl	80001e0 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4b8c      	ldr	r3, [pc, #560]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004898:	fba3 1302 	umull	r1, r3, r3, r2
 800489c:	095b      	lsrs	r3, r3, #5
 800489e:	2164      	movs	r1, #100	; 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	3332      	adds	r3, #50	; 0x32
 80048aa:	4a87      	ldr	r2, [pc, #540]	; (8004ac8 <UART_SetConfig+0x38c>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048b8:	441e      	add	r6, r3
 80048ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048bc:	4618      	mov	r0, r3
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	1894      	adds	r4, r2, r2
 80048c8:	623c      	str	r4, [r7, #32]
 80048ca:	415b      	adcs	r3, r3
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
 80048ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048d2:	1812      	adds	r2, r2, r0
 80048d4:	eb41 0303 	adc.w	r3, r1, r3
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	f04f 0500 	mov.w	r5, #0
 80048e0:	00dd      	lsls	r5, r3, #3
 80048e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048e6:	00d4      	lsls	r4, r2, #3
 80048e8:	4622      	mov	r2, r4
 80048ea:	462b      	mov	r3, r5
 80048ec:	1814      	adds	r4, r2, r0
 80048ee:	653c      	str	r4, [r7, #80]	; 0x50
 80048f0:	414b      	adcs	r3, r1
 80048f2:	657b      	str	r3, [r7, #84]	; 0x54
 80048f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	461a      	mov	r2, r3
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	1891      	adds	r1, r2, r2
 8004900:	61b9      	str	r1, [r7, #24]
 8004902:	415b      	adcs	r3, r3
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800490a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800490e:	f7fb fc67 	bl	80001e0 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004918:	fba3 1302 	umull	r1, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	fb01 f303 	mul.w	r3, r1, r3
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	3332      	adds	r3, #50	; 0x32
 800492a:	4a67      	ldr	r2, [pc, #412]	; (8004ac8 <UART_SetConfig+0x38c>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4432      	add	r2, r6
 800493c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800493e:	e0b9      	b.n	8004ab4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004942:	461c      	mov	r4, r3
 8004944:	f04f 0500 	mov.w	r5, #0
 8004948:	4622      	mov	r2, r4
 800494a:	462b      	mov	r3, r5
 800494c:	1891      	adds	r1, r2, r2
 800494e:	6139      	str	r1, [r7, #16]
 8004950:	415b      	adcs	r3, r3
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004958:	1912      	adds	r2, r2, r4
 800495a:	eb45 0303 	adc.w	r3, r5, r3
 800495e:	f04f 0000 	mov.w	r0, #0
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	00d9      	lsls	r1, r3, #3
 8004968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800496c:	00d0      	lsls	r0, r2, #3
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	eb12 0804 	adds.w	r8, r2, r4
 8004976:	eb43 0905 	adc.w	r9, r3, r5
 800497a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4618      	mov	r0, r3
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	008b      	lsls	r3, r1, #2
 800498e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004992:	0082      	lsls	r2, r0, #2
 8004994:	4640      	mov	r0, r8
 8004996:	4649      	mov	r1, r9
 8004998:	f7fb fc22 	bl	80001e0 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4b49      	ldr	r3, [pc, #292]	; (8004ac8 <UART_SetConfig+0x38c>)
 80049a2:	fba3 2302 	umull	r2, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	011e      	lsls	r6, r3, #4
 80049aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ac:	4618      	mov	r0, r3
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	1894      	adds	r4, r2, r2
 80049b8:	60bc      	str	r4, [r7, #8]
 80049ba:	415b      	adcs	r3, r3
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c2:	1812      	adds	r2, r2, r0
 80049c4:	eb41 0303 	adc.w	r3, r1, r3
 80049c8:	f04f 0400 	mov.w	r4, #0
 80049cc:	f04f 0500 	mov.w	r5, #0
 80049d0:	00dd      	lsls	r5, r3, #3
 80049d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049d6:	00d4      	lsls	r4, r2, #3
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	1814      	adds	r4, r2, r0
 80049de:	64bc      	str	r4, [r7, #72]	; 0x48
 80049e0:	414b      	adcs	r3, r1
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	008b      	lsls	r3, r1, #2
 80049f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049fc:	0082      	lsls	r2, r0, #2
 80049fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a02:	f7fb fbed 	bl	80001e0 <__aeabi_uldivmod>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	2164      	movs	r1, #100	; 0x64
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	3332      	adds	r3, #50	; 0x32
 8004a1e:	4a2a      	ldr	r2, [pc, #168]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a2a:	441e      	add	r6, r3
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	1894      	adds	r4, r2, r2
 8004a3a:	603c      	str	r4, [r7, #0]
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	607b      	str	r3, [r7, #4]
 8004a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a44:	1812      	adds	r2, r2, r0
 8004a46:	eb41 0303 	adc.w	r3, r1, r3
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	f04f 0500 	mov.w	r5, #0
 8004a52:	00dd      	lsls	r5, r3, #3
 8004a54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a58:	00d4      	lsls	r4, r2, #3
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	eb12 0a00 	adds.w	sl, r2, r0
 8004a62:	eb43 0b01 	adc.w	fp, r3, r1
 8004a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a7e:	0082      	lsls	r2, r0, #2
 8004a80:	4650      	mov	r0, sl
 8004a82:	4659      	mov	r1, fp
 8004a84:	f7fb fbac 	bl	80001e0 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2164      	movs	r1, #100	; 0x64
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	; 0x32
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <UART_SetConfig+0x38c>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4432      	add	r2, r6
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	377c      	adds	r7, #124	; 0x7c
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abe:	bf00      	nop
 8004ac0:	40011000 	.word	0x40011000
 8004ac4:	40011400 	.word	0x40011400
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004acc:	b084      	sub	sp, #16
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	f107 001c 	add.w	r0, r7, #28
 8004ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d122      	bne.n	8004b2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f001 fb1c 	bl	800615c <USB_CoreReset>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e01a      	b.n	8004b60 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f001 fb10 	bl	800615c <USB_CoreReset>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
 8004b52:	e005      	b.n	8004b60 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10b      	bne.n	8004b7e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f043 0206 	orr.w	r2, r3, #6
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b8a:	b004      	add	sp, #16
 8004b8c:	4770      	bx	lr
	...

08004b90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d165      	bne.n	8004c70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a41      	ldr	r2, [pc, #260]	; (8004cac <USB_SetTurnaroundTime+0x11c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d906      	bls.n	8004bba <USB_SetTurnaroundTime+0x2a>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a40      	ldr	r2, [pc, #256]	; (8004cb0 <USB_SetTurnaroundTime+0x120>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d202      	bcs.n	8004bba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004bb4:	230f      	movs	r3, #15
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e062      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <USB_SetTurnaroundTime+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d306      	bcc.n	8004bd0 <USB_SetTurnaroundTime+0x40>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <USB_SetTurnaroundTime+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d202      	bcs.n	8004bd0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bca:	230e      	movs	r3, #14
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e057      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a38      	ldr	r2, [pc, #224]	; (8004cb4 <USB_SetTurnaroundTime+0x124>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d306      	bcc.n	8004be6 <USB_SetTurnaroundTime+0x56>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a37      	ldr	r2, [pc, #220]	; (8004cb8 <USB_SetTurnaroundTime+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d202      	bcs.n	8004be6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004be0:	230d      	movs	r3, #13
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e04c      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a33      	ldr	r2, [pc, #204]	; (8004cb8 <USB_SetTurnaroundTime+0x128>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d306      	bcc.n	8004bfc <USB_SetTurnaroundTime+0x6c>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <USB_SetTurnaroundTime+0x12c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d802      	bhi.n	8004bfc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e041      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <USB_SetTurnaroundTime+0x12c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d906      	bls.n	8004c12 <USB_SetTurnaroundTime+0x82>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <USB_SetTurnaroundTime+0x130>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d802      	bhi.n	8004c12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c0c:	230b      	movs	r3, #11
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e036      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <USB_SetTurnaroundTime+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d906      	bls.n	8004c28 <USB_SetTurnaroundTime+0x98>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a29      	ldr	r2, [pc, #164]	; (8004cc4 <USB_SetTurnaroundTime+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d802      	bhi.n	8004c28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c22:	230a      	movs	r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e02b      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <USB_SetTurnaroundTime+0x134>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d906      	bls.n	8004c3e <USB_SetTurnaroundTime+0xae>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <USB_SetTurnaroundTime+0x138>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d202      	bcs.n	8004c3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c38:	2309      	movs	r3, #9
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e020      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <USB_SetTurnaroundTime+0x138>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d306      	bcc.n	8004c54 <USB_SetTurnaroundTime+0xc4>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <USB_SetTurnaroundTime+0x13c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c4e:	2308      	movs	r3, #8
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e015      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <USB_SetTurnaroundTime+0x13c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d906      	bls.n	8004c6a <USB_SetTurnaroundTime+0xda>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a1c      	ldr	r2, [pc, #112]	; (8004cd0 <USB_SetTurnaroundTime+0x140>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d202      	bcs.n	8004c6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c64:	2307      	movs	r3, #7
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e00a      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c6a:	2306      	movs	r3, #6
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	e007      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c70:	79fb      	ldrb	r3, [r7, #7]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c76:	2309      	movs	r3, #9
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e001      	b.n	8004c80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c7c:	2309      	movs	r3, #9
 8004c7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	00d8acbf 	.word	0x00d8acbf
 8004cb0:	00e4e1c0 	.word	0x00e4e1c0
 8004cb4:	00f42400 	.word	0x00f42400
 8004cb8:	01067380 	.word	0x01067380
 8004cbc:	011a499f 	.word	0x011a499f
 8004cc0:	01312cff 	.word	0x01312cff
 8004cc4:	014ca43f 	.word	0x014ca43f
 8004cc8:	016e3600 	.word	0x016e3600
 8004ccc:	01a6ab1f 	.word	0x01a6ab1f
 8004cd0:	01e84800 	.word	0x01e84800

08004cd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 0201 	bic.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d115      	bne.n	8004d66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d46:	2001      	movs	r0, #1
 8004d48:	f7fc f9b0 	bl	80010ac <HAL_Delay>
      ms++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 f972 	bl	800603c <USB_GetMode>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d01e      	beq.n	8004d9c <USB_SetCurrentMode+0x84>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b31      	cmp	r3, #49	; 0x31
 8004d62:	d9f0      	bls.n	8004d46 <USB_SetCurrentMode+0x2e>
 8004d64:	e01a      	b.n	8004d9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d115      	bne.n	8004d98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d78:	2001      	movs	r0, #1
 8004d7a:	f7fc f997 	bl	80010ac <HAL_Delay>
      ms++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 f959 	bl	800603c <USB_GetMode>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <USB_SetCurrentMode+0x84>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b31      	cmp	r3, #49	; 0x31
 8004d94:	d9f0      	bls.n	8004d78 <USB_SetCurrentMode+0x60>
 8004d96:	e001      	b.n	8004d9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e005      	b.n	8004da8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b32      	cmp	r3, #50	; 0x32
 8004da0:	d101      	bne.n	8004da6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db0:	b084      	sub	sp, #16
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	e009      	b.n	8004de4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3340      	adds	r3, #64	; 0x40
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	2200      	movs	r2, #0
 8004ddc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3301      	adds	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b0e      	cmp	r3, #14
 8004de8:	d9f2      	bls.n	8004dd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11c      	bne.n	8004e2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfe:	f043 0302 	orr.w	r3, r3, #2
 8004e02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
 8004e28:	e00b      	b.n	8004e42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e54:	4619      	mov	r1, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	680b      	ldr	r3, [r1, #0]
 8004e60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10c      	bne.n	8004e82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f945 	bl	8005100 <USB_SetDevSpeed>
 8004e76:	e008      	b.n	8004e8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e78:	2101      	movs	r1, #1
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f940 	bl	8005100 <USB_SetDevSpeed>
 8004e80:	e003      	b.n	8004e8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e82:	2103      	movs	r1, #3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f93b 	bl	8005100 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e8a:	2110      	movs	r1, #16
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8f3 	bl	8005078 <USB_FlushTxFifo>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f90f 	bl	80050c0 <USB_FlushRxFifo>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e043      	b.n	8004f5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eec:	d118      	bne.n	8004f20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e013      	b.n	8004f32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	461a      	mov	r2, r3
 8004f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e008      	b.n	8004f32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2300      	movs	r3, #0
 8004f42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	461a      	mov	r2, r3
 8004f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d3b7      	bcc.n	8004ed6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	e043      	b.n	8004ff4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f82:	d118      	bne.n	8004fb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	e013      	b.n	8004fc8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	e008      	b.n	8004fc8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3b7      	bcc.n	8004f6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800501c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f043 0210 	orr.w	r2, r3, #16
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <USB_DevInit+0x2c4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d005      	beq.n	800504e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005050:	2b01      	cmp	r3, #1
 8005052:	d107      	bne.n	8005064 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005070:	b004      	add	sp, #16
 8005072:	4770      	bx	lr
 8005074:	803c3800 	.word	0x803c3800

08005078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	019b      	lsls	r3, r3, #6
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <USB_FlushTxFifo+0x44>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e006      	b.n	80050b0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d0f1      	beq.n	8005092 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	00030d40 	.word	0x00030d40

080050c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2210      	movs	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <USB_FlushRxFifo+0x3c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e006      	b.n	80050f0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d0f1      	beq.n	80050d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	00030d40 	.word	0x00030d40

08005100 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0306 	and.w	r3, r3, #6
 800514a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
 8005156:	e00a      	b.n	800516e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d002      	beq.n	8005164 <USB_GetDevSpeed+0x32>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b06      	cmp	r3, #6
 8005162:	d102      	bne.n	800516a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005164:	2302      	movs	r3, #2
 8005166:	75fb      	strb	r3, [r7, #23]
 8005168:	e001      	b.n	800516e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800516a:	230f      	movs	r3, #15
 800516c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d13a      	bne.n	800520e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	68f9      	ldr	r1, [r7, #12]
 80051b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d155      	bne.n	800527c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	78db      	ldrb	r3, [r3, #3]
 80051ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	059b      	lsls	r3, r3, #22
 80051f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051f4:	4313      	orrs	r3, r2
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0151      	lsls	r1, r2, #5
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	440a      	add	r2, r1
 80051fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e036      	b.n	800527c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522c:	4313      	orrs	r3, r2
 800522e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11a      	bne.n	800527c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	78db      	ldrb	r3, [r3, #3]
 8005260:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005262:	430b      	orrs	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d161      	bne.n	800536c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052be:	d11f      	bne.n	8005300 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	2101      	movs	r1, #1
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005320:	4013      	ands	r3, r2
 8005322:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	2101      	movs	r1, #1
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005344:	4013      	ands	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	0159      	lsls	r1, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	440b      	add	r3, r1
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	4619      	mov	r1, r3
 8005364:	4b35      	ldr	r3, [pc, #212]	; (800543c <USB_DeactivateEndpoint+0x1b0>)
 8005366:	4013      	ands	r3, r2
 8005368:	600b      	str	r3, [r1, #0]
 800536a:	e060      	b.n	800542e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800537e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005382:	d11f      	bne.n	80053c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	041b      	lsls	r3, r3, #16
 80053dc:	43db      	mvns	r3, r3
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e4:	4013      	ands	r3, r2
 80053e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f303 	lsl.w	r3, r1, r3
 80053fe:	041b      	lsls	r3, r3, #16
 8005400:	43db      	mvns	r3, r3
 8005402:	68f9      	ldr	r1, [r7, #12]
 8005404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005408:	4013      	ands	r3, r2
 800540a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	0159      	lsls	r1, r3, #5
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	440b      	add	r3, r1
 8005422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005426:	4619      	mov	r1, r3
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <USB_DeactivateEndpoint+0x1b4>)
 800542a:	4013      	ands	r3, r2
 800542c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	ec337800 	.word	0xec337800
 8005440:	eff37800 	.word	0xeff37800

08005444 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b01      	cmp	r3, #1
 8005462:	f040 815c 	bne.w	800571e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d132      	bne.n	80054d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	0151      	lsls	r1, r2, #5
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	440a      	add	r2, r1
 8005484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800548c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	0cdb      	lsrs	r3, r3, #19
 80054ce:	04db      	lsls	r3, r3, #19
 80054d0:	6113      	str	r3, [r2, #16]
 80054d2:	e074      	b.n	80055be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ee:	0cdb      	lsrs	r3, r3, #19
 80054f0:	04db      	lsls	r3, r3, #19
 80054f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005512:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	440b      	add	r3, r1
 8005530:	1e59      	subs	r1, r3, #1
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	fbb1 f3f3 	udiv	r3, r1, r3
 800553a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800553c:	4b9d      	ldr	r3, [pc, #628]	; (80057b4 <USB_EPStartXfer+0x370>)
 800553e:	400b      	ands	r3, r1
 8005540:	69b9      	ldr	r1, [r7, #24]
 8005542:	0148      	lsls	r0, r1, #5
 8005544:	69f9      	ldr	r1, [r7, #28]
 8005546:	4401      	add	r1, r0
 8005548:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800554c:	4313      	orrs	r3, r2
 800554e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	0148      	lsls	r0, r1, #5
 800556a:	69f9      	ldr	r1, [r7, #28]
 800556c:	4401      	add	r1, r0
 800556e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d11f      	bne.n	80055be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800559c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d14b      	bne.n	800565c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d009      	beq.n	80055e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d128      	bne.n	800563a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d110      	bne.n	800561a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e00f      	b.n	800563a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	0151      	lsls	r1, r2, #5
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	440a      	add	r2, r1
 8005630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005638:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e12f      	b.n	80058bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	69fa      	ldr	r2, [r7, #28]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800567a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	78db      	ldrb	r3, [r3, #3]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d015      	beq.n	80056b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8117 	beq.w	80058bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	2101      	movs	r1, #1
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056aa:	4313      	orrs	r3, r2
 80056ac:	634b      	str	r3, [r1, #52]	; 0x34
 80056ae:	e105      	b.n	80058bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d110      	bne.n	80056e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e00f      	b.n	8005702 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	68d9      	ldr	r1, [r3, #12]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	b298      	uxth	r0, r3
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4603      	mov	r3, r0
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa2b 	bl	8005b72 <USB_WritePacket>
 800571c:	e0ce      	b.n	80058bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005738:	0cdb      	lsrs	r3, r3, #19
 800573a:	04db      	lsls	r3, r3, #19
 800573c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800575c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d126      	bne.n	80057b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	69b9      	ldr	r1, [r7, #24]
 8005782:	0148      	lsls	r0, r1, #5
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	4401      	add	r1, r0
 8005788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800578c:	4313      	orrs	r3, r2
 800578e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ae:	6113      	str	r3, [r2, #16]
 80057b0:	e036      	b.n	8005820 <USB_EPStartXfer+0x3dc>
 80057b2:	bf00      	nop
 80057b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	1e5a      	subs	r2, r3, #1
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	8afb      	ldrh	r3, [r7, #22]
 80057de:	04d9      	lsls	r1, r3, #19
 80057e0:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <USB_EPStartXfer+0x484>)
 80057e2:	400b      	ands	r3, r1
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	0148      	lsls	r0, r1, #5
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	4401      	add	r1, r0
 80057ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	8af9      	ldrh	r1, [r7, #22]
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	0148      	lsls	r0, r1, #5
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	4401      	add	r1, r0
 8005818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10d      	bne.n	8005842 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	68d9      	ldr	r1, [r3, #12]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	460a      	mov	r2, r1
 8005840:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d128      	bne.n	800589c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d110      	bne.n	800587c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e00f      	b.n	800589c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	1ff80000 	.word	0x1ff80000

080058cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 80cd 	bne.w	8005a88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d132      	bne.n	800595c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	0cdb      	lsrs	r3, r3, #19
 8005956:	04db      	lsls	r3, r3, #19
 8005958:	6113      	str	r3, [r2, #16]
 800595a:	e04e      	b.n	80059fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	0cdb      	lsrs	r3, r3, #19
 8005978:	04db      	lsls	r3, r3, #19
 800597a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800599a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800599e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	0148      	lsls	r0, r1, #5
 80059ee:	6979      	ldr	r1, [r7, #20]
 80059f0:	4401      	add	r1, r0
 80059f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059f6:	4313      	orrs	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d11e      	bne.n	8005a3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	461a      	mov	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e092      	b.n	8005b64 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d07e      	beq.n	8005b64 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	2101      	movs	r1, #1
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	6979      	ldr	r1, [r7, #20]
 8005a7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a82:	4313      	orrs	r3, r2
 8005a84:	634b      	str	r3, [r1, #52]	; 0x34
 8005a86:	e06d      	b.n	8005b64 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa2:	0cdb      	lsrs	r3, r3, #19
 8005aa4:	04db      	lsls	r3, r3, #19
 8005aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	0151      	lsls	r1, r2, #5
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	440a      	add	r2, r1
 8005abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005aca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005afa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b12:	6939      	ldr	r1, [r7, #16]
 8005b14:	0148      	lsls	r0, r1, #5
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	4401      	add	r1, r0
 8005b1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10d      	bne.n	8005b44 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	460a      	mov	r2, r1
 8005b42:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b089      	sub	sp, #36	; 0x24
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	60f8      	str	r0, [r7, #12]
 8005b7a:	60b9      	str	r1, [r7, #8]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	460b      	mov	r3, r1
 8005b82:	71fb      	strb	r3, [r7, #7]
 8005b84:	4613      	mov	r3, r2
 8005b86:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d123      	bne.n	8005be0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b98:	88bb      	ldrh	r3, [r7, #4]
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	089b      	lsrs	r3, r3, #2
 8005b9e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e018      	b.n	8005bd8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	031a      	lsls	r2, r3, #12
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d3e2      	bcc.n	8005ba6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3724      	adds	r7, #36	; 0x24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b08b      	sub	sp, #44	; 0x2c
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c14:	2300      	movs	r3, #0
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	e014      	b.n	8005c44 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	3301      	adds	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	3301      	adds	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	3301      	adds	r3, #1
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3e6      	bcc.n	8005c1a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c4c:	8bfb      	ldrh	r3, [r7, #30]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d01e      	beq.n	8005c90 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	701a      	strb	r2, [r3, #0]
      i++;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	3301      	adds	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c84:	8bfb      	ldrh	r3, [r7, #30]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c8a:	8bfb      	ldrh	r3, [r7, #30]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ea      	bne.n	8005c66 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	372c      	adds	r7, #44	; 0x2c
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d12c      	bne.n	8005d14 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	db12      	blt.n	8005cf2 <USB_EPSetStall+0x54>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cf0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e02b      	b.n	8005d6c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db12      	blt.n	8005d4c <USB_EPSetStall+0xae>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00f      	beq.n	8005d4c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d4a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d128      	bne.n	8005de8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005db4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	78db      	ldrb	r3, [r3, #3]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d003      	beq.n	8005dc6 <USB_EPClearStall+0x4c>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d138      	bne.n	8005e38 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e027      	b.n	8005e38 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	78db      	ldrb	r3, [r3, #3]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d003      	beq.n	8005e18 <USB_EPClearStall+0x9e>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d10f      	bne.n	8005e38 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b085      	sub	sp, #20
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e68:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ec0:	f023 0302 	bic.w	r3, r3, #2
 8005ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005eee:	f023 0303 	bic.w	r3, r3, #3
 8005ef2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f02:	f043 0302 	orr.w	r3, r3, #2
 8005f06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b085      	sub	sp, #20
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	0c1b      	lsrs	r3, r3, #16
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	b29b      	uxth	r3, r3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	fa22 f303 	lsr.w	r3, r2, r3
 8006010:	01db      	lsls	r3, r3, #7
 8006012:	b2db      	uxtb	r3, r3
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800601a:	78fb      	ldrb	r3, [r7, #3]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800602e:	68bb      	ldr	r3, [r7, #8]
}
 8006030:	4618      	mov	r0, r3
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f003 0301 	and.w	r3, r3, #1
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006076:	f023 0307 	bic.w	r3, r3, #7
 800607a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800608e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	460b      	mov	r3, r1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	333c      	adds	r3, #60	; 0x3c
 80060b6:	3304      	adds	r3, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4a26      	ldr	r2, [pc, #152]	; (8006158 <USB_EP0_OutStart+0xb8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90a      	bls.n	80060da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d4:	d101      	bne.n	80060da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e037      	b.n	800614a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 0318 	orr.w	r3, r3, #24
 800610c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006120:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006122:	7afb      	ldrb	r3, [r7, #11]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10f      	bne.n	8006148 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006142:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	4f54300a 	.word	0x4f54300a

0800615c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4a13      	ldr	r2, [pc, #76]	; (80061bc <USB_CoreReset+0x60>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d901      	bls.n	8006178 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e01a      	b.n	80061ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	daf3      	bge.n	8006168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f043 0201 	orr.w	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <USB_CoreReset+0x60>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e006      	b.n	80061ae <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d0f1      	beq.n	8006190 <USB_CoreReset+0x34>

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	00030d40 	.word	0x00030d40

080061c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061d0:	f004 feba 	bl	800af48 <USBD_static_malloc>
 80061d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d105      	bne.n	80061e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80061e4:	2302      	movs	r3, #2
 80061e6:	e066      	b.n	80062b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7c1b      	ldrb	r3, [r3, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d119      	bne.n	800622c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061fc:	2202      	movs	r2, #2
 80061fe:	2181      	movs	r1, #129	; 0x81
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f004 fd7e 	bl	800ad02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800620c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006210:	2202      	movs	r2, #2
 8006212:	2101      	movs	r1, #1
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f004 fd74 	bl	800ad02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2210      	movs	r2, #16
 8006226:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800622a:	e016      	b.n	800625a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	2202      	movs	r2, #2
 8006230:	2181      	movs	r1, #129	; 0x81
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f004 fd65 	bl	800ad02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800623e:	2340      	movs	r3, #64	; 0x40
 8006240:	2202      	movs	r2, #2
 8006242:	2101      	movs	r1, #1
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f004 fd5c 	bl	800ad02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2210      	movs	r2, #16
 8006256:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800625a:	2308      	movs	r3, #8
 800625c:	2203      	movs	r2, #3
 800625e:	2182      	movs	r1, #130	; 0x82
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f004 fd4e 	bl	800ad02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	7c1b      	ldrb	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629a:	2101      	movs	r1, #1
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f004 fe1f 	bl	800aee0 <USBD_LL_PrepareReceive>
 80062a2:	e007      	b.n	80062b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	2101      	movs	r1, #1
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f004 fe16 	bl	800aee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80062ca:	2181      	movs	r1, #129	; 0x81
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f004 fd3e 	bl	800ad4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80062d8:	2101      	movs	r1, #1
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f004 fd37 	bl	800ad4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062e8:	2182      	movs	r1, #130	; 0x82
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f004 fd2f 	bl	800ad4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800631a:	4618      	mov	r0, r3
 800631c:	f004 fe22 	bl	800af64 <USBD_static_free>
    pdev->pClassData = NULL;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006358:	2303      	movs	r3, #3
 800635a:	e0af      	b.n	80064bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006364:	2b00      	cmp	r3, #0
 8006366:	d03f      	beq.n	80063e8 <USBD_CDC_Setup+0xb4>
 8006368:	2b20      	cmp	r3, #32
 800636a:	f040 809f 	bne.w	80064ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	88db      	ldrh	r3, [r3, #6]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d02e      	beq.n	80063d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	b25b      	sxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	da16      	bge.n	80063ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800638c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	88d2      	ldrh	r2, [r2, #6]
 8006392:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	88db      	ldrh	r3, [r3, #6]
 8006398:	2b07      	cmp	r3, #7
 800639a:	bf28      	it	cs
 800639c:	2307      	movcs	r3, #7
 800639e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	89fa      	ldrh	r2, [r7, #14]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 fae9 	bl	800797e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80063ac:	e085      	b.n	80064ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	785a      	ldrb	r2, [r3, #1]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	88db      	ldrh	r3, [r3, #6]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80063c4:	6939      	ldr	r1, [r7, #16]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	88db      	ldrh	r3, [r3, #6]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 fb02 	bl	80079d6 <USBD_CtlPrepareRx>
      break;
 80063d2:	e072      	b.n	80064ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	7850      	ldrb	r0, [r2, #1]
 80063e0:	2200      	movs	r2, #0
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	4798      	blx	r3
      break;
 80063e6:	e068      	b.n	80064ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b0b      	cmp	r3, #11
 80063ee:	d852      	bhi.n	8006496 <USBD_CDC_Setup+0x162>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USBD_CDC_Setup+0xc4>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	08006429 	.word	0x08006429
 80063fc:	080064a5 	.word	0x080064a5
 8006400:	08006497 	.word	0x08006497
 8006404:	08006497 	.word	0x08006497
 8006408:	08006497 	.word	0x08006497
 800640c:	08006497 	.word	0x08006497
 8006410:	08006497 	.word	0x08006497
 8006414:	08006497 	.word	0x08006497
 8006418:	08006497 	.word	0x08006497
 800641c:	08006497 	.word	0x08006497
 8006420:	08006453 	.word	0x08006453
 8006424:	0800647d 	.word	0x0800647d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d107      	bne.n	8006444 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006434:	f107 030a 	add.w	r3, r7, #10
 8006438:	2202      	movs	r2, #2
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fa9e 	bl	800797e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006442:	e032      	b.n	80064aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fa28 	bl	800789c <USBD_CtlError>
            ret = USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
          break;
 8006450:	e02b      	b.n	80064aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b03      	cmp	r3, #3
 800645c:	d107      	bne.n	800646e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800645e:	f107 030d 	add.w	r3, r7, #13
 8006462:	2201      	movs	r2, #1
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fa89 	bl	800797e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800646c:	e01d      	b.n	80064aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fa13 	bl	800789c <USBD_CtlError>
            ret = USBD_FAIL;
 8006476:	2303      	movs	r3, #3
 8006478:	75fb      	strb	r3, [r7, #23]
          break;
 800647a:	e016      	b.n	80064aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b03      	cmp	r3, #3
 8006486:	d00f      	beq.n	80064a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fa06 	bl	800789c <USBD_CtlError>
            ret = USBD_FAIL;
 8006490:	2303      	movs	r3, #3
 8006492:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006494:	e008      	b.n	80064a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 f9ff 	bl	800789c <USBD_CtlError>
          ret = USBD_FAIL;
 800649e:	2303      	movs	r3, #3
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e002      	b.n	80064aa <USBD_CDC_Setup+0x176>
          break;
 80064a4:	bf00      	nop
 80064a6:	e008      	b.n	80064ba <USBD_CDC_Setup+0x186>
          break;
 80064a8:	bf00      	nop
      }
      break;
 80064aa:	e006      	b.n	80064ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 f9f4 	bl	800789c <USBD_CtlError>
      ret = USBD_FAIL;
 80064b4:	2303      	movs	r3, #3
 80064b6:	75fb      	strb	r3, [r7, #23]
      break;
 80064b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e04f      	b.n	8006586 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	3318      	adds	r3, #24
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d029      	beq.n	8006558 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006504:	78fa      	ldrb	r2, [r7, #3]
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	3318      	adds	r3, #24
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	78f9      	ldrb	r1, [r7, #3]
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	460b      	mov	r3, r1
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	1a5b      	subs	r3, r3, r1
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4403      	add	r3, r0
 8006524:	3344      	adds	r3, #68	; 0x44
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	fbb2 f1f3 	udiv	r1, r2, r3
 800652c:	fb03 f301 	mul.w	r3, r3, r1
 8006530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	d110      	bne.n	8006558 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3318      	adds	r3, #24
 8006546:	2200      	movs	r2, #0
 8006548:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800654a:	78f9      	ldrb	r1, [r7, #3]
 800654c:	2300      	movs	r3, #0
 800654e:	2200      	movs	r2, #0
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f004 fca4 	bl	800ae9e <USBD_LL_Transmit>
 8006556:	e015      	b.n	8006584 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e015      	b.n	80065dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	4619      	mov	r1, r3
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f004 fcb4 	bl	800af22 <USBD_LL_GetRxDataSize>
 80065ba:	4602      	mov	r2, r0
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80065d6:	4611      	mov	r1, r2
 80065d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e01b      	b.n	8006636 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d015      	beq.n	8006634 <USBD_CDC_EP0_RxReady+0x50>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800660e:	2bff      	cmp	r3, #255	; 0xff
 8006610:	d010      	beq.n	8006634 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006620:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006628:	b292      	uxth	r2, r2
 800662a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	22ff      	movs	r2, #255	; 0xff
 8006630:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2243      	movs	r2, #67	; 0x43
 800664c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000094 	.word	0x20000094

08006660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2243      	movs	r2, #67	; 0x43
 800666c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800666e:	4b03      	ldr	r3, [pc, #12]	; (800667c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000050 	.word	0x20000050

08006680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2243      	movs	r2, #67	; 0x43
 800668c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	200000d8 	.word	0x200000d8

080066a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	220a      	movs	r2, #10
 80066ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066ae:	4b03      	ldr	r3, [pc, #12]	; (80066bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	2000000c 	.word	0x2000000c

080066c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e004      	b.n	80066de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b087      	sub	sp, #28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	e008      	b.n	800671a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006736:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e004      	b.n	800674c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006766:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	e016      	b.n	80067a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	7c1b      	ldrb	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006788:	2101      	movs	r1, #1
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f004 fba8 	bl	800aee0 <USBD_LL_PrepareReceive>
 8006790:	e007      	b.n	80067a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	2101      	movs	r1, #1
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f004 fb9f 	bl	800aee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e01f      	b.n	8006804 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	79fa      	ldrb	r2, [r7, #7]
 80067f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f004 fa1b 	bl	800ac34 <USBD_LL_Init>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006820:	2303      	movs	r3, #3
 8006822:	e016      	b.n	8006852 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	f107 020e 	add.w	r2, r7, #14
 8006844:	4610      	mov	r0, r2
 8006846:	4798      	blx	r3
 8006848:	4602      	mov	r2, r0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f004 fa32 	bl	800accc <USBD_LL_Start>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	78fa      	ldrb	r2, [r7, #3]
 80068ac:	4611      	mov	r1, r2
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	78fa      	ldrb	r2, [r7, #3]
 80068e0:	4611      	mov	r1, r2
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
  }

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 ff90 	bl	8007828 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2b02      	cmp	r3, #2
 800692a:	d01a      	beq.n	8006962 <USBD_LL_SetupStage+0x72>
 800692c:	2b02      	cmp	r3, #2
 800692e:	d822      	bhi.n	8006976 <USBD_LL_SetupStage+0x86>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <USBD_LL_SetupStage+0x4a>
 8006934:	2b01      	cmp	r3, #1
 8006936:	d00a      	beq.n	800694e <USBD_LL_SetupStage+0x5e>
 8006938:	e01d      	b.n	8006976 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fa62 	bl	8006e0c <USBD_StdDevReq>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e020      	b.n	8006990 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fac6 	bl	8006ee8 <USBD_StdItfReq>
 800695c:	4603      	mov	r3, r0
 800695e:	73fb      	strb	r3, [r7, #15]
      break;
 8006960:	e016      	b.n	8006990 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb05 	bl	8006f7a <USBD_StdEPReq>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
      break;
 8006974:	e00c      	b.n	8006990 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800697c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f004 fa01 	bl	800ad8c <USBD_LL_StallEP>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
      break;
 800698e:	bf00      	nop
  }

  return ret;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	460b      	mov	r3, r1
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d138      	bne.n	8006a20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069bc:	2b03      	cmp	r3, #3
 80069be:	d14a      	bne.n	8006a56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d913      	bls.n	80069f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	bf28      	it	cs
 80069e6:	4613      	movcs	r3, r2
 80069e8:	461a      	mov	r2, r3
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 f80f 	bl	8007a10 <USBD_CtlContinueRx>
 80069f2:	e030      	b.n	8006a56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d10b      	bne.n	8006a18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f001 f80a 	bl	8007a32 <USBD_CtlSendStatus>
 8006a1e:	e01a      	b.n	8006a56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d114      	bne.n	8006a56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00e      	beq.n	8006a56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	7afa      	ldrb	r2, [r7, #11]
 8006a42:	4611      	mov	r1, r2
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	4798      	blx	r3
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a52:	7dfb      	ldrb	r3, [r7, #23]
 8006a54:	e000      	b.n	8006a58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	607a      	str	r2, [r7, #4]
 8006a6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d16b      	bne.n	8006b4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3314      	adds	r3, #20
 8006a78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d156      	bne.n	8006b32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d914      	bls.n	8006aba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 ff84 	bl	80079b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aac:	2300      	movs	r3, #0
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f004 fa14 	bl	800aee0 <USBD_LL_PrepareReceive>
 8006ab8:	e03b      	b.n	8006b32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d11c      	bne.n	8006b00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d316      	bcc.n	8006b00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d20f      	bcs.n	8006b00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 ff65 	bl	80079b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006af2:	2300      	movs	r3, #0
 8006af4:	2200      	movs	r2, #0
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f004 f9f1 	bl	800aee0 <USBD_LL_PrepareReceive>
 8006afe:	e018      	b.n	8006b32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d10b      	bne.n	8006b24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f004 f930 	bl	800ad8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 ff93 	bl	8007a58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d122      	bne.n	8006b82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f7ff fe98 	bl	8006872 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b4a:	e01a      	b.n	8006b82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d114      	bne.n	8006b82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	7afa      	ldrb	r2, [r7, #11]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	4798      	blx	r3
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b78:	7dfb      	ldrb	r3, [r7, #23]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	e000      	b.n	8006b84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e02f      	b.n	8006c20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00f      	beq.n	8006bea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6852      	ldr	r2, [r2, #4]
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	4611      	mov	r1, r2
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	2200      	movs	r2, #0
 8006bee:	2100      	movs	r1, #0
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f004 f886 	bl	800ad02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2240      	movs	r2, #64	; 0x40
 8006c02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c06:	2340      	movs	r3, #64	; 0x40
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	; 0x80
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f004 f878 	bl	800ad02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2240      	movs	r2, #64	; 0x40
 8006c1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	78fa      	ldrb	r2, [r7, #3]
 8006c38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2204      	movs	r2, #4
 8006c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d106      	bne.n	8006c96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e012      	b.n	8006ce0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d10b      	bne.n	8006cde <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e014      	b.n	8006d2c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d10d      	bne.n	8006d2a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	78fa      	ldrb	r2, [r7, #3]
 8006d24:	4611      	mov	r1, r2
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e014      	b.n	8006d78 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d10d      	bne.n	8006d76 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d009      	beq.n	8006dc4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	4611      	mov	r1, r2
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
  }

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3301      	adds	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	b21a      	sxth	r2, r3
 8006df2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	b21b      	sxth	r3, r3
 8006dfa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d005      	beq.n	8006e32 <USBD_StdDevReq+0x26>
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d853      	bhi.n	8006ed2 <USBD_StdDevReq+0xc6>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <USBD_StdDevReq+0x3a>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d14f      	bne.n	8006ed2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	e04a      	b.n	8006edc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b09      	cmp	r3, #9
 8006e4c:	d83b      	bhi.n	8006ec6 <USBD_StdDevReq+0xba>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_StdDevReq+0x48>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006ebd 	.word	0x08006ebd
 8006e5c:	08006ec7 	.word	0x08006ec7
 8006e60:	08006eb3 	.word	0x08006eb3
 8006e64:	08006ec7 	.word	0x08006ec7
 8006e68:	08006e87 	.word	0x08006e87
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006ec7 	.word	0x08006ec7
 8006e74:	08006e9f 	.word	0x08006e9f
 8006e78:	08006e91 	.word	0x08006e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9de 	bl	8007240 <USBD_GetDescriptor>
          break;
 8006e84:	e024      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb43 	bl	8007514 <USBD_SetAddress>
          break;
 8006e8e:	e01f      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fb82 	bl	800759c <USBD_SetConfig>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8006e9c:	e018      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc21 	bl	80076e8 <USBD_GetConfig>
          break;
 8006ea6:	e013      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fc52 	bl	8007754 <USBD_GetStatus>
          break;
 8006eb0:	e00e      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fc81 	bl	80077bc <USBD_SetFeature>
          break;
 8006eba:	e009      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fc90 	bl	80077e4 <USBD_ClrFeature>
          break;
 8006ec4:	e004      	b.n	8006ed0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fce7 	bl	800789c <USBD_CtlError>
          break;
 8006ece:	bf00      	nop
      }
      break;
 8006ed0:	e004      	b.n	8006edc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fce1 	bl	800789c <USBD_CtlError>
      break;
 8006eda:	bf00      	nop
  }

  return ret;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop

08006ee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d005      	beq.n	8006f0e <USBD_StdItfReq+0x26>
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d82f      	bhi.n	8006f66 <USBD_StdItfReq+0x7e>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <USBD_StdItfReq+0x26>
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d12b      	bne.n	8006f66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d81d      	bhi.n	8006f58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	889b      	ldrh	r3, [r3, #4]
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d813      	bhi.n	8006f4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	88db      	ldrh	r3, [r3, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d110      	bne.n	8006f62 <USBD_StdItfReq+0x7a>
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10d      	bne.n	8006f62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fd73 	bl	8007a32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f4c:	e009      	b.n	8006f62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fca3 	bl	800789c <USBD_CtlError>
          break;
 8006f56:	e004      	b.n	8006f62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fc9e 	bl	800789c <USBD_CtlError>
          break;
 8006f60:	e000      	b.n	8006f64 <USBD_StdItfReq+0x7c>
          break;
 8006f62:	bf00      	nop
      }
      break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc97 	bl	800789c <USBD_CtlError>
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	889b      	ldrh	r3, [r3, #4]
 8006f8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d007      	beq.n	8006faa <USBD_StdEPReq+0x30>
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	f200 8145 	bhi.w	800722a <USBD_StdEPReq+0x2b0>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00c      	beq.n	8006fbe <USBD_StdEPReq+0x44>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	f040 8140 	bne.w	800722a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e13a      	b.n	8007234 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d007      	beq.n	8006fd6 <USBD_StdEPReq+0x5c>
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	f300 8129 	bgt.w	800721e <USBD_StdEPReq+0x2a4>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d07f      	beq.n	80070d0 <USBD_StdEPReq+0x156>
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d03c      	beq.n	800704e <USBD_StdEPReq+0xd4>
 8006fd4:	e123      	b.n	800721e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d002      	beq.n	8006fe8 <USBD_StdEPReq+0x6e>
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d016      	beq.n	8007014 <USBD_StdEPReq+0x9a>
 8006fe6:	e02c      	b.n	8007042 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fe8:	7bbb      	ldrb	r3, [r7, #14]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <USBD_StdEPReq+0x90>
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d00a      	beq.n	800700a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f003 fec7 	bl	800ad8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f003 fec3 	bl	800ad8c <USBD_LL_StallEP>
 8007006:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007008:	e020      	b.n	800704c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fc45 	bl	800789c <USBD_CtlError>
              break;
 8007012:	e01b      	b.n	800704c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	885b      	ldrh	r3, [r3, #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <USBD_StdEPReq+0xc0>
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b80      	cmp	r3, #128	; 0x80
 8007026:	d008      	beq.n	800703a <USBD_StdEPReq+0xc0>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f003 fea9 	bl	800ad8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fcf9 	bl	8007a32 <USBD_CtlSendStatus>

              break;
 8007040:	e004      	b.n	800704c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fc29 	bl	800789c <USBD_CtlError>
              break;
 800704a:	bf00      	nop
          }
          break;
 800704c:	e0ec      	b.n	8007228 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b02      	cmp	r3, #2
 8007058:	d002      	beq.n	8007060 <USBD_StdEPReq+0xe6>
 800705a:	2b03      	cmp	r3, #3
 800705c:	d016      	beq.n	800708c <USBD_StdEPReq+0x112>
 800705e:	e030      	b.n	80070c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <USBD_StdEPReq+0x108>
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b80      	cmp	r3, #128	; 0x80
 800706a:	d00a      	beq.n	8007082 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f003 fe8b 	bl	800ad8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f003 fe87 	bl	800ad8c <USBD_LL_StallEP>
 800707e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007080:	e025      	b.n	80070ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fc09 	bl	800789c <USBD_CtlError>
              break;
 800708a:	e020      	b.n	80070ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	885b      	ldrh	r3, [r3, #2]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d11b      	bne.n	80070cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800709a:	2b00      	cmp	r3, #0
 800709c:	d004      	beq.n	80070a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f003 fe91 	bl	800adca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fcc2 	bl	8007a32 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80070c0:	e004      	b.n	80070cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fbe9 	bl	800789c <USBD_CtlError>
              break;
 80070ca:	e000      	b.n	80070ce <USBD_StdEPReq+0x154>
              break;
 80070cc:	bf00      	nop
          }
          break;
 80070ce:	e0ab      	b.n	8007228 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d002      	beq.n	80070e2 <USBD_StdEPReq+0x168>
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d032      	beq.n	8007146 <USBD_StdEPReq+0x1cc>
 80070e0:	e097      	b.n	8007212 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <USBD_StdEPReq+0x17e>
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	d004      	beq.n	80070f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fbd3 	bl	800789c <USBD_CtlError>
                break;
 80070f6:	e091      	b.n	800721c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	da0b      	bge.n	8007118 <USBD_StdEPReq+0x19e>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	3310      	adds	r3, #16
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4413      	add	r3, r2
 8007114:	3304      	adds	r3, #4
 8007116:	e00b      	b.n	8007130 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	3304      	adds	r3, #4
 8007130:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2202      	movs	r2, #2
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fc1d 	bl	800797e <USBD_CtlSendData>
              break;
 8007144:	e06a      	b.n	800721c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800714a:	2b00      	cmp	r3, #0
 800714c:	da11      	bge.n	8007172 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800714e:	7bbb      	ldrb	r3, [r7, #14]
 8007150:	f003 020f 	and.w	r2, r3, #15
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	3324      	adds	r3, #36	; 0x24
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d117      	bne.n	8007198 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fb96 	bl	800789c <USBD_CtlError>
                  break;
 8007170:	e054      	b.n	800721c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	f003 020f 	and.w	r2, r3, #15
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	440b      	add	r3, r1
 8007184:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d104      	bne.n	8007198 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb83 	bl	800789c <USBD_CtlError>
                  break;
 8007196:	e041      	b.n	800721c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	da0b      	bge.n	80071b8 <USBD_StdEPReq+0x23e>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	3310      	adds	r3, #16
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	3304      	adds	r3, #4
 80071b6:	e00b      	b.n	80071d0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	3304      	adds	r3, #4
 80071d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <USBD_StdEPReq+0x264>
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	d103      	bne.n	80071e6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	e00e      	b.n	8007204 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f003 fe0c 	bl	800ae08 <USBD_LL_IsStallEP>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	e002      	b.n	8007204 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2202      	movs	r2, #2
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fbb7 	bl	800797e <USBD_CtlSendData>
              break;
 8007210:	e004      	b.n	800721c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb41 	bl	800789c <USBD_CtlError>
              break;
 800721a:	bf00      	nop
          }
          break;
 800721c:	e004      	b.n	8007228 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fb3b 	bl	800789c <USBD_CtlError>
          break;
 8007226:	bf00      	nop
      }
      break;
 8007228:	e004      	b.n	8007234 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fb35 	bl	800789c <USBD_CtlError>
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	2b06      	cmp	r3, #6
 8007262:	f200 8128 	bhi.w	80074b6 <USBD_GetDescriptor+0x276>
 8007266:	a201      	add	r2, pc, #4	; (adr r2, 800726c <USBD_GetDescriptor+0x2c>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007289 	.word	0x08007289
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072e1 	.word	0x080072e1
 8007278:	080074b7 	.word	0x080074b7
 800727c:	080074b7 	.word	0x080074b7
 8007280:	08007457 	.word	0x08007457
 8007284:	08007483 	.word	0x08007483
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
      break;
 800729e:	e112      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7c1b      	ldrb	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	f107 0208 	add.w	r2, r7, #8
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072c2:	e100      	b.n	80074c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	f107 0208 	add.w	r2, r7, #8
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	2202      	movs	r2, #2
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e0f2      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	885b      	ldrh	r3, [r3, #2]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	f200 80ac 	bhi.w	8007444 <USBD_GetDescriptor+0x204>
 80072ec:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <USBD_GetDescriptor+0xb4>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	08007341 	.word	0x08007341
 80072fc:	08007375 	.word	0x08007375
 8007300:	080073a9 	.word	0x080073a9
 8007304:	080073dd 	.word	0x080073dd
 8007308:	08007411 	.word	0x08007411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e091      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fab2 	bl	800789c <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e089      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e077      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa98 	bl	800789c <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e06f      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e05d      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa7e 	bl	800789c <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e055      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e043      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa64 	bl	800789c <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e03b      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7c12      	ldrb	r2, [r2, #16]
 80073f4:	f107 0108 	add.w	r1, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fe:	e029      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa4a 	bl	800789c <USBD_CtlError>
            err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
          break;
 800740e:	e021      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007432:	e00f      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa30 	bl	800789c <USBD_CtlError>
            err++;
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	3301      	adds	r3, #1
 8007440:	72fb      	strb	r3, [r7, #11]
          break;
 8007442:	e007      	b.n	8007454 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa28 	bl	800789c <USBD_CtlError>
          err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007452:	bf00      	nop
      }
      break;
 8007454:	e037      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7c1b      	ldrb	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007466:	f107 0208 	add.w	r2, r7, #8
 800746a:	4610      	mov	r0, r2
 800746c:	4798      	blx	r3
 800746e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007470:	e029      	b.n	80074c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa11 	bl	800789c <USBD_CtlError>
        err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	e021      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7c1b      	ldrb	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f107 0208 	add.w	r2, r7, #8
 8007496:	4610      	mov	r0, r2
 8007498:	4798      	blx	r3
 800749a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	2207      	movs	r2, #7
 80074a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074a4:	e00f      	b.n	80074c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f9f7 	bl	800789c <USBD_CtlError>
        err++;
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	3301      	adds	r3, #1
 80074b2:	72fb      	strb	r3, [r7, #11]
      break;
 80074b4:	e007      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9ef 	bl	800789c <USBD_CtlError>
      err++;
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	3301      	adds	r3, #1
 80074c2:	72fb      	strb	r3, [r7, #11]
      break;
 80074c4:	bf00      	nop
  }

  if (err != 0U)
 80074c6:	7afb      	ldrb	r3, [r7, #11]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11e      	bne.n	800750a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074d4:	893b      	ldrh	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00e      	beq.n	80074f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	88da      	ldrh	r2, [r3, #6]
 80074de:	893b      	ldrh	r3, [r7, #8]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	bf28      	it	cs
 80074e4:	4613      	movcs	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074ea:	893b      	ldrh	r3, [r7, #8]
 80074ec:	461a      	mov	r2, r3
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa44 	bl	800797e <USBD_CtlSendData>
 80074f6:	e009      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9ce 	bl	800789c <USBD_CtlError>
 8007500:	e004      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fa95 	bl	8007a32 <USBD_CtlSendStatus>
 8007508:	e000      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    return;
 800750a:	bf00      	nop
  }
}
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d131      	bne.n	800758a <USBD_SetAddress+0x76>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d12d      	bne.n	800758a <USBD_SetAddress+0x76>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	2b7f      	cmp	r3, #127	; 0x7f
 8007534:	d829      	bhi.n	800758a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b03      	cmp	r3, #3
 800754c:	d104      	bne.n	8007558 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9a3 	bl	800789c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	e01d      	b.n	8007594 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	7bfa      	ldrb	r2, [r7, #15]
 800755c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f003 fc7b 	bl	800ae60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa61 	bl	8007a32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	e009      	b.n	8007594 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007588:	e004      	b.n	8007594 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f985 	bl	800789c <USBD_CtlError>
  }
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	4b4c      	ldr	r3, [pc, #304]	; (80076e4 <USBD_SetConfig+0x148>)
 80075b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075b4:	4b4b      	ldr	r3, [pc, #300]	; (80076e4 <USBD_SetConfig+0x148>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d905      	bls.n	80075c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f96c 	bl	800789c <USBD_CtlError>
    return USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e088      	b.n	80076da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d002      	beq.n	80075da <USBD_SetConfig+0x3e>
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d025      	beq.n	8007624 <USBD_SetConfig+0x88>
 80075d8:	e071      	b.n	80076be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075da:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <USBD_SetConfig+0x148>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01c      	beq.n	800761c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80075e2:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <USBD_SetConfig+0x148>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ec:	4b3d      	ldr	r3, [pc, #244]	; (80076e4 <USBD_SetConfig+0x148>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f948 	bl	8006888 <USBD_SetClassConfig>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f949 	bl	800789c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800760a:	e065      	b.n	80076d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fa10 	bl	8007a32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2203      	movs	r2, #3
 8007616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800761a:	e05d      	b.n	80076d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa08 	bl	8007a32 <USBD_CtlSendStatus>
      break;
 8007622:	e059      	b.n	80076d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007624:	4b2f      	ldr	r3, [pc, #188]	; (80076e4 <USBD_SetConfig+0x148>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d112      	bne.n	8007652 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007634:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <USBD_SetConfig+0x148>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800763e:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <USBD_SetConfig+0x148>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff f93b 	bl	80068c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9f1 	bl	8007a32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007650:	e042      	b.n	80076d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <USBD_SetConfig+0x148>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d02a      	beq.n	80076b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff f929 	bl	80068c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <USBD_SetConfig+0x148>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <USBD_SetConfig+0x148>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff f902 	bl	8006888 <USBD_SetClassConfig>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f903 	bl	800789c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff f90e 	bl	80068c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076ac:	e014      	b.n	80076d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f9bf 	bl	8007a32 <USBD_CtlSendStatus>
      break;
 80076b4:	e010      	b.n	80076d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9bb 	bl	8007a32 <USBD_CtlSendStatus>
      break;
 80076bc:	e00c      	b.n	80076d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f8eb 	bl	800789c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <USBD_SetConfig+0x148>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff f8f7 	bl	80068c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	73fb      	strb	r3, [r7, #15]
      break;
 80076d6:	bf00      	nop
  }

  return ret;
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000204 	.word	0x20000204

080076e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	88db      	ldrh	r3, [r3, #6]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d004      	beq.n	8007704 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f8cd 	bl	800789c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007702:	e023      	b.n	800774c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	dc02      	bgt.n	8007716 <USBD_GetConfig+0x2e>
 8007710:	2b00      	cmp	r3, #0
 8007712:	dc03      	bgt.n	800771c <USBD_GetConfig+0x34>
 8007714:	e015      	b.n	8007742 <USBD_GetConfig+0x5a>
 8007716:	2b03      	cmp	r3, #3
 8007718:	d00b      	beq.n	8007732 <USBD_GetConfig+0x4a>
 800771a:	e012      	b.n	8007742 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3308      	adds	r3, #8
 8007726:	2201      	movs	r2, #1
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f927 	bl	800797e <USBD_CtlSendData>
        break;
 8007730:	e00c      	b.n	800774c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3304      	adds	r3, #4
 8007736:	2201      	movs	r2, #1
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f91f 	bl	800797e <USBD_CtlSendData>
        break;
 8007740:	e004      	b.n	800774c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8a9 	bl	800789c <USBD_CtlError>
        break;
 800774a:	bf00      	nop
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	2b02      	cmp	r3, #2
 800776a:	d81e      	bhi.n	80077aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d004      	beq.n	800777e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f890 	bl	800789c <USBD_CtlError>
        break;
 800777c:	e01a      	b.n	80077b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f043 0202 	orr.w	r2, r3, #2
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	330c      	adds	r3, #12
 800779e:	2202      	movs	r2, #2
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f8eb 	bl	800797e <USBD_CtlSendData>
      break;
 80077a8:	e004      	b.n	80077b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f875 	bl	800789c <USBD_CtlError>
      break;
 80077b2:	bf00      	nop
  }
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d106      	bne.n	80077dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f92b 	bl	8007a32 <USBD_CtlSendStatus>
  }
}
 80077dc:	bf00      	nop
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d80b      	bhi.n	8007814 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10c      	bne.n	800781e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f910 	bl	8007a32 <USBD_CtlSendStatus>
      }
      break;
 8007812:	e004      	b.n	800781e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f840 	bl	800789c <USBD_CtlError>
      break;
 800781c:	e000      	b.n	8007820 <USBD_ClrFeature+0x3c>
      break;
 800781e:	bf00      	nop
  }
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fabb 	bl	8006dce <SWAPBYTE>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7ff faae 	bl	8006dce <SWAPBYTE>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff faa1 	bl	8006dce <SWAPBYTE>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	80da      	strh	r2, [r3, #6]
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a6:	2180      	movs	r1, #128	; 0x80
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f003 fa6f 	bl	800ad8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f003 fa6b 	bl	800ad8c <USBD_LL_StallEP>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b086      	sub	sp, #24
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d036      	beq.n	8007942 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078d8:	6938      	ldr	r0, [r7, #16]
 80078da:	f000 f836 	bl	800794a <USBD_GetLen>
 80078de:	4603      	mov	r3, r0
 80078e0:	3301      	adds	r3, #1
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	3301      	adds	r3, #1
 80078fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4413      	add	r3, r2
 8007904:	2203      	movs	r2, #3
 8007906:	701a      	strb	r2, [r3, #0]
  idx++;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	3301      	adds	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800790e:	e013      	b.n	8007938 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4413      	add	r3, r2
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3301      	adds	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
    idx++;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	3301      	adds	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
    idx++;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	3301      	adds	r3, #1
 8007936:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e7      	bne.n	8007910 <USBD_GetString+0x52>
 8007940:	e000      	b.n	8007944 <USBD_GetString+0x86>
    return;
 8007942:	bf00      	nop
  }
}
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800795a:	e005      	b.n	8007968 <USBD_GetLen+0x1e>
  {
    len++;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	3301      	adds	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3301      	adds	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f5      	bne.n	800795c <USBD_GetLen+0x12>
  }

  return len;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	2100      	movs	r1, #0
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f003 fa7a 	bl	800ae9e <USBD_LL_Transmit>

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	2100      	movs	r1, #0
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f003 fa69 	bl	800ae9e <USBD_LL_Transmit>

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	2100      	movs	r1, #0
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f003 fa6d 	bl	800aee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	2100      	movs	r1, #0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f003 fa5c 	bl	800aee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a42:	2300      	movs	r3, #0
 8007a44:	2200      	movs	r2, #0
 8007a46:	2100      	movs	r1, #0
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f003 fa28 	bl	800ae9e <USBD_LL_Transmit>

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f003 fa36 	bl	800aee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <__NVIC_SetPriority>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	6039      	str	r1, [r7, #0]
 8007a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	db0a      	blt.n	8007aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	490c      	ldr	r1, [pc, #48]	; (8007acc <__NVIC_SetPriority+0x4c>)
 8007a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9e:	0112      	lsls	r2, r2, #4
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007aa8:	e00a      	b.n	8007ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	4908      	ldr	r1, [pc, #32]	; (8007ad0 <__NVIC_SetPriority+0x50>)
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	3b04      	subs	r3, #4
 8007ab8:	0112      	lsls	r2, r2, #4
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	440b      	add	r3, r1
 8007abe:	761a      	strb	r2, [r3, #24]
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr
 8007acc:	e000e100 	.word	0xe000e100
 8007ad0:	e000ed00 	.word	0xe000ed00

08007ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <SysTick_Handler+0x1c>)
 8007ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007adc:	f001 fd28 	bl	8009530 <xTaskGetSchedulerState>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d001      	beq.n	8007aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ae6:	f002 fb0f 	bl	800a108 <xPortSysTickHandler>
  }
}
 8007aea:	bf00      	nop
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	e000e010 	.word	0xe000e010

08007af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007af8:	2100      	movs	r1, #0
 8007afa:	f06f 0004 	mvn.w	r0, #4
 8007afe:	f7ff ffbf 	bl	8007a80 <__NVIC_SetPriority>
#endif
}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b0e:	f3ef 8305 	mrs	r3, IPSR
 8007b12:	603b      	str	r3, [r7, #0]
  return(result);
 8007b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b1a:	f06f 0305 	mvn.w	r3, #5
 8007b1e:	607b      	str	r3, [r7, #4]
 8007b20:	e00c      	b.n	8007b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <osKernelInitialize+0x44>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b2a:	4b08      	ldr	r3, [pc, #32]	; (8007b4c <osKernelInitialize+0x44>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	e002      	b.n	8007b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b36:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b3c:	687b      	ldr	r3, [r7, #4]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000208 	.word	0x20000208

08007b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b56:	f3ef 8305 	mrs	r3, IPSR
 8007b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b62:	f06f 0305 	mvn.w	r3, #5
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	e010      	b.n	8007b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b6a:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <osKernelStart+0x48>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d109      	bne.n	8007b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b72:	f7ff ffbf 	bl	8007af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b76:	4b08      	ldr	r3, [pc, #32]	; (8007b98 <osKernelStart+0x48>)
 8007b78:	2202      	movs	r2, #2
 8007b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b7c:	f001 f87c 	bl	8008c78 <vTaskStartScheduler>
      stat = osOK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	607b      	str	r3, [r7, #4]
 8007b84:	e002      	b.n	8007b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b8c:	687b      	ldr	r3, [r7, #4]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000208 	.word	0x20000208

08007b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af04      	add	r7, sp, #16
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bac:	f3ef 8305 	mrs	r3, IPSR
 8007bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8007bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d17e      	bne.n	8007cb6 <osThreadNew+0x11a>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d07b      	beq.n	8007cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bbe:	2380      	movs	r3, #128	; 0x80
 8007bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007bc2:	2318      	movs	r3, #24
 8007bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d045      	beq.n	8007c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <osThreadNew+0x48>
        name = attr->name;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <osThreadNew+0x6e>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b38      	cmp	r3, #56	; 0x38
 8007bfc:	d805      	bhi.n	8007c0a <osThreadNew+0x6e>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <osThreadNew+0x72>
        return (NULL);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e054      	b.n	8007cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <osThreadNew+0xa8>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	2bbb      	cmp	r3, #187	; 0xbb
 8007c2c:	d90a      	bls.n	8007c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d006      	beq.n	8007c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <osThreadNew+0xa8>
        mem = 1;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e010      	b.n	8007c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10c      	bne.n	8007c66 <osThreadNew+0xca>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d108      	bne.n	8007c66 <osThreadNew+0xca>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <osThreadNew+0xca>
          mem = 0;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	e001      	b.n	8007c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d110      	bne.n	8007c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c74:	9202      	str	r2, [sp, #8]
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6a3a      	ldr	r2, [r7, #32]
 8007c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fe0c 	bl	80088a0 <xTaskCreateStatic>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	613b      	str	r3, [r7, #16]
 8007c8c:	e013      	b.n	8007cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d110      	bne.n	8007cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fe57 	bl	800895a <xTaskCreate>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d001      	beq.n	8007cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cb6:	693b      	ldr	r3, [r7, #16]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3728      	adds	r7, #40	; 0x28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cc8:	f3ef 8305 	mrs	r3, IPSR
 8007ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <osDelay+0x1c>
    stat = osErrorISR;
 8007cd4:	f06f 0305 	mvn.w	r3, #5
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e007      	b.n	8007cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 ff92 	bl	8008c10 <vTaskDelay>
    }
  }

  return (stat);
 8007cec:	68fb      	ldr	r3, [r7, #12]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
	...

08007cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	4a06      	ldr	r2, [pc, #24]	; (8007d28 <vApplicationGetIdleTaskMemory+0x30>)
 8007d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2280      	movs	r2, #128	; 0x80
 8007d14:	601a      	str	r2, [r3, #0]
}
 8007d16:	bf00      	nop
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	2000020c 	.word	0x2000020c
 8007d28:	200002c8 	.word	0x200002c8

08007d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a07      	ldr	r2, [pc, #28]	; (8007d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4a06      	ldr	r2, [pc, #24]	; (8007d5c <vApplicationGetTimerTaskMemory+0x30>)
 8007d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d4a:	601a      	str	r2, [r3, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	200004c8 	.word	0x200004c8
 8007d5c:	20000584 	.word	0x20000584

08007d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0208 	add.w	r2, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f103 0208 	add.w	r2, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f103 0208 	add.w	r2, r3, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d103      	bne.n	8007e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	e00c      	b.n	8007e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3308      	adds	r3, #8
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e002      	b.n	8007e30 <vListInsert+0x2e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d2f6      	bcs.n	8007e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6892      	ldr	r2, [r2, #8]
 8007e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6852      	ldr	r2, [r2, #4]
 8007e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d103      	bne.n	8007ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1e5a      	subs	r2, r3, #1
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ef2:	f002 f877 	bl	8009fe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	441a      	add	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	3b01      	subs	r3, #1
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	441a      	add	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	22ff      	movs	r2, #255	; 0xff
 8007f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d114      	bne.n	8007f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01a      	beq.n	8007f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3310      	adds	r3, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 f929 	bl	80091ac <xTaskRemoveFromEventList>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d012      	beq.n	8007f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <xQueueGenericReset+0xcc>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e009      	b.n	8007f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fef2 	bl	8007d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff feed 	bl	8007d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f86:	f002 f85d 	bl	800a044 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f8a:	2301      	movs	r3, #1
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <xQueueGenericCreateStatic+0x52>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <xQueueGenericCreateStatic+0x56>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <xQueueGenericCreateStatic+0x58>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	623b      	str	r3, [r7, #32]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueGenericCreateStatic+0x7e>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueGenericCreateStatic+0x82>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueGenericCreateStatic+0x84>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	61fb      	str	r3, [r7, #28]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008036:	2350      	movs	r3, #80	; 0x50
 8008038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b50      	cmp	r3, #80	; 0x50
 800803e:	d00a      	beq.n	8008056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	61bb      	str	r3, [r7, #24]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800806a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f805 	bl	8008088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008080:	4618      	mov	r0, r3
 8008082:	3730      	adds	r7, #48	; 0x30
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	e002      	b.n	80080aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080b6:	2101      	movs	r1, #1
 80080b8:	69b8      	ldr	r0, [r7, #24]
 80080ba:	f7ff ff05 	bl	8007ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080de:	2300      	movs	r3, #0
 80080e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d10a      	bne.n	8008102 <xQueueGenericSend+0x32>
	__asm volatile
 80080ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f0:	f383 8811 	msr	BASEPRI, r3
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <xQueueGenericSend+0x40>
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <xQueueGenericSend+0x44>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <xQueueGenericSend+0x46>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <xQueueGenericSend+0x60>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d103      	bne.n	800813e <xQueueGenericSend+0x6e>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <xQueueGenericSend+0x72>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericSend+0x74>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xQueueGenericSend+0x8e>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	623b      	str	r3, [r7, #32]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800815e:	f001 f9e7 	bl	8009530 <xTaskGetSchedulerState>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d102      	bne.n	800816e <xQueueGenericSend+0x9e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <xQueueGenericSend+0xa2>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xQueueGenericSend+0xa4>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericSend+0xbe>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	61fb      	str	r3, [r7, #28]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800818e:	f001 ff29 	bl	8009fe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	429a      	cmp	r2, r3
 800819c:	d302      	bcc.n	80081a4 <xQueueGenericSend+0xd4>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d129      	bne.n	80081f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081aa:	f000 fa0b 	bl	80085c4 <prvCopyDataToQueue>
 80081ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d010      	beq.n	80081da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	3324      	adds	r3, #36	; 0x24
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fff5 	bl	80091ac <xTaskRemoveFromEventList>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d013      	beq.n	80081f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081c8:	4b3f      	ldr	r3, [pc, #252]	; (80082c8 <xQueueGenericSend+0x1f8>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	e00a      	b.n	80081f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d007      	beq.n	80081f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b39      	ldr	r3, [pc, #228]	; (80082c8 <xQueueGenericSend+0x1f8>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081f0:	f001 ff28 	bl	800a044 <vPortExitCritical>
				return pdPASS;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e063      	b.n	80082c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d103      	bne.n	8008206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081fe:	f001 ff21 	bl	800a044 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008202:	2300      	movs	r3, #0
 8008204:	e05c      	b.n	80082c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800820c:	f107 0314 	add.w	r3, r7, #20
 8008210:	4618      	mov	r0, r3
 8008212:	f001 f82f 	bl	8009274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008216:	2301      	movs	r3, #1
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800821a:	f001 ff13 	bl	800a044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800821e:	f000 fd9b 	bl	8008d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008222:	f001 fedf 	bl	8009fe4 <vPortEnterCritical>
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800822c:	b25b      	sxtb	r3, r3
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d103      	bne.n	800823c <xQueueGenericSend+0x16c>
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008242:	b25b      	sxtb	r3, r3
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d103      	bne.n	8008252 <xQueueGenericSend+0x182>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008252:	f001 fef7 	bl	800a044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008256:	1d3a      	adds	r2, r7, #4
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f001 f81e 	bl	80092a0 <xTaskCheckForTimeOut>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d124      	bne.n	80082b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800826a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800826c:	f000 faa2 	bl	80087b4 <prvIsQueueFull>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d018      	beq.n	80082a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	3310      	adds	r3, #16
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f000 ff44 	bl	800910c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008286:	f000 fa2d 	bl	80086e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800828a:	f000 fd73 	bl	8008d74 <xTaskResumeAll>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f47f af7c 	bne.w	800818e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <xQueueGenericSend+0x1f8>)
 8008298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	e772      	b.n	800818e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082aa:	f000 fa1b 	bl	80086e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ae:	f000 fd61 	bl	8008d74 <xTaskResumeAll>
 80082b2:	e76c      	b.n	800818e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b6:	f000 fa15 	bl	80086e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ba:	f000 fd5b 	bl	8008d74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3738      	adds	r7, #56	; 0x38
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b090      	sub	sp, #64	; 0x40
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <xQueueGenericSendFromISR+0x3c>
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <xQueueGenericSendFromISR+0x40>
 8008308:	2301      	movs	r3, #1
 800830a:	e000      	b.n	800830e <xQueueGenericSendFromISR+0x42>
 800830c:	2300      	movs	r3, #0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008324:	bf00      	nop
 8008326:	e7fe      	b.n	8008326 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d103      	bne.n	8008336 <xQueueGenericSendFromISR+0x6a>
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b01      	cmp	r3, #1
 8008334:	d101      	bne.n	800833a <xQueueGenericSendFromISR+0x6e>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericSendFromISR+0x70>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10a      	bne.n	8008356 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	623b      	str	r3, [r7, #32]
}
 8008352:	bf00      	nop
 8008354:	e7fe      	b.n	8008354 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008356:	f001 ff27 	bl	800a1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800835a:	f3ef 8211 	mrs	r2, BASEPRI
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	61fa      	str	r2, [r7, #28]
 8008370:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008372:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008374:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	429a      	cmp	r2, r3
 8008380:	d302      	bcc.n	8008388 <xQueueGenericSendFromISR+0xbc>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d12f      	bne.n	80083e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800838e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800839e:	f000 f911 	bl	80085c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d112      	bne.n	80083d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d016      	beq.n	80083e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fef7 	bl	80091ac <xTaskRemoveFromEventList>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00b      	beq.n	80083e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	e007      	b.n	80083e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	b25a      	sxtb	r2, r3
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083e2:	2301      	movs	r3, #1
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80083e6:	e001      	b.n	80083ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083e8:	2300      	movs	r3, #0
 80083ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3740      	adds	r7, #64	; 0x40
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08c      	sub	sp, #48	; 0x30
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008410:	2300      	movs	r3, #0
 8008412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <xQueueReceive+0x30>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	623b      	str	r3, [r7, #32]
}
 8008430:	bf00      	nop
 8008432:	e7fe      	b.n	8008432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d103      	bne.n	8008442 <xQueueReceive+0x3e>
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <xQueueReceive+0x42>
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <xQueueReceive+0x44>
 8008446:	2300      	movs	r3, #0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <xQueueReceive+0x5e>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61fb      	str	r3, [r7, #28]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008462:	f001 f865 	bl	8009530 <xTaskGetSchedulerState>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d102      	bne.n	8008472 <xQueueReceive+0x6e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueReceive+0x72>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueReceive+0x74>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueReceive+0x8e>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61bb      	str	r3, [r7, #24]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008492:	f001 fda7 	bl	8009fe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01f      	beq.n	80084e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a6:	f000 f8f7 	bl	8008698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00f      	beq.n	80084da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	3310      	adds	r3, #16
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fe74 	bl	80091ac <xTaskRemoveFromEventList>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d007      	beq.n	80084da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084ca:	4b3d      	ldr	r3, [pc, #244]	; (80085c0 <xQueueReceive+0x1bc>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084da:	f001 fdb3 	bl	800a044 <vPortExitCritical>
				return pdPASS;
 80084de:	2301      	movs	r3, #1
 80084e0:	e069      	b.n	80085b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d103      	bne.n	80084f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084e8:	f001 fdac 	bl	800a044 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e062      	b.n	80085b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084f6:	f107 0310 	add.w	r3, r7, #16
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 feba 	bl	8009274 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008500:	2301      	movs	r3, #1
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008504:	f001 fd9e 	bl	800a044 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008508:	f000 fc26 	bl	8008d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800850c:	f001 fd6a 	bl	8009fe4 <vPortEnterCritical>
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008516:	b25b      	sxtb	r3, r3
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d103      	bne.n	8008526 <xQueueReceive+0x122>
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852c:	b25b      	sxtb	r3, r3
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008532:	d103      	bne.n	800853c <xQueueReceive+0x138>
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800853c:	f001 fd82 	bl	800a044 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008540:	1d3a      	adds	r2, r7, #4
 8008542:	f107 0310 	add.w	r3, r7, #16
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fea9 	bl	80092a0 <xTaskCheckForTimeOut>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d123      	bne.n	800859c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008556:	f000 f917 	bl	8008788 <prvIsQueueEmpty>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d017      	beq.n	8008590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	3324      	adds	r3, #36	; 0x24
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fdcf 	bl	800910c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800856e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008570:	f000 f8b8 	bl	80086e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008574:	f000 fbfe 	bl	8008d74 <xTaskResumeAll>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d189      	bne.n	8008492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <xQueueReceive+0x1bc>)
 8008580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008584:	601a      	str	r2, [r3, #0]
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	e780      	b.n	8008492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008592:	f000 f8a7 	bl	80086e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008596:	f000 fbed 	bl	8008d74 <xTaskResumeAll>
 800859a:	e77a      	b.n	8008492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800859c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800859e:	f000 f8a1 	bl	80086e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085a2:	f000 fbe7 	bl	8008d74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a8:	f000 f8ee 	bl	8008788 <prvIsQueueEmpty>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f43f af6f 	beq.w	8008492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3730      	adds	r7, #48	; 0x30
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	e000ed04 	.word	0xe000ed04

080085c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10d      	bne.n	80085fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d14d      	bne.n	8008686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 ffbc 	bl	800956c <xTaskPriorityDisinherit>
 80085f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	e043      	b.n	8008686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d119      	bne.n	8008638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6858      	ldr	r0, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	461a      	mov	r2, r3
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	f002 fd04 	bl	800b01c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	429a      	cmp	r2, r3
 800862c:	d32b      	bcc.n	8008686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	e026      	b.n	8008686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68d8      	ldr	r0, [r3, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	461a      	mov	r2, r3
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	f002 fcea 	bl	800b01c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	425b      	negs	r3, r3
 8008652:	441a      	add	r2, r3
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d207      	bcs.n	8008674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	425b      	negs	r3, r3
 800866e:	441a      	add	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d105      	bne.n	8008686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	3b01      	subs	r3, #1
 8008684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d018      	beq.n	80086dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68da      	ldr	r2, [r3, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	441a      	add	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d303      	bcc.n	80086cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68d9      	ldr	r1, [r3, #12]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	461a      	mov	r2, r3
 80086d6:	6838      	ldr	r0, [r7, #0]
 80086d8:	f002 fca0 	bl	800b01c <memcpy>
	}
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086ec:	f001 fc7a 	bl	8009fe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086f8:	e011      	b.n	800871e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d012      	beq.n	8008728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	3324      	adds	r3, #36	; 0x24
 8008706:	4618      	mov	r0, r3
 8008708:	f000 fd50 	bl	80091ac <xTaskRemoveFromEventList>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008712:	f000 fe27 	bl	8009364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	3b01      	subs	r3, #1
 800871a:	b2db      	uxtb	r3, r3
 800871c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800871e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008722:	2b00      	cmp	r3, #0
 8008724:	dce9      	bgt.n	80086fa <prvUnlockQueue+0x16>
 8008726:	e000      	b.n	800872a <prvUnlockQueue+0x46>
					break;
 8008728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	22ff      	movs	r2, #255	; 0xff
 800872e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008732:	f001 fc87 	bl	800a044 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008736:	f001 fc55 	bl	8009fe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008742:	e011      	b.n	8008768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d012      	beq.n	8008772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3310      	adds	r3, #16
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fd2b 	bl	80091ac <xTaskRemoveFromEventList>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800875c:	f000 fe02 	bl	8009364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	3b01      	subs	r3, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800876c:	2b00      	cmp	r3, #0
 800876e:	dce9      	bgt.n	8008744 <prvUnlockQueue+0x60>
 8008770:	e000      	b.n	8008774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	22ff      	movs	r2, #255	; 0xff
 8008778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800877c:	f001 fc62 	bl	800a044 <vPortExitCritical>
}
 8008780:	bf00      	nop
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008790:	f001 fc28 	bl	8009fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	e001      	b.n	80087a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087a6:	f001 fc4d 	bl	800a044 <vPortExitCritical>

	return xReturn;
 80087aa:	68fb      	ldr	r3, [r7, #12]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087bc:	f001 fc12 	bl	8009fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d102      	bne.n	80087d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e001      	b.n	80087d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087d6:	f001 fc35 	bl	800a044 <vPortExitCritical>

	return xReturn;
 80087da:	68fb      	ldr	r3, [r7, #12]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	e014      	b.n	800881e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087f4:	4a0f      	ldr	r2, [pc, #60]	; (8008834 <vQueueAddToRegistry+0x50>)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008800:	490c      	ldr	r1, [pc, #48]	; (8008834 <vQueueAddToRegistry+0x50>)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800880a:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <vQueueAddToRegistry+0x50>)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	4413      	add	r3, r2
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008816:	e006      	b.n	8008826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3301      	adds	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b07      	cmp	r3, #7
 8008822:	d9e7      	bls.n	80087f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20004f28 	.word	0x20004f28

08008838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008848:	f001 fbcc 	bl	8009fe4 <vPortEnterCritical>
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008852:	b25b      	sxtb	r3, r3
 8008854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008858:	d103      	bne.n	8008862 <vQueueWaitForMessageRestricted+0x2a>
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008868:	b25b      	sxtb	r3, r3
 800886a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886e:	d103      	bne.n	8008878 <vQueueWaitForMessageRestricted+0x40>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008878:	f001 fbe4 	bl	800a044 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	3324      	adds	r3, #36	; 0x24
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 fc61 	bl	8009154 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f7ff ff26 	bl	80086e4 <prvUnlockQueue>
	}
 8008898:	bf00      	nop
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08e      	sub	sp, #56	; 0x38
 80088a4:	af04      	add	r7, sp, #16
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10a      	bne.n	80088ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	623b      	str	r3, [r7, #32]
}
 80088c6:	bf00      	nop
 80088c8:	e7fe      	b.n	80088c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	61fb      	str	r3, [r7, #28]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088e6:	23bc      	movs	r3, #188	; 0xbc
 80088e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2bbc      	cmp	r3, #188	; 0xbc
 80088ee:	d00a      	beq.n	8008906 <xTaskCreateStatic+0x66>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	61bb      	str	r3, [r7, #24]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01e      	beq.n	800894c <xTaskCreateStatic+0xac>
 800890e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01b      	beq.n	800894c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	2202      	movs	r2, #2
 8008922:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008926:	2300      	movs	r3, #0
 8008928:	9303      	str	r3, [sp, #12]
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f850 	bl	80089e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008946:	f000 f8f3 	bl	8008b30 <prvAddNewTaskToReadyList>
 800894a:	e001      	b.n	8008950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008950:	697b      	ldr	r3, [r7, #20]
	}
 8008952:	4618      	mov	r0, r3
 8008954:	3728      	adds	r7, #40	; 0x28
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800895a:	b580      	push	{r7, lr}
 800895c:	b08c      	sub	sp, #48	; 0x30
 800895e:	af04      	add	r7, sp, #16
 8008960:	60f8      	str	r0, [r7, #12]
 8008962:	60b9      	str	r1, [r7, #8]
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4618      	mov	r0, r3
 8008970:	f001 fc5a 	bl	800a228 <pvPortMalloc>
 8008974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00e      	beq.n	800899a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800897c:	20bc      	movs	r0, #188	; 0xbc
 800897e:	f001 fc53 	bl	800a228 <pvPortMalloc>
 8008982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
 8008990:	e005      	b.n	800899e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008992:	6978      	ldr	r0, [r7, #20]
 8008994:	f001 fd14 	bl	800a3c0 <vPortFree>
 8008998:	e001      	b.n	800899e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d017      	beq.n	80089d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089ac:	88fa      	ldrh	r2, [r7, #6]
 80089ae:	2300      	movs	r3, #0
 80089b0:	9303      	str	r3, [sp, #12]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	9302      	str	r3, [sp, #8]
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f80e 	bl	80089e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089c8:	69f8      	ldr	r0, [r7, #28]
 80089ca:	f000 f8b1 	bl	8008b30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089ce:	2301      	movs	r3, #1
 80089d0:	61bb      	str	r3, [r7, #24]
 80089d2:	e002      	b.n	80089da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
 80089d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089da:	69bb      	ldr	r3, [r7, #24]
	}
 80089dc:	4618      	mov	r0, r3
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b088      	sub	sp, #32
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	461a      	mov	r2, r3
 80089fc:	21a5      	movs	r1, #165	; 0xa5
 80089fe:	f002 fb1b 	bl	800b038 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	617b      	str	r3, [r7, #20]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d01f      	beq.n	8008a82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	e012      	b.n	8008a6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	7819      	ldrb	r1, [r3, #0]
 8008a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	3334      	adds	r3, #52	; 0x34
 8008a58:	460a      	mov	r2, r1
 8008a5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	4413      	add	r3, r2
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b0f      	cmp	r3, #15
 8008a72:	d9e9      	bls.n	8008a48 <prvInitialiseNewTask+0x64>
 8008a74:	e000      	b.n	8008a78 <prvInitialiseNewTask+0x94>
			{
				break;
 8008a76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a80:	e003      	b.n	8008a8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2b37      	cmp	r3, #55	; 0x37
 8008a8e:	d901      	bls.n	8008a94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a90:	2337      	movs	r3, #55	; 0x37
 8008a92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff f978 	bl	8007da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab2:	3318      	adds	r3, #24
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff f973 	bl	8007da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	3354      	adds	r3, #84	; 0x54
 8008ae4:	2260      	movs	r2, #96	; 0x60
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 faa5 	bl	800b038 <memset>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	4a0c      	ldr	r2, [pc, #48]	; (8008b24 <prvInitialiseNewTask+0x140>)
 8008af2:	659a      	str	r2, [r3, #88]	; 0x58
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <prvInitialiseNewTask+0x144>)
 8008af8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	4a0b      	ldr	r2, [pc, #44]	; (8008b2c <prvInitialiseNewTask+0x148>)
 8008afe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	69b8      	ldr	r0, [r7, #24]
 8008b06:	f001 f941 	bl	8009d8c <pxPortInitialiseStack>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d002      	beq.n	8008b1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	3720      	adds	r7, #32
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	0800b2e0 	.word	0x0800b2e0
 8008b28:	0800b300 	.word	0x0800b300
 8008b2c:	0800b2c0 	.word	0x0800b2c0

08008b30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b38:	f001 fa54 	bl	8009fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b3c:	4b2d      	ldr	r3, [pc, #180]	; (8008bf4 <prvAddNewTaskToReadyList+0xc4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	4a2c      	ldr	r2, [pc, #176]	; (8008bf4 <prvAddNewTaskToReadyList+0xc4>)
 8008b44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b46:	4b2c      	ldr	r3, [pc, #176]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b4e:	4a2a      	ldr	r2, [pc, #168]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b54:	4b27      	ldr	r3, [pc, #156]	; (8008bf4 <prvAddNewTaskToReadyList+0xc4>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d110      	bne.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b5c:	f000 fc26 	bl	80093ac <prvInitialiseTaskLists>
 8008b60:	e00d      	b.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b62:	4b26      	ldr	r3, [pc, #152]	; (8008bfc <prvAddNewTaskToReadyList+0xcc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b6a:	4b23      	ldr	r3, [pc, #140]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d802      	bhi.n	8008b7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b78:	4a1f      	ldr	r2, [pc, #124]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <prvAddNewTaskToReadyList+0xd0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	4a1e      	ldr	r2, [pc, #120]	; (8008c00 <prvAddNewTaskToReadyList+0xd0>)
 8008b86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b88:	4b1d      	ldr	r3, [pc, #116]	; (8008c00 <prvAddNewTaskToReadyList+0xd0>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <prvAddNewTaskToReadyList+0xd4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d903      	bls.n	8008ba4 <prvAddNewTaskToReadyList+0x74>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	4a18      	ldr	r2, [pc, #96]	; (8008c04 <prvAddNewTaskToReadyList+0xd4>)
 8008ba2:	6013      	str	r3, [r2, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvAddNewTaskToReadyList+0xd8>)
 8008bb2:	441a      	add	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7ff f8fd 	bl	8007dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bc0:	f001 fa40 	bl	800a044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <prvAddNewTaskToReadyList+0xcc>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00e      	beq.n	8008bea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <prvAddNewTaskToReadyList+0xc8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d207      	bcs.n	8008bea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bda:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <prvAddNewTaskToReadyList+0xdc>)
 8008bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000e58 	.word	0x20000e58
 8008bf8:	20000984 	.word	0x20000984
 8008bfc:	20000e64 	.word	0x20000e64
 8008c00:	20000e74 	.word	0x20000e74
 8008c04:	20000e60 	.word	0x20000e60
 8008c08:	20000988 	.word	0x20000988
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d017      	beq.n	8008c52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c22:	4b13      	ldr	r3, [pc, #76]	; (8008c70 <vTaskDelay+0x60>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <vTaskDelay+0x30>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	60bb      	str	r3, [r7, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c40:	f000 f88a 	bl	8008d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c44:	2100      	movs	r1, #0
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fcfe 	bl	8009648 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c4c:	f000 f892 	bl	8008d74 <xTaskResumeAll>
 8008c50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d107      	bne.n	8008c68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <vTaskDelay+0x64>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000e80 	.word	0x20000e80
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c86:	463a      	mov	r2, r7
 8008c88:	1d39      	adds	r1, r7, #4
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff f832 	bl	8007cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	9202      	str	r2, [sp, #8]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	4924      	ldr	r1, [pc, #144]	; (8008d38 <vTaskStartScheduler+0xc0>)
 8008ca8:	4824      	ldr	r0, [pc, #144]	; (8008d3c <vTaskStartScheduler+0xc4>)
 8008caa:	f7ff fdf9 	bl	80088a0 <xTaskCreateStatic>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4a23      	ldr	r2, [pc, #140]	; (8008d40 <vTaskStartScheduler+0xc8>)
 8008cb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cb4:	4b22      	ldr	r3, [pc, #136]	; (8008d40 <vTaskStartScheduler+0xc8>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	e001      	b.n	8008cc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d102      	bne.n	8008cd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ccc:	f000 fd10 	bl	80096f0 <xTimerCreateTimerTask>
 8008cd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d11b      	bne.n	8008d10 <vTaskStartScheduler+0x98>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	613b      	str	r3, [r7, #16]
}
 8008cea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cec:	4b15      	ldr	r3, [pc, #84]	; (8008d44 <vTaskStartScheduler+0xcc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3354      	adds	r3, #84	; 0x54
 8008cf2:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <vTaskStartScheduler+0xd0>)
 8008cf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cf6:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <vTaskStartScheduler+0xd4>)
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cfe:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <vTaskStartScheduler+0xd8>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <vTaskStartScheduler+0xdc>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d0a:	f001 f8c9 	bl	8009ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d0e:	e00e      	b.n	8008d2e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d10a      	bne.n	8008d2e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	60fb      	str	r3, [r7, #12]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <vTaskStartScheduler+0xb4>
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	0800b200 	.word	0x0800b200
 8008d3c:	0800937d 	.word	0x0800937d
 8008d40:	20000e7c 	.word	0x20000e7c
 8008d44:	20000984 	.word	0x20000984
 8008d48:	20000184 	.word	0x20000184
 8008d4c:	20000e78 	.word	0x20000e78
 8008d50:	20000e64 	.word	0x20000e64
 8008d54:	20000e5c 	.word	0x20000e5c

08008d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <vTaskSuspendAll+0x18>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	4a03      	ldr	r2, [pc, #12]	; (8008d70 <vTaskSuspendAll+0x18>)
 8008d64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d66:	bf00      	nop
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20000e80 	.word	0x20000e80

08008d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d82:	4b42      	ldr	r3, [pc, #264]	; (8008e8c <xTaskResumeAll+0x118>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	603b      	str	r3, [r7, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008da0:	f001 f920 	bl	8009fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008da4:	4b39      	ldr	r3, [pc, #228]	; (8008e8c <xTaskResumeAll+0x118>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	4a38      	ldr	r2, [pc, #224]	; (8008e8c <xTaskResumeAll+0x118>)
 8008dac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dae:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <xTaskResumeAll+0x118>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d162      	bne.n	8008e7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008db6:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <xTaskResumeAll+0x11c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d05e      	beq.n	8008e7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dbe:	e02f      	b.n	8008e20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc0:	4b34      	ldr	r3, [pc, #208]	; (8008e94 <xTaskResumeAll+0x120>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3318      	adds	r3, #24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff f851 	bl	8007e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff f84c 	bl	8007e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	4b2d      	ldr	r3, [pc, #180]	; (8008e98 <xTaskResumeAll+0x124>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d903      	bls.n	8008df0 <xTaskResumeAll+0x7c>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a2a      	ldr	r2, [pc, #168]	; (8008e98 <xTaskResumeAll+0x124>)
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4a27      	ldr	r2, [pc, #156]	; (8008e9c <xTaskResumeAll+0x128>)
 8008dfe:	441a      	add	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f7fe ffd7 	bl	8007dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e10:	4b23      	ldr	r3, [pc, #140]	; (8008ea0 <xTaskResumeAll+0x12c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d302      	bcc.n	8008e20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e1a:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <xTaskResumeAll+0x130>)
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e20:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <xTaskResumeAll+0x120>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1cb      	bne.n	8008dc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e2e:	f000 fb5f 	bl	80094f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e32:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <xTaskResumeAll+0x134>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d010      	beq.n	8008e60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e3e:	f000 f847 	bl	8008ed0 <xTaskIncrementTick>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e48:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <xTaskResumeAll+0x130>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1f1      	bne.n	8008e3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e5a:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <xTaskResumeAll+0x134>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <xTaskResumeAll+0x130>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d009      	beq.n	8008e7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <xTaskResumeAll+0x138>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e7c:	f001 f8e2 	bl	800a044 <vPortExitCritical>

	return xAlreadyYielded;
 8008e80:	68bb      	ldr	r3, [r7, #8]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000e80 	.word	0x20000e80
 8008e90:	20000e58 	.word	0x20000e58
 8008e94:	20000e18 	.word	0x20000e18
 8008e98:	20000e60 	.word	0x20000e60
 8008e9c:	20000988 	.word	0x20000988
 8008ea0:	20000984 	.word	0x20000984
 8008ea4:	20000e6c 	.word	0x20000e6c
 8008ea8:	20000e68 	.word	0x20000e68
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <xTaskGetTickCount+0x1c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ebc:	687b      	ldr	r3, [r7, #4]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000e5c 	.word	0x20000e5c

08008ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eda:	4b4f      	ldr	r3, [pc, #316]	; (8009018 <xTaskIncrementTick+0x148>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f040 808f 	bne.w	8009002 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ee4:	4b4d      	ldr	r3, [pc, #308]	; (800901c <xTaskIncrementTick+0x14c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008eec:	4a4b      	ldr	r2, [pc, #300]	; (800901c <xTaskIncrementTick+0x14c>)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d120      	bne.n	8008f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ef8:	4b49      	ldr	r3, [pc, #292]	; (8009020 <xTaskIncrementTick+0x150>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	603b      	str	r3, [r7, #0]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <xTaskIncrementTick+0x46>
 8008f18:	4b41      	ldr	r3, [pc, #260]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	4b41      	ldr	r3, [pc, #260]	; (8009024 <xTaskIncrementTick+0x154>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a3f      	ldr	r2, [pc, #252]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4a3f      	ldr	r2, [pc, #252]	; (8009024 <xTaskIncrementTick+0x154>)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	4b3e      	ldr	r3, [pc, #248]	; (8009028 <xTaskIncrementTick+0x158>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	4a3d      	ldr	r2, [pc, #244]	; (8009028 <xTaskIncrementTick+0x158>)
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	f000 fadb 	bl	80094f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f3a:	4b3c      	ldr	r3, [pc, #240]	; (800902c <xTaskIncrementTick+0x15c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d349      	bcc.n	8008fd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f44:	4b36      	ldr	r3, [pc, #216]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f4e:	4b37      	ldr	r3, [pc, #220]	; (800902c <xTaskIncrementTick+0x15c>)
 8008f50:	f04f 32ff 	mov.w	r2, #4294967295
 8008f54:	601a      	str	r2, [r3, #0]
					break;
 8008f56:	e03f      	b.n	8008fd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f58:	4b31      	ldr	r3, [pc, #196]	; (8009020 <xTaskIncrementTick+0x150>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d203      	bcs.n	8008f78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f70:	4a2e      	ldr	r2, [pc, #184]	; (800902c <xTaskIncrementTick+0x15c>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f76:	e02f      	b.n	8008fd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe ff79 	bl	8007e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	3318      	adds	r3, #24
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe ff70 	bl	8007e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4b25      	ldr	r3, [pc, #148]	; (8009030 <xTaskIncrementTick+0x160>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d903      	bls.n	8008fa8 <xTaskIncrementTick+0xd8>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a22      	ldr	r2, [pc, #136]	; (8009030 <xTaskIncrementTick+0x160>)
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4613      	mov	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4a1f      	ldr	r2, [pc, #124]	; (8009034 <xTaskIncrementTick+0x164>)
 8008fb6:	441a      	add	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fefb 	bl	8007dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <xTaskIncrementTick+0x168>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d3b8      	bcc.n	8008f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fd6:	e7b5      	b.n	8008f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fd8:	4b17      	ldr	r3, [pc, #92]	; (8009038 <xTaskIncrementTick+0x168>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fde:	4915      	ldr	r1, [pc, #84]	; (8009034 <xTaskIncrementTick+0x164>)
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d901      	bls.n	8008ff4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <xTaskIncrementTick+0x16c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]
 8009000:	e004      	b.n	800900c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009002:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <xTaskIncrementTick+0x170>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <xTaskIncrementTick+0x170>)
 800900a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800900c:	697b      	ldr	r3, [r7, #20]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000e80 	.word	0x20000e80
 800901c:	20000e5c 	.word	0x20000e5c
 8009020:	20000e10 	.word	0x20000e10
 8009024:	20000e14 	.word	0x20000e14
 8009028:	20000e70 	.word	0x20000e70
 800902c:	20000e78 	.word	0x20000e78
 8009030:	20000e60 	.word	0x20000e60
 8009034:	20000988 	.word	0x20000988
 8009038:	20000984 	.word	0x20000984
 800903c:	20000e6c 	.word	0x20000e6c
 8009040:	20000e68 	.word	0x20000e68

08009044 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800904a:	4b2a      	ldr	r3, [pc, #168]	; (80090f4 <vTaskSwitchContext+0xb0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009052:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <vTaskSwitchContext+0xb4>)
 8009054:	2201      	movs	r2, #1
 8009056:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009058:	e046      	b.n	80090e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800905a:	4b27      	ldr	r3, [pc, #156]	; (80090f8 <vTaskSwitchContext+0xb4>)
 800905c:	2200      	movs	r2, #0
 800905e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009060:	4b26      	ldr	r3, [pc, #152]	; (80090fc <vTaskSwitchContext+0xb8>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e010      	b.n	800908a <vTaskSwitchContext+0x46>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <vTaskSwitchContext+0x40>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	607b      	str	r3, [r7, #4]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <vTaskSwitchContext+0x3e>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b01      	subs	r3, #1
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	491d      	ldr	r1, [pc, #116]	; (8009100 <vTaskSwitchContext+0xbc>)
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0e4      	beq.n	8009068 <vTaskSwitchContext+0x24>
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <vTaskSwitchContext+0xbc>)
 80090aa:	4413      	add	r3, r2
 80090ac:	60bb      	str	r3, [r7, #8]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	605a      	str	r2, [r3, #4]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3308      	adds	r3, #8
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d104      	bne.n	80090ce <vTaskSwitchContext+0x8a>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	4a0b      	ldr	r2, [pc, #44]	; (8009104 <vTaskSwitchContext+0xc0>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	4a08      	ldr	r2, [pc, #32]	; (80090fc <vTaskSwitchContext+0xb8>)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <vTaskSwitchContext+0xc0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3354      	adds	r3, #84	; 0x54
 80090e4:	4a08      	ldr	r2, [pc, #32]	; (8009108 <vTaskSwitchContext+0xc4>)
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20000e80 	.word	0x20000e80
 80090f8:	20000e6c 	.word	0x20000e6c
 80090fc:	20000e60 	.word	0x20000e60
 8009100:	20000988 	.word	0x20000988
 8009104:	20000984 	.word	0x20000984
 8009108:	20000184 	.word	0x20000184

0800910c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10a      	bne.n	8009132 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	f383 8811 	msr	BASEPRI, r3
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <vTaskPlaceOnEventList+0x44>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3318      	adds	r3, #24
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7fe fe61 	bl	8007e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009140:	2101      	movs	r1, #1
 8009142:	6838      	ldr	r0, [r7, #0]
 8009144:	f000 fa80 	bl	8009648 <prvAddCurrentTaskToDelayedList>
}
 8009148:	bf00      	nop
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20000984 	.word	0x20000984

08009154 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10a      	bne.n	800917c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617b      	str	r3, [r7, #20]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3318      	adds	r3, #24
 8009182:	4619      	mov	r1, r3
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7fe fe18 	bl	8007dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009190:	f04f 33ff 	mov.w	r3, #4294967295
 8009194:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	68b8      	ldr	r0, [r7, #8]
 800919a:	f000 fa55 	bl	8009648 <prvAddCurrentTaskToDelayedList>
	}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20000984 	.word	0x20000984

080091ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10a      	bne.n	80091d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	3318      	adds	r3, #24
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fe49 	bl	8007e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e2:	4b1e      	ldr	r3, [pc, #120]	; (800925c <xTaskRemoveFromEventList+0xb0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d11d      	bne.n	8009226 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fe40 	bl	8007e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f8:	4b19      	ldr	r3, [pc, #100]	; (8009260 <xTaskRemoveFromEventList+0xb4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d903      	bls.n	8009208 <xTaskRemoveFromEventList+0x5c>
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	4a16      	ldr	r2, [pc, #88]	; (8009260 <xTaskRemoveFromEventList+0xb4>)
 8009206:	6013      	str	r3, [r2, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4a13      	ldr	r2, [pc, #76]	; (8009264 <xTaskRemoveFromEventList+0xb8>)
 8009216:	441a      	add	r2, r3
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	4610      	mov	r0, r2
 8009220:	f7fe fdcb 	bl	8007dba <vListInsertEnd>
 8009224:	e005      	b.n	8009232 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3318      	adds	r3, #24
 800922a:	4619      	mov	r1, r3
 800922c:	480e      	ldr	r0, [pc, #56]	; (8009268 <xTaskRemoveFromEventList+0xbc>)
 800922e:	f7fe fdc4 	bl	8007dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <xTaskRemoveFromEventList+0xc0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	429a      	cmp	r2, r3
 800923e:	d905      	bls.n	800924c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009240:	2301      	movs	r3, #1
 8009242:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <xTaskRemoveFromEventList+0xc4>)
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e001      	b.n	8009250 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800924c:	2300      	movs	r3, #0
 800924e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009250:	697b      	ldr	r3, [r7, #20]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20000e80 	.word	0x20000e80
 8009260:	20000e60 	.word	0x20000e60
 8009264:	20000988 	.word	0x20000988
 8009268:	20000e18 	.word	0x20000e18
 800926c:	20000984 	.word	0x20000984
 8009270:	20000e6c 	.word	0x20000e6c

08009274 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <vTaskInternalSetTimeOutState+0x24>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <vTaskInternalSetTimeOutState+0x28>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	605a      	str	r2, [r3, #4]
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	20000e70 	.word	0x20000e70
 800929c:	20000e5c 	.word	0x20000e5c

080092a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	613b      	str	r3, [r7, #16]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60fb      	str	r3, [r7, #12]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092e2:	f000 fe7f 	bl	8009fe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092e6:	4b1d      	ldr	r3, [pc, #116]	; (800935c <xTaskCheckForTimeOut+0xbc>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d102      	bne.n	8009306 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009300:	2300      	movs	r3, #0
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	e023      	b.n	800934e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	4b15      	ldr	r3, [pc, #84]	; (8009360 <xTaskCheckForTimeOut+0xc0>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	429a      	cmp	r2, r3
 8009310:	d007      	beq.n	8009322 <xTaskCheckForTimeOut+0x82>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	429a      	cmp	r2, r3
 800931a:	d302      	bcc.n	8009322 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800931c:	2301      	movs	r3, #1
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	e015      	b.n	800934e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	429a      	cmp	r2, r3
 800932a:	d20b      	bcs.n	8009344 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ff9b 	bl	8009274 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	e004      	b.n	800934e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800934a:	2301      	movs	r3, #1
 800934c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800934e:	f000 fe79 	bl	800a044 <vPortExitCritical>

	return xReturn;
 8009352:	69fb      	ldr	r3, [r7, #28]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3720      	adds	r7, #32
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000e5c 	.word	0x20000e5c
 8009360:	20000e70 	.word	0x20000e70

08009364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <vTaskMissedYield+0x14>)
 800936a:	2201      	movs	r2, #1
 800936c:	601a      	str	r2, [r3, #0]
}
 800936e:	bf00      	nop
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	20000e6c 	.word	0x20000e6c

0800937c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009384:	f000 f852 	bl	800942c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <prvIdleTask+0x28>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d9f9      	bls.n	8009384 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009390:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <prvIdleTask+0x2c>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093a0:	e7f0      	b.n	8009384 <prvIdleTask+0x8>
 80093a2:	bf00      	nop
 80093a4:	20000988 	.word	0x20000988
 80093a8:	e000ed04 	.word	0xe000ed04

080093ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093b2:	2300      	movs	r3, #0
 80093b4:	607b      	str	r3, [r7, #4]
 80093b6:	e00c      	b.n	80093d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4a12      	ldr	r2, [pc, #72]	; (800940c <prvInitialiseTaskLists+0x60>)
 80093c4:	4413      	add	r3, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe fcca 	bl	8007d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3301      	adds	r3, #1
 80093d0:	607b      	str	r3, [r7, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b37      	cmp	r3, #55	; 0x37
 80093d6:	d9ef      	bls.n	80093b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093d8:	480d      	ldr	r0, [pc, #52]	; (8009410 <prvInitialiseTaskLists+0x64>)
 80093da:	f7fe fcc1 	bl	8007d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093de:	480d      	ldr	r0, [pc, #52]	; (8009414 <prvInitialiseTaskLists+0x68>)
 80093e0:	f7fe fcbe 	bl	8007d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093e4:	480c      	ldr	r0, [pc, #48]	; (8009418 <prvInitialiseTaskLists+0x6c>)
 80093e6:	f7fe fcbb 	bl	8007d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ea:	480c      	ldr	r0, [pc, #48]	; (800941c <prvInitialiseTaskLists+0x70>)
 80093ec:	f7fe fcb8 	bl	8007d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093f0:	480b      	ldr	r0, [pc, #44]	; (8009420 <prvInitialiseTaskLists+0x74>)
 80093f2:	f7fe fcb5 	bl	8007d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <prvInitialiseTaskLists+0x78>)
 80093f8:	4a05      	ldr	r2, [pc, #20]	; (8009410 <prvInitialiseTaskLists+0x64>)
 80093fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093fc:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvInitialiseTaskLists+0x7c>)
 80093fe:	4a05      	ldr	r2, [pc, #20]	; (8009414 <prvInitialiseTaskLists+0x68>)
 8009400:	601a      	str	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000988 	.word	0x20000988
 8009410:	20000de8 	.word	0x20000de8
 8009414:	20000dfc 	.word	0x20000dfc
 8009418:	20000e18 	.word	0x20000e18
 800941c:	20000e2c 	.word	0x20000e2c
 8009420:	20000e44 	.word	0x20000e44
 8009424:	20000e10 	.word	0x20000e10
 8009428:	20000e14 	.word	0x20000e14

0800942c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009432:	e019      	b.n	8009468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009434:	f000 fdd6 	bl	8009fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <prvCheckTasksWaitingTermination+0x50>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fd15 	bl	8007e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800944a:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <prvCheckTasksWaitingTermination+0x54>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3b01      	subs	r3, #1
 8009450:	4a0b      	ldr	r2, [pc, #44]	; (8009480 <prvCheckTasksWaitingTermination+0x54>)
 8009452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009454:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <prvCheckTasksWaitingTermination+0x58>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3b01      	subs	r3, #1
 800945a:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <prvCheckTasksWaitingTermination+0x58>)
 800945c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800945e:	f000 fdf1 	bl	800a044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f810 	bl	8009488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009468:	4b06      	ldr	r3, [pc, #24]	; (8009484 <prvCheckTasksWaitingTermination+0x58>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e1      	bne.n	8009434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000e2c 	.word	0x20000e2c
 8009480:	20000e58 	.word	0x20000e58
 8009484:	20000e40 	.word	0x20000e40

08009488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3354      	adds	r3, #84	; 0x54
 8009494:	4618      	mov	r0, r3
 8009496:	f001 fde5 	bl	800b064 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d108      	bne.n	80094b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 ff89 	bl	800a3c0 <vPortFree>
				vPortFree( pxTCB );
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 ff86 	bl	800a3c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094b4:	e018      	b.n	80094e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d103      	bne.n	80094c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 ff7d 	bl	800a3c0 <vPortFree>
	}
 80094c6:	e00f      	b.n	80094e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d00a      	beq.n	80094e8 <prvDeleteTCB+0x60>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	60fb      	str	r3, [r7, #12]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <prvDeleteTCB+0x5e>
	}
 80094e8:	bf00      	nop
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f6:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <prvResetNextTaskUnblockTime+0x38>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009500:	4b0a      	ldr	r3, [pc, #40]	; (800952c <prvResetNextTaskUnblockTime+0x3c>)
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009508:	e008      	b.n	800951c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950a:	4b07      	ldr	r3, [pc, #28]	; (8009528 <prvResetNextTaskUnblockTime+0x38>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4a04      	ldr	r2, [pc, #16]	; (800952c <prvResetNextTaskUnblockTime+0x3c>)
 800951a:	6013      	str	r3, [r2, #0]
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	20000e10 	.word	0x20000e10
 800952c:	20000e78 	.word	0x20000e78

08009530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009536:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <xTaskGetSchedulerState+0x34>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d102      	bne.n	8009544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800953e:	2301      	movs	r3, #1
 8009540:	607b      	str	r3, [r7, #4]
 8009542:	e008      	b.n	8009556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009544:	4b08      	ldr	r3, [pc, #32]	; (8009568 <xTaskGetSchedulerState+0x38>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800954c:	2302      	movs	r3, #2
 800954e:	607b      	str	r3, [r7, #4]
 8009550:	e001      	b.n	8009556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009556:	687b      	ldr	r3, [r7, #4]
	}
 8009558:	4618      	mov	r0, r3
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	20000e64 	.word	0x20000e64
 8009568:	20000e80 	.word	0x20000e80

0800956c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009578:	2300      	movs	r3, #0
 800957a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d056      	beq.n	8009630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <xTaskPriorityDisinherit+0xd0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	429a      	cmp	r2, r3
 800958a:	d00a      	beq.n	80095a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	60fb      	str	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60bb      	str	r3, [r7, #8]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c4:	1e5a      	subs	r2, r3, #1
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d02c      	beq.n	8009630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d128      	bne.n	8009630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fc46 	bl	8007e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <xTaskPriorityDisinherit+0xd4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	429a      	cmp	r2, r3
 8009606:	d903      	bls.n	8009610 <xTaskPriorityDisinherit+0xa4>
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960c:	4a0c      	ldr	r2, [pc, #48]	; (8009640 <xTaskPriorityDisinherit+0xd4>)
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009614:	4613      	mov	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4a09      	ldr	r2, [pc, #36]	; (8009644 <xTaskPriorityDisinherit+0xd8>)
 800961e:	441a      	add	r2, r3
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	3304      	adds	r3, #4
 8009624:	4619      	mov	r1, r3
 8009626:	4610      	mov	r0, r2
 8009628:	f7fe fbc7 	bl	8007dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800962c:	2301      	movs	r3, #1
 800962e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009630:	697b      	ldr	r3, [r7, #20]
	}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000984 	.word	0x20000984
 8009640:	20000e60 	.word	0x20000e60
 8009644:	20000988 	.word	0x20000988

08009648 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009658:	4b20      	ldr	r3, [pc, #128]	; (80096dc <prvAddCurrentTaskToDelayedList+0x94>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3304      	adds	r3, #4
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe fc08 	bl	8007e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966a:	d10a      	bne.n	8009682 <prvAddCurrentTaskToDelayedList+0x3a>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009672:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <prvAddCurrentTaskToDelayedList+0x94>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3304      	adds	r3, #4
 8009678:	4619      	mov	r1, r3
 800967a:	4819      	ldr	r0, [pc, #100]	; (80096e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800967c:	f7fe fb9d 	bl	8007dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009680:	e026      	b.n	80096d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4413      	add	r3, r2
 8009688:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800968a:	4b14      	ldr	r3, [pc, #80]	; (80096dc <prvAddCurrentTaskToDelayedList+0x94>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	429a      	cmp	r2, r3
 8009698:	d209      	bcs.n	80096ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <prvAddCurrentTaskToDelayedList+0x94>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3304      	adds	r3, #4
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f7fe fbab 	bl	8007e02 <vListInsert>
}
 80096ac:	e010      	b.n	80096d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <prvAddCurrentTaskToDelayedList+0x94>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4619      	mov	r1, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	f7fe fba1 	bl	8007e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d202      	bcs.n	80096d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096ca:	4a08      	ldr	r2, [pc, #32]	; (80096ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6013      	str	r3, [r2, #0]
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000e5c 	.word	0x20000e5c
 80096dc:	20000984 	.word	0x20000984
 80096e0:	20000e44 	.word	0x20000e44
 80096e4:	20000e14 	.word	0x20000e14
 80096e8:	20000e10 	.word	0x20000e10
 80096ec:	20000e78 	.word	0x20000e78

080096f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08a      	sub	sp, #40	; 0x28
 80096f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096fa:	f000 fb07 	bl	8009d0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096fe:	4b1c      	ldr	r3, [pc, #112]	; (8009770 <xTimerCreateTimerTask+0x80>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d021      	beq.n	800974a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800970e:	1d3a      	adds	r2, r7, #4
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	f107 030c 	add.w	r3, r7, #12
 8009718:	4618      	mov	r0, r3
 800971a:	f7fe fb07 	bl	8007d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	9202      	str	r2, [sp, #8]
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	2302      	movs	r3, #2
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	2300      	movs	r3, #0
 800972e:	460a      	mov	r2, r1
 8009730:	4910      	ldr	r1, [pc, #64]	; (8009774 <xTimerCreateTimerTask+0x84>)
 8009732:	4811      	ldr	r0, [pc, #68]	; (8009778 <xTimerCreateTimerTask+0x88>)
 8009734:	f7ff f8b4 	bl	80088a0 <xTaskCreateStatic>
 8009738:	4603      	mov	r3, r0
 800973a:	4a10      	ldr	r2, [pc, #64]	; (800977c <xTimerCreateTimerTask+0x8c>)
 800973c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800973e:	4b0f      	ldr	r3, [pc, #60]	; (800977c <xTimerCreateTimerTask+0x8c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009746:	2301      	movs	r3, #1
 8009748:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	613b      	str	r3, [r7, #16]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009766:	697b      	ldr	r3, [r7, #20]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000eb4 	.word	0x20000eb4
 8009774:	0800b208 	.word	0x0800b208
 8009778:	080098b5 	.word	0x080098b5
 800977c:	20000eb8 	.word	0x20000eb8

08009780 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800978e:	2300      	movs	r3, #0
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10a      	bne.n	80097ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	623b      	str	r3, [r7, #32]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097ae:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <xTimerGenericCommand+0x98>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d02a      	beq.n	800980c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b05      	cmp	r3, #5
 80097c6:	dc18      	bgt.n	80097fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097c8:	f7ff feb2 	bl	8009530 <xTaskGetSchedulerState>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d109      	bne.n	80097e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097d2:	4b11      	ldr	r3, [pc, #68]	; (8009818 <xTimerGenericCommand+0x98>)
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	f107 0110 	add.w	r1, r7, #16
 80097da:	2300      	movs	r3, #0
 80097dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097de:	f7fe fc77 	bl	80080d0 <xQueueGenericSend>
 80097e2:	6278      	str	r0, [r7, #36]	; 0x24
 80097e4:	e012      	b.n	800980c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097e6:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <xTimerGenericCommand+0x98>)
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	f107 0110 	add.w	r1, r7, #16
 80097ee:	2300      	movs	r3, #0
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7fe fc6d 	bl	80080d0 <xQueueGenericSend>
 80097f6:	6278      	str	r0, [r7, #36]	; 0x24
 80097f8:	e008      	b.n	800980c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097fa:	4b07      	ldr	r3, [pc, #28]	; (8009818 <xTimerGenericCommand+0x98>)
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f107 0110 	add.w	r1, r7, #16
 8009802:	2300      	movs	r3, #0
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	f7fe fd61 	bl	80082cc <xQueueGenericSendFromISR>
 800980a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800980e:	4618      	mov	r0, r3
 8009810:	3728      	adds	r7, #40	; 0x28
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000eb4 	.word	0x20000eb4

0800981c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af02      	add	r7, sp, #8
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009826:	4b22      	ldr	r3, [pc, #136]	; (80098b0 <prvProcessExpiredTimer+0x94>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	3304      	adds	r3, #4
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fb1d 	bl	8007e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009840:	f003 0304 	and.w	r3, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	d022      	beq.n	800988e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	18d1      	adds	r1, r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	6978      	ldr	r0, [r7, #20]
 8009856:	f000 f8d1 	bl	80099fc <prvInsertTimerInActiveList>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01f      	beq.n	80098a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009860:	2300      	movs	r3, #0
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2300      	movs	r3, #0
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	2100      	movs	r1, #0
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	f7ff ff88 	bl	8009780 <xTimerGenericCommand>
 8009870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d113      	bne.n	80098a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	60fb      	str	r3, [r7, #12]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009894:	f023 0301 	bic.w	r3, r3, #1
 8009898:	b2da      	uxtb	r2, r3
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	6978      	ldr	r0, [r7, #20]
 80098a6:	4798      	blx	r3
}
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000eac 	.word	0x20000eac

080098b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f857 	bl	8009974 <prvGetNextExpireTime>
 80098c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4619      	mov	r1, r3
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 f803 	bl	80098d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098d2:	f000 f8d5 	bl	8009a80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098d6:	e7f1      	b.n	80098bc <prvTimerTask+0x8>

080098d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098e2:	f7ff fa39 	bl	8008d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f866 	bl	80099bc <prvSampleTimeNow>
 80098f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d130      	bne.n	800995a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10a      	bne.n	8009914 <prvProcessTimerOrBlockTask+0x3c>
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	429a      	cmp	r2, r3
 8009904:	d806      	bhi.n	8009914 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009906:	f7ff fa35 	bl	8008d74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7ff ff85 	bl	800981c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009912:	e024      	b.n	800995e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800991a:	4b13      	ldr	r3, [pc, #76]	; (8009968 <prvProcessTimerOrBlockTask+0x90>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <prvProcessTimerOrBlockTask+0x50>
 8009924:	2301      	movs	r3, #1
 8009926:	e000      	b.n	800992a <prvProcessTimerOrBlockTask+0x52>
 8009928:	2300      	movs	r3, #0
 800992a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800992c:	4b0f      	ldr	r3, [pc, #60]	; (800996c <prvProcessTimerOrBlockTask+0x94>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	4619      	mov	r1, r3
 800993a:	f7fe ff7d 	bl	8008838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800993e:	f7ff fa19 	bl	8008d74 <xTaskResumeAll>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <prvProcessTimerOrBlockTask+0x98>)
 800994a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	f3bf 8f6f 	isb	sy
}
 8009958:	e001      	b.n	800995e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800995a:	f7ff fa0b 	bl	8008d74 <xTaskResumeAll>
}
 800995e:	bf00      	nop
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000eb0 	.word	0x20000eb0
 800996c:	20000eb4 	.word	0x20000eb4
 8009970:	e000ed04 	.word	0xe000ed04

08009974 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800997c:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <prvGetNextExpireTime+0x44>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <prvGetNextExpireTime+0x16>
 8009986:	2201      	movs	r2, #1
 8009988:	e000      	b.n	800998c <prvGetNextExpireTime+0x18>
 800998a:	2200      	movs	r2, #0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d105      	bne.n	80099a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009998:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <prvGetNextExpireTime+0x44>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	e001      	b.n	80099a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099a8:	68fb      	ldr	r3, [r7, #12]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	20000eac 	.word	0x20000eac

080099bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099c4:	f7ff fa74 	bl	8008eb0 <xTaskGetTickCount>
 80099c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099ca:	4b0b      	ldr	r3, [pc, #44]	; (80099f8 <prvSampleTimeNow+0x3c>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d205      	bcs.n	80099e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099d4:	f000 f936 	bl	8009c44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e002      	b.n	80099e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099e6:	4a04      	ldr	r2, [pc, #16]	; (80099f8 <prvSampleTimeNow+0x3c>)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099ec:	68fb      	ldr	r3, [r7, #12]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000ebc 	.word	0x20000ebc

080099fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d812      	bhi.n	8009a48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d302      	bcc.n	8009a36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a30:	2301      	movs	r3, #1
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e01b      	b.n	8009a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a36:	4b10      	ldr	r3, [pc, #64]	; (8009a78 <prvInsertTimerInActiveList+0x7c>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7fe f9de 	bl	8007e02 <vListInsert>
 8009a46:	e012      	b.n	8009a6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d206      	bcs.n	8009a5e <prvInsertTimerInActiveList+0x62>
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d302      	bcc.n	8009a5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	e007      	b.n	8009a6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <prvInsertTimerInActiveList+0x80>)
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3304      	adds	r3, #4
 8009a66:	4619      	mov	r1, r3
 8009a68:	4610      	mov	r0, r2
 8009a6a:	f7fe f9ca 	bl	8007e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a6e:	697b      	ldr	r3, [r7, #20]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20000eb0 	.word	0x20000eb0
 8009a7c:	20000eac 	.word	0x20000eac

08009a80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08e      	sub	sp, #56	; 0x38
 8009a84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a86:	e0ca      	b.n	8009c1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	da18      	bge.n	8009ac0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	3304      	adds	r3, #4
 8009a92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	61fb      	str	r3, [r7, #28]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab6:	6850      	ldr	r0, [r2, #4]
 8009ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aba:	6892      	ldr	r2, [r2, #8]
 8009abc:	4611      	mov	r1, r2
 8009abe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f2c0 80aa 	blt.w	8009c1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fe f9cb 	bl	8007e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ade:	463b      	mov	r3, r7
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff ff6b 	bl	80099bc <prvSampleTimeNow>
 8009ae6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b09      	cmp	r3, #9
 8009aec:	f200 8097 	bhi.w	8009c1e <prvProcessReceivedCommands+0x19e>
 8009af0:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <prvProcessReceivedCommands+0x78>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b21 	.word	0x08009b21
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b21 	.word	0x08009b21
 8009b04:	08009b95 	.word	0x08009b95
 8009b08:	08009ba9 	.word	0x08009ba9
 8009b0c:	08009bf3 	.word	0x08009bf3
 8009b10:	08009b21 	.word	0x08009b21
 8009b14:	08009b21 	.word	0x08009b21
 8009b18:	08009b95 	.word	0x08009b95
 8009b1c:	08009ba9 	.word	0x08009ba9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	18d1      	adds	r1, r2, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b40:	f7ff ff5c 	bl	80099fc <prvInsertTimerInActiveList>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d069      	beq.n	8009c1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d05e      	beq.n	8009c1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	441a      	add	r2, r3
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b72:	f7ff fe05 	bl	8009780 <xTimerGenericCommand>
 8009b76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d14f      	bne.n	8009c1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	61bb      	str	r3, [r7, #24]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b9a:	f023 0301 	bic.w	r3, r3, #1
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ba6:	e03a      	b.n	8009c1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bae:	f043 0301 	orr.w	r3, r3, #1
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	617b      	str	r3, [r7, #20]
}
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	18d1      	adds	r1, r2, r3
 8009be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bec:	f7ff ff06 	bl	80099fc <prvInsertTimerInActiveList>
					break;
 8009bf0:	e015      	b.n	8009c1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c02:	f000 fbdd 	bl	800a3c0 <vPortFree>
 8009c06:	e00a      	b.n	8009c1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c1a:	e000      	b.n	8009c1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009c1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c1e:	4b08      	ldr	r3, [pc, #32]	; (8009c40 <prvProcessReceivedCommands+0x1c0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	1d39      	adds	r1, r7, #4
 8009c24:	2200      	movs	r2, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fe fbec 	bl	8008404 <xQueueReceive>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f47f af2a 	bne.w	8009a88 <prvProcessReceivedCommands+0x8>
	}
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	3730      	adds	r7, #48	; 0x30
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000eb4 	.word	0x20000eb4

08009c44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c4a:	e048      	b.n	8009cde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c4c:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c56:	4b2b      	ldr	r3, [pc, #172]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7fe f905 	bl	8007e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d02e      	beq.n	8009cde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	4413      	add	r3, r2
 8009c88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d90e      	bls.n	8009cb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c9e:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f7fe f8aa 	bl	8007e02 <vListInsert>
 8009cae:	e016      	b.n	8009cde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	2100      	movs	r1, #0
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff fd60 	bl	8009780 <xTimerGenericCommand>
 8009cc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10a      	bne.n	8009cde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	603b      	str	r3, [r7, #0]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1b1      	bne.n	8009c4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cee:	4b06      	ldr	r3, [pc, #24]	; (8009d08 <prvSwitchTimerLists+0xc4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a04      	ldr	r2, [pc, #16]	; (8009d04 <prvSwitchTimerLists+0xc0>)
 8009cf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cf6:	4a04      	ldr	r2, [pc, #16]	; (8009d08 <prvSwitchTimerLists+0xc4>)
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	6013      	str	r3, [r2, #0]
}
 8009cfc:	bf00      	nop
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000eac 	.word	0x20000eac
 8009d08:	20000eb0 	.word	0x20000eb0

08009d0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d12:	f000 f967 	bl	8009fe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d16:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d120      	bne.n	8009d60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d1e:	4814      	ldr	r0, [pc, #80]	; (8009d70 <prvCheckForValidListAndQueue+0x64>)
 8009d20:	f7fe f81e 	bl	8007d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d24:	4813      	ldr	r0, [pc, #76]	; (8009d74 <prvCheckForValidListAndQueue+0x68>)
 8009d26:	f7fe f81b 	bl	8007d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d2a:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <prvCheckForValidListAndQueue+0x6c>)
 8009d2c:	4a10      	ldr	r2, [pc, #64]	; (8009d70 <prvCheckForValidListAndQueue+0x64>)
 8009d2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d30:	4b12      	ldr	r3, [pc, #72]	; (8009d7c <prvCheckForValidListAndQueue+0x70>)
 8009d32:	4a10      	ldr	r2, [pc, #64]	; (8009d74 <prvCheckForValidListAndQueue+0x68>)
 8009d34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d36:	2300      	movs	r3, #0
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4b11      	ldr	r3, [pc, #68]	; (8009d80 <prvCheckForValidListAndQueue+0x74>)
 8009d3c:	4a11      	ldr	r2, [pc, #68]	; (8009d84 <prvCheckForValidListAndQueue+0x78>)
 8009d3e:	2110      	movs	r1, #16
 8009d40:	200a      	movs	r0, #10
 8009d42:	f7fe f929 	bl	8007f98 <xQueueGenericCreateStatic>
 8009d46:	4603      	mov	r3, r0
 8009d48:	4a08      	ldr	r2, [pc, #32]	; (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d4c:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <prvCheckForValidListAndQueue+0x60>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	490b      	ldr	r1, [pc, #44]	; (8009d88 <prvCheckForValidListAndQueue+0x7c>)
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe fd42 	bl	80087e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d60:	f000 f970 	bl	800a044 <vPortExitCritical>
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000eb4 	.word	0x20000eb4
 8009d70:	20000e84 	.word	0x20000e84
 8009d74:	20000e98 	.word	0x20000e98
 8009d78:	20000eac 	.word	0x20000eac
 8009d7c:	20000eb0 	.word	0x20000eb0
 8009d80:	20000f60 	.word	0x20000f60
 8009d84:	20000ec0 	.word	0x20000ec0
 8009d88:	0800b210 	.word	0x0800b210

08009d8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3b04      	subs	r3, #4
 8009d9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3b04      	subs	r3, #4
 8009daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	3b04      	subs	r3, #4
 8009dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dbc:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <pxPortInitialiseStack+0x64>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	3b14      	subs	r3, #20
 8009dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3b04      	subs	r3, #4
 8009dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f06f 0202 	mvn.w	r2, #2
 8009dda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3b20      	subs	r3, #32
 8009de0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009de2:	68fb      	ldr	r3, [r7, #12]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	08009df5 	.word	0x08009df5

08009df4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <prvTaskExitError+0x54>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e06:	d00a      	beq.n	8009e1e <prvTaskExitError+0x2a>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <prvTaskExitError+0x28>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60bb      	str	r3, [r7, #8]
}
 8009e30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e32:	bf00      	nop
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0fc      	beq.n	8009e34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	2000011c 	.word	0x2000011c
 8009e4c:	00000000 	.word	0x00000000

08009e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <pxCurrentTCBConst2>)
 8009e52:	6819      	ldr	r1, [r3, #0]
 8009e54:	6808      	ldr	r0, [r1, #0]
 8009e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5a:	f380 8809 	msr	PSP, r0
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8811 	msr	BASEPRI, r0
 8009e6a:	4770      	bx	lr
 8009e6c:	f3af 8000 	nop.w

08009e70 <pxCurrentTCBConst2>:
 8009e70:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop

08009e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e78:	4808      	ldr	r0, [pc, #32]	; (8009e9c <prvPortStartFirstTask+0x24>)
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	6800      	ldr	r0, [r0, #0]
 8009e7e:	f380 8808 	msr	MSP, r0
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8814 	msr	CONTROL, r0
 8009e8a:	b662      	cpsie	i
 8009e8c:	b661      	cpsie	f
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	df00      	svc	0
 8009e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e9a:	bf00      	nop
 8009e9c:	e000ed08 	.word	0xe000ed08

08009ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ea6:	4b46      	ldr	r3, [pc, #280]	; (8009fc0 <xPortStartScheduler+0x120>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a46      	ldr	r2, [pc, #280]	; (8009fc4 <xPortStartScheduler+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d10a      	bne.n	8009ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	613b      	str	r3, [r7, #16]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ec6:	4b3e      	ldr	r3, [pc, #248]	; (8009fc0 <xPortStartScheduler+0x120>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a3f      	ldr	r2, [pc, #252]	; (8009fc8 <xPortStartScheduler+0x128>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d10a      	bne.n	8009ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ee6:	4b39      	ldr	r3, [pc, #228]	; (8009fcc <xPortStartScheduler+0x12c>)
 8009ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	22ff      	movs	r2, #255	; 0xff
 8009ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <xPortStartScheduler+0x130>)
 8009f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f0e:	4b31      	ldr	r3, [pc, #196]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f10:	2207      	movs	r2, #7
 8009f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f14:	e009      	b.n	8009f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009f16:	4b2f      	ldr	r3, [pc, #188]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	4a2d      	ldr	r2, [pc, #180]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f32:	2b80      	cmp	r3, #128	; 0x80
 8009f34:	d0ef      	beq.n	8009f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f36:	4b27      	ldr	r3, [pc, #156]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f1c3 0307 	rsb	r3, r3, #7
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d00a      	beq.n	8009f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60bb      	str	r3, [r7, #8]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f58:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	021b      	lsls	r3, r3, #8
 8009f5e:	4a1d      	ldr	r2, [pc, #116]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f6a:	4a1a      	ldr	r2, [pc, #104]	; (8009fd4 <xPortStartScheduler+0x134>)
 8009f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f76:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a17      	ldr	r2, [pc, #92]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f82:	4b15      	ldr	r3, [pc, #84]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <xPortStartScheduler+0x138>)
 8009f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f8e:	f000 f8dd 	bl	800a14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <xPortStartScheduler+0x13c>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f98:	f000 f8fc 	bl	800a194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f9c:	4b10      	ldr	r3, [pc, #64]	; (8009fe0 <xPortStartScheduler+0x140>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0f      	ldr	r2, [pc, #60]	; (8009fe0 <xPortStartScheduler+0x140>)
 8009fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fa8:	f7ff ff66 	bl	8009e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fac:	f7ff f84a 	bl	8009044 <vTaskSwitchContext>
	prvTaskExitError();
 8009fb0:	f7ff ff20 	bl	8009df4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3718      	adds	r7, #24
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	e000ed00 	.word	0xe000ed00
 8009fc4:	410fc271 	.word	0x410fc271
 8009fc8:	410fc270 	.word	0x410fc270
 8009fcc:	e000e400 	.word	0xe000e400
 8009fd0:	20000fb0 	.word	0x20000fb0
 8009fd4:	20000fb4 	.word	0x20000fb4
 8009fd8:	e000ed20 	.word	0xe000ed20
 8009fdc:	2000011c 	.word	0x2000011c
 8009fe0:	e000ef34 	.word	0xe000ef34

08009fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	607b      	str	r3, [r7, #4]
}
 8009ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <vPortEnterCritical+0x58>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	4a0d      	ldr	r2, [pc, #52]	; (800a03c <vPortEnterCritical+0x58>)
 800a006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a008:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <vPortEnterCritical+0x58>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d10f      	bne.n	800a030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <vPortEnterCritical+0x5c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <vPortEnterCritical+0x4c>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	f383 8811 	msr	BASEPRI, r3
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	f3bf 8f4f 	dsb	sy
 800a02a:	603b      	str	r3, [r7, #0]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <vPortEnterCritical+0x4a>
	}
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	2000011c 	.word	0x2000011c
 800a040:	e000ed04 	.word	0xe000ed04

0800a044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a04a:	4b12      	ldr	r3, [pc, #72]	; (800a094 <vPortExitCritical+0x50>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <vPortExitCritical+0x24>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	607b      	str	r3, [r7, #4]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <vPortExitCritical+0x50>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4a09      	ldr	r2, [pc, #36]	; (800a094 <vPortExitCritical+0x50>)
 800a070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <vPortExitCritical+0x50>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d105      	bne.n	800a086 <vPortExitCritical+0x42>
 800a07a:	2300      	movs	r3, #0
 800a07c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	f383 8811 	msr	BASEPRI, r3
}
 800a084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000011c 	.word	0x2000011c
	...

0800a0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0a0:	f3ef 8009 	mrs	r0, PSP
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4b15      	ldr	r3, [pc, #84]	; (800a100 <pxCurrentTCBConst>)
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	f01e 0f10 	tst.w	lr, #16
 800a0b0:	bf08      	it	eq
 800a0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ba:	6010      	str	r0, [r2, #0]
 800a0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0c4:	f380 8811 	msr	BASEPRI, r0
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f7fe ffb8 	bl	8009044 <vTaskSwitchContext>
 800a0d4:	f04f 0000 	mov.w	r0, #0
 800a0d8:	f380 8811 	msr	BASEPRI, r0
 800a0dc:	bc09      	pop	{r0, r3}
 800a0de:	6819      	ldr	r1, [r3, #0]
 800a0e0:	6808      	ldr	r0, [r1, #0]
 800a0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e6:	f01e 0f10 	tst.w	lr, #16
 800a0ea:	bf08      	it	eq
 800a0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0f0:	f380 8809 	msr	PSP, r0
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	f3af 8000 	nop.w

0800a100 <pxCurrentTCBConst>:
 800a100:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop

0800a108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a122:	f7fe fed5 	bl	8008ed0 <xTaskIncrementTick>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d003      	beq.n	800a134 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <xPortSysTickHandler+0x40>)
 800a12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	f383 8811 	msr	BASEPRI, r3
}
 800a13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a150:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a152:	2200      	movs	r2, #0
 800a154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a156:	4b0b      	ldr	r3, [pc, #44]	; (800a184 <vPortSetupTimerInterrupt+0x38>)
 800a158:	2200      	movs	r2, #0
 800a15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a15c:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <vPortSetupTimerInterrupt+0x3c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <vPortSetupTimerInterrupt+0x40>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	099b      	lsrs	r3, r3, #6
 800a168:	4a09      	ldr	r2, [pc, #36]	; (800a190 <vPortSetupTimerInterrupt+0x44>)
 800a16a:	3b01      	subs	r3, #1
 800a16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a16e:	4b04      	ldr	r3, [pc, #16]	; (800a180 <vPortSetupTimerInterrupt+0x34>)
 800a170:	2207      	movs	r2, #7
 800a172:	601a      	str	r2, [r3, #0]
}
 800a174:	bf00      	nop
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	e000e010 	.word	0xe000e010
 800a184:	e000e018 	.word	0xe000e018
 800a188:	20000000 	.word	0x20000000
 800a18c:	10624dd3 	.word	0x10624dd3
 800a190:	e000e014 	.word	0xe000e014

0800a194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a1a4 <vPortEnableVFP+0x10>
 800a198:	6801      	ldr	r1, [r0, #0]
 800a19a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a19e:	6001      	str	r1, [r0, #0]
 800a1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1a2:	bf00      	nop
 800a1a4:	e000ed88 	.word	0xe000ed88

0800a1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1ae:	f3ef 8305 	mrs	r3, IPSR
 800a1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d914      	bls.n	800a1e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ba:	4a17      	ldr	r2, [pc, #92]	; (800a218 <vPortValidateInterruptPriority+0x70>)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1c4:	4b15      	ldr	r3, [pc, #84]	; (800a21c <vPortValidateInterruptPriority+0x74>)
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	7afa      	ldrb	r2, [r7, #11]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d20a      	bcs.n	800a1e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	607b      	str	r3, [r7, #4]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	; (800a220 <vPortValidateInterruptPriority+0x78>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1ec:	4b0d      	ldr	r3, [pc, #52]	; (800a224 <vPortValidateInterruptPriority+0x7c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d90a      	bls.n	800a20a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	603b      	str	r3, [r7, #0]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <vPortValidateInterruptPriority+0x60>
	}
 800a20a:	bf00      	nop
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	e000e3f0 	.word	0xe000e3f0
 800a21c:	20000fb0 	.word	0x20000fb0
 800a220:	e000ed0c 	.word	0xe000ed0c
 800a224:	20000fb4 	.word	0x20000fb4

0800a228 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08a      	sub	sp, #40	; 0x28
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a230:	2300      	movs	r3, #0
 800a232:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a234:	f7fe fd90 	bl	8008d58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a238:	4b5b      	ldr	r3, [pc, #364]	; (800a3a8 <pvPortMalloc+0x180>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a240:	f000 f920 	bl	800a484 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a244:	4b59      	ldr	r3, [pc, #356]	; (800a3ac <pvPortMalloc+0x184>)
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f040 8093 	bne.w	800a378 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01d      	beq.n	800a294 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a258:	2208      	movs	r2, #8
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4413      	add	r3, r2
 800a25e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b00      	cmp	r3, #0
 800a268:	d014      	beq.n	800a294 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f023 0307 	bic.w	r3, r3, #7
 800a270:	3308      	adds	r3, #8
 800a272:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <pvPortMalloc+0x6c>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	617b      	str	r3, [r7, #20]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d06e      	beq.n	800a378 <pvPortMalloc+0x150>
 800a29a:	4b45      	ldr	r3, [pc, #276]	; (800a3b0 <pvPortMalloc+0x188>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d869      	bhi.n	800a378 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2a4:	4b43      	ldr	r3, [pc, #268]	; (800a3b4 <pvPortMalloc+0x18c>)
 800a2a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2a8:	4b42      	ldr	r3, [pc, #264]	; (800a3b4 <pvPortMalloc+0x18c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ae:	e004      	b.n	800a2ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d903      	bls.n	800a2cc <pvPortMalloc+0xa4>
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1f1      	bne.n	800a2b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2cc:	4b36      	ldr	r3, [pc, #216]	; (800a3a8 <pvPortMalloc+0x180>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d050      	beq.n	800a378 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2208      	movs	r2, #8
 800a2dc:	4413      	add	r3, r2
 800a2de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	1ad2      	subs	r2, r2, r3
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	005b      	lsls	r3, r3, #1
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d91f      	bls.n	800a338 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <pvPortMalloc+0xf8>
	__asm volatile
 800a30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	613b      	str	r3, [r7, #16]
}
 800a31c:	bf00      	nop
 800a31e:	e7fe      	b.n	800a31e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a332:	69b8      	ldr	r0, [r7, #24]
 800a334:	f000 f908 	bl	800a548 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a338:	4b1d      	ldr	r3, [pc, #116]	; (800a3b0 <pvPortMalloc+0x188>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	4a1b      	ldr	r2, [pc, #108]	; (800a3b0 <pvPortMalloc+0x188>)
 800a344:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a346:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <pvPortMalloc+0x188>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <pvPortMalloc+0x190>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d203      	bcs.n	800a35a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a352:	4b17      	ldr	r3, [pc, #92]	; (800a3b0 <pvPortMalloc+0x188>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a18      	ldr	r2, [pc, #96]	; (800a3b8 <pvPortMalloc+0x190>)
 800a358:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <pvPortMalloc+0x184>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	431a      	orrs	r2, r3
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	2200      	movs	r2, #0
 800a36c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a36e:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <pvPortMalloc+0x194>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3301      	adds	r3, #1
 800a374:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <pvPortMalloc+0x194>)
 800a376:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a378:	f7fe fcfc 	bl	8008d74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <pvPortMalloc+0x174>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	60fb      	str	r3, [r7, #12]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <pvPortMalloc+0x172>
	return pvReturn;
 800a39c:	69fb      	ldr	r3, [r7, #28]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3728      	adds	r7, #40	; 0x28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	20004bc0 	.word	0x20004bc0
 800a3ac:	20004bd4 	.word	0x20004bd4
 800a3b0:	20004bc4 	.word	0x20004bc4
 800a3b4:	20004bb8 	.word	0x20004bb8
 800a3b8:	20004bc8 	.word	0x20004bc8
 800a3bc:	20004bcc 	.word	0x20004bcc

0800a3c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d04d      	beq.n	800a46e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3d2:	2308      	movs	r3, #8
 800a3d4:	425b      	negs	r3, r3
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	4413      	add	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	685a      	ldr	r2, [r3, #4]
 800a3e4:	4b24      	ldr	r3, [pc, #144]	; (800a478 <vPortFree+0xb8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10a      	bne.n	800a404 <vPortFree+0x44>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	60fb      	str	r3, [r7, #12]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <vPortFree+0x62>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	60bb      	str	r3, [r7, #8]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	4b14      	ldr	r3, [pc, #80]	; (800a478 <vPortFree+0xb8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4013      	ands	r3, r2
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d01e      	beq.n	800a46e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d11a      	bne.n	800a46e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b0e      	ldr	r3, [pc, #56]	; (800a478 <vPortFree+0xb8>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	43db      	mvns	r3, r3
 800a442:	401a      	ands	r2, r3
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a448:	f7fe fc86 	bl	8008d58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <vPortFree+0xbc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4413      	add	r3, r2
 800a456:	4a09      	ldr	r2, [pc, #36]	; (800a47c <vPortFree+0xbc>)
 800a458:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a45a:	6938      	ldr	r0, [r7, #16]
 800a45c:	f000 f874 	bl	800a548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <vPortFree+0xc0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	4a06      	ldr	r2, [pc, #24]	; (800a480 <vPortFree+0xc0>)
 800a468:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a46a:	f7fe fc83 	bl	8008d74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a46e:	bf00      	nop
 800a470:	3718      	adds	r7, #24
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20004bd4 	.word	0x20004bd4
 800a47c:	20004bc4 	.word	0x20004bc4
 800a480:	20004bd0 	.word	0x20004bd0

0800a484 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a48a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a48e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a490:	4b27      	ldr	r3, [pc, #156]	; (800a530 <prvHeapInit+0xac>)
 800a492:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f003 0307 	and.w	r3, r3, #7
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00c      	beq.n	800a4b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3307      	adds	r3, #7
 800a4a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 0307 	bic.w	r3, r3, #7
 800a4aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	4a1f      	ldr	r2, [pc, #124]	; (800a530 <prvHeapInit+0xac>)
 800a4b4:	4413      	add	r3, r2
 800a4b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4bc:	4a1d      	ldr	r2, [pc, #116]	; (800a534 <prvHeapInit+0xb0>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4c2:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <prvHeapInit+0xb0>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0307 	bic.w	r3, r3, #7
 800a4de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4a15      	ldr	r2, [pc, #84]	; (800a538 <prvHeapInit+0xb4>)
 800a4e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4e6:	4b14      	ldr	r3, [pc, #80]	; (800a538 <prvHeapInit+0xb4>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4ee:	4b12      	ldr	r3, [pc, #72]	; (800a538 <prvHeapInit+0xb4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	1ad2      	subs	r2, r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a504:	4b0c      	ldr	r3, [pc, #48]	; (800a538 <prvHeapInit+0xb4>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	4a0a      	ldr	r2, [pc, #40]	; (800a53c <prvHeapInit+0xb8>)
 800a512:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	4a09      	ldr	r2, [pc, #36]	; (800a540 <prvHeapInit+0xbc>)
 800a51a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <prvHeapInit+0xc0>)
 800a51e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a522:	601a      	str	r2, [r3, #0]
}
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	20000fb8 	.word	0x20000fb8
 800a534:	20004bb8 	.word	0x20004bb8
 800a538:	20004bc0 	.word	0x20004bc0
 800a53c:	20004bc8 	.word	0x20004bc8
 800a540:	20004bc4 	.word	0x20004bc4
 800a544:	20004bd4 	.word	0x20004bd4

0800a548 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a550:	4b28      	ldr	r3, [pc, #160]	; (800a5f4 <prvInsertBlockIntoFreeList+0xac>)
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	e002      	b.n	800a55c <prvInsertBlockIntoFreeList+0x14>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	429a      	cmp	r2, r3
 800a564:	d8f7      	bhi.n	800a556 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	4413      	add	r3, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d108      	bne.n	800a58a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	441a      	add	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	441a      	add	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d118      	bne.n	800a5d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d00d      	beq.n	800a5c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	441a      	add	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	e008      	b.n	800a5d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5c6:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e003      	b.n	800a5d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d002      	beq.n	800a5e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20004bb8 	.word	0x20004bb8
 800a5f8:	20004bc0 	.word	0x20004bc0

0800a5fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a600:	2200      	movs	r2, #0
 800a602:	4912      	ldr	r1, [pc, #72]	; (800a64c <MX_USB_DEVICE_Init+0x50>)
 800a604:	4812      	ldr	r0, [pc, #72]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a606:	f7fc f8d1 	bl	80067ac <USBD_Init>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a610:	f7f6 fb8a 	bl	8000d28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a614:	490f      	ldr	r1, [pc, #60]	; (800a654 <MX_USB_DEVICE_Init+0x58>)
 800a616:	480e      	ldr	r0, [pc, #56]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a618:	f7fc f8f8 	bl	800680c <USBD_RegisterClass>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a622:	f7f6 fb81 	bl	8000d28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a626:	490c      	ldr	r1, [pc, #48]	; (800a658 <MX_USB_DEVICE_Init+0x5c>)
 800a628:	4809      	ldr	r0, [pc, #36]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a62a:	f7fc f849 	bl	80066c0 <USBD_CDC_RegisterInterface>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a634:	f7f6 fb78 	bl	8000d28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a63a:	f7fc f90e 	bl	800685a <USBD_Start>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a644:	f7f6 fb70 	bl	8000d28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a648:	bf00      	nop
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000134 	.word	0x20000134
 800a650:	20004f68 	.word	0x20004f68
 800a654:	20000018 	.word	0x20000018
 800a658:	20000120 	.word	0x20000120

0800a65c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a660:	2200      	movs	r2, #0
 800a662:	4905      	ldr	r1, [pc, #20]	; (800a678 <CDC_Init_FS+0x1c>)
 800a664:	4805      	ldr	r0, [pc, #20]	; (800a67c <CDC_Init_FS+0x20>)
 800a666:	f7fc f840 	bl	80066ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a66a:	4905      	ldr	r1, [pc, #20]	; (800a680 <CDC_Init_FS+0x24>)
 800a66c:	4803      	ldr	r0, [pc, #12]	; (800a67c <CDC_Init_FS+0x20>)
 800a66e:	f7fc f85a 	bl	8006726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a672:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a674:	4618      	mov	r0, r3
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20005a38 	.word	0x20005a38
 800a67c:	20004f68 	.word	0x20004f68
 800a680:	20005238 	.word	0x20005238

0800a684 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a688:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	71fb      	strb	r3, [r7, #7]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b23      	cmp	r3, #35	; 0x23
 800a6a8:	d84a      	bhi.n	800a740 <CDC_Control_FS+0xac>
 800a6aa:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <CDC_Control_FS+0x1c>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a741 	.word	0x0800a741
 800a6b4:	0800a741 	.word	0x0800a741
 800a6b8:	0800a741 	.word	0x0800a741
 800a6bc:	0800a741 	.word	0x0800a741
 800a6c0:	0800a741 	.word	0x0800a741
 800a6c4:	0800a741 	.word	0x0800a741
 800a6c8:	0800a741 	.word	0x0800a741
 800a6cc:	0800a741 	.word	0x0800a741
 800a6d0:	0800a741 	.word	0x0800a741
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a741 	.word	0x0800a741
 800a6e0:	0800a741 	.word	0x0800a741
 800a6e4:	0800a741 	.word	0x0800a741
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a741 	.word	0x0800a741
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a741 	.word	0x0800a741
 800a700:	0800a741 	.word	0x0800a741
 800a704:	0800a741 	.word	0x0800a741
 800a708:	0800a741 	.word	0x0800a741
 800a70c:	0800a741 	.word	0x0800a741
 800a710:	0800a741 	.word	0x0800a741
 800a714:	0800a741 	.word	0x0800a741
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a741 	.word	0x0800a741
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a741 	.word	0x0800a741
 800a738:	0800a741 	.word	0x0800a741
 800a73c:	0800a741 	.word	0x0800a741
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a740:	bf00      	nop
  }

  return (USBD_OK);
 800a742:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4805      	ldr	r0, [pc, #20]	; (800a774 <CDC_Receive_FS+0x24>)
 800a75e:	f7fb ffe2 	bl	8006726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a762:	4804      	ldr	r0, [pc, #16]	; (800a774 <CDC_Receive_FS+0x24>)
 800a764:	f7fb fff8 	bl	8006758 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20004f68 	.word	0x20004f68

0800a778 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	4613      	mov	r3, r2
 800a784:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a78a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6039      	str	r1, [r7, #0]
 800a7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2212      	movs	r2, #18
 800a7ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7ae:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	20000150 	.word	0x20000150

0800a7c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	6039      	str	r1, [r7, #0]
 800a7ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2204      	movs	r2, #4
 800a7d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7d2:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000164 	.word	0x20000164

0800a7e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7f0:	79fb      	ldrb	r3, [r7, #7]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d105      	bne.n	800a802 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	4907      	ldr	r1, [pc, #28]	; (800a818 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7fa:	4808      	ldr	r0, [pc, #32]	; (800a81c <USBD_FS_ProductStrDescriptor+0x38>)
 800a7fc:	f7fd f85f 	bl	80078be <USBD_GetString>
 800a800:	e004      	b.n	800a80c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	4904      	ldr	r1, [pc, #16]	; (800a818 <USBD_FS_ProductStrDescriptor+0x34>)
 800a806:	4805      	ldr	r0, [pc, #20]	; (800a81c <USBD_FS_ProductStrDescriptor+0x38>)
 800a808:	f7fd f859 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20006238 	.word	0x20006238
 800a81c:	0800b218 	.word	0x0800b218

0800a820 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	6039      	str	r1, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	4904      	ldr	r1, [pc, #16]	; (800a840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a830:	4804      	ldr	r0, [pc, #16]	; (800a844 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a832:	f7fd f844 	bl	80078be <USBD_GetString>
  return USBD_StrDesc;
 800a836:	4b02      	ldr	r3, [pc, #8]	; (800a840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20006238 	.word	0x20006238
 800a844:	0800b230 	.word	0x0800b230

0800a848 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	221a      	movs	r2, #26
 800a858:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a85a:	f000 f843 	bl	800a8e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a85e:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000168 	.word	0x20000168

0800a86c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	6039      	str	r1, [r7, #0]
 800a876:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	4907      	ldr	r1, [pc, #28]	; (800a8a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a882:	4808      	ldr	r0, [pc, #32]	; (800a8a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a884:	f7fd f81b 	bl	80078be <USBD_GetString>
 800a888:	e004      	b.n	800a894 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	4904      	ldr	r1, [pc, #16]	; (800a8a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a88e:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a890:	f7fd f815 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 800a894:	4b02      	ldr	r3, [pc, #8]	; (800a8a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20006238 	.word	0x20006238
 800a8a4:	0800b244 	.word	0x0800b244

0800a8a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6039      	str	r1, [r7, #0]
 800a8b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d105      	bne.n	800a8c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	4907      	ldr	r1, [pc, #28]	; (800a8dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8be:	4808      	ldr	r0, [pc, #32]	; (800a8e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8c0:	f7fc fffd 	bl	80078be <USBD_GetString>
 800a8c4:	e004      	b.n	800a8d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	4904      	ldr	r1, [pc, #16]	; (800a8dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ca:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8cc:	f7fc fff7 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20006238 	.word	0x20006238
 800a8e0:	0800b250 	.word	0x0800b250

0800a8e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8ea:	4b0f      	ldr	r3, [pc, #60]	; (800a928 <Get_SerialNum+0x44>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <Get_SerialNum+0x48>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <Get_SerialNum+0x4c>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4413      	add	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d009      	beq.n	800a91e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a90a:	2208      	movs	r2, #8
 800a90c:	4909      	ldr	r1, [pc, #36]	; (800a934 <Get_SerialNum+0x50>)
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 f814 	bl	800a93c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a914:	2204      	movs	r2, #4
 800a916:	4908      	ldr	r1, [pc, #32]	; (800a938 <Get_SerialNum+0x54>)
 800a918:	68b8      	ldr	r0, [r7, #8]
 800a91a:	f000 f80f 	bl	800a93c <IntToUnicode>
  }
}
 800a91e:	bf00      	nop
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	1fff7a10 	.word	0x1fff7a10
 800a92c:	1fff7a14 	.word	0x1fff7a14
 800a930:	1fff7a18 	.word	0x1fff7a18
 800a934:	2000016a 	.word	0x2000016a
 800a938:	2000017a 	.word	0x2000017a

0800a93c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	4613      	mov	r3, r2
 800a948:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a94e:	2300      	movs	r3, #0
 800a950:	75fb      	strb	r3, [r7, #23]
 800a952:	e027      	b.n	800a9a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	0f1b      	lsrs	r3, r3, #28
 800a958:	2b09      	cmp	r3, #9
 800a95a:	d80b      	bhi.n	800a974 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	0f1b      	lsrs	r3, r3, #28
 800a960:	b2da      	uxtb	r2, r3
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	4619      	mov	r1, r3
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	440b      	add	r3, r1
 800a96c:	3230      	adds	r2, #48	; 0x30
 800a96e:	b2d2      	uxtb	r2, r2
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	e00a      	b.n	800a98a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	0f1b      	lsrs	r3, r3, #28
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4619      	mov	r1, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	440b      	add	r3, r1
 800a984:	3237      	adds	r2, #55	; 0x37
 800a986:	b2d2      	uxtb	r2, r2
 800a988:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	011b      	lsls	r3, r3, #4
 800a98e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	3301      	adds	r3, #1
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	4413      	add	r3, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a99e:	7dfb      	ldrb	r3, [r7, #23]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
 800a9a4:	7dfa      	ldrb	r2, [r7, #23]
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d3d3      	bcc.n	800a954 <IntToUnicode+0x18>
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
 800a9b0:	371c      	adds	r7, #28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
	...

0800a9bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b08a      	sub	sp, #40	; 0x28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c4:	f107 0314 	add.w	r3, r7, #20
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	605a      	str	r2, [r3, #4]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	60da      	str	r2, [r3, #12]
 800a9d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9dc:	d13a      	bne.n	800aa54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9de:	2300      	movs	r3, #0
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	4b1e      	ldr	r3, [pc, #120]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800a9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e6:	4a1d      	ldr	r2, [pc, #116]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800a9e8:	f043 0301 	orr.w	r3, r3, #1
 800a9ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a9ee:	4b1b      	ldr	r3, [pc, #108]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a9fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa00:	2302      	movs	r3, #2
 800aa02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa0c:	230a      	movs	r3, #10
 800aa0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa10:	f107 0314 	add.w	r3, r7, #20
 800aa14:	4619      	mov	r1, r3
 800aa16:	4812      	ldr	r0, [pc, #72]	; (800aa60 <HAL_PCD_MspInit+0xa4>)
 800aa18:	f7f6 fc4e 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa1c:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800aa1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa20:	4a0e      	ldr	r2, [pc, #56]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800aa22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa26:	6353      	str	r3, [r2, #52]	; 0x34
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800aa2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa30:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800aa32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa36:	6453      	str	r3, [r2, #68]	; 0x44
 800aa38:	4b08      	ldr	r3, [pc, #32]	; (800aa5c <HAL_PCD_MspInit+0xa0>)
 800aa3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa44:	2200      	movs	r2, #0
 800aa46:	2105      	movs	r1, #5
 800aa48:	2043      	movs	r0, #67	; 0x43
 800aa4a:	f7f6 fc0b 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa4e:	2043      	movs	r0, #67	; 0x43
 800aa50:	f7f6 fc24 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa54:	bf00      	nop
 800aa56:	3728      	adds	r7, #40	; 0x28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	40020000 	.word	0x40020000

0800aa64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	f7fb ff38 	bl	80068f0 <USBD_LL_SetupStage>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	460b      	mov	r3, r1
 800aa92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aa9a:	78fa      	ldrb	r2, [r7, #3]
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	00db      	lsls	r3, r3, #3
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	440b      	add	r3, r1
 800aaa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	4619      	mov	r1, r3
 800aab2:	f7fb ff72 	bl	800699a <USBD_LL_DataOutStage>
}
 800aab6:	bf00      	nop
 800aab8:	3708      	adds	r7, #8
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	460b      	mov	r3, r1
 800aac8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	4613      	mov	r3, r2
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	1a9b      	subs	r3, r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	3348      	adds	r3, #72	; 0x48
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	78fb      	ldrb	r3, [r7, #3]
 800aae4:	4619      	mov	r1, r3
 800aae6:	f7fb ffbb 	bl	8006a60 <USBD_LL_DataInStage>
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fc f8cf 	bl	8006ca4 <USBD_LL_SOF>
}
 800ab06:	bf00      	nop
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab16:	2301      	movs	r3, #1
 800ab18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d001      	beq.n	800ab26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab22:	f7f6 f901 	bl	8000d28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab2c:	7bfa      	ldrb	r2, [r7, #15]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fc f879 	bl	8006c28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fc f825 	bl	8006b8c <USBD_LL_Reset>
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fc f874 	bl	8006c48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6812      	ldr	r2, [r2, #0]
 800ab6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab72:	f043 0301 	orr.w	r3, r3, #1
 800ab76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d005      	beq.n	800ab8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab80:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <HAL_PCD_SuspendCallback+0x48>)
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	4a03      	ldr	r2, [pc, #12]	; (800ab94 <HAL_PCD_SuspendCallback+0x48>)
 800ab86:	f043 0306 	orr.w	r3, r3, #6
 800ab8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	e000ed00 	.word	0xe000ed00

0800ab98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fc f864 	bl	8006c74 <USBD_LL_Resume>
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fc f8b2 	bl	8006d34 <USBD_LL_IsoOUTIncomplete>
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fc f87a 	bl	8006ce8 <USBD_LL_IsoINIncomplete>
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fc f8b8 	bl	8006d80 <USBD_LL_DevConnected>
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fc f8b5 	bl	8006d96 <USBD_LL_DevDisconnected>
}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d13c      	bne.n	800acbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac44:	4a20      	ldr	r2, [pc, #128]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a1e      	ldr	r2, [pc, #120]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac50:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac54:	4b1c      	ldr	r3, [pc, #112]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac5c:	4b1a      	ldr	r3, [pc, #104]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac5e:	2204      	movs	r2, #4
 800ac60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac62:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac64:	2202      	movs	r2, #2
 800ac66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac68:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac6e:	4b16      	ldr	r3, [pc, #88]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac70:	2202      	movs	r2, #2
 800ac72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac74:	4b14      	ldr	r3, [pc, #80]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac76:	2200      	movs	r2, #0
 800ac78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac7a:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac80:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac86:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac8c:	4b0e      	ldr	r3, [pc, #56]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac8e:	2200      	movs	r2, #0
 800ac90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac92:	480d      	ldr	r0, [pc, #52]	; (800acc8 <USBD_LL_Init+0x94>)
 800ac94:	f7f7 fc87 	bl	80025a6 <HAL_PCD_Init>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac9e:	f7f6 f843 	bl	8000d28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aca2:	2180      	movs	r1, #128	; 0x80
 800aca4:	4808      	ldr	r0, [pc, #32]	; (800acc8 <USBD_LL_Init+0x94>)
 800aca6:	f7f8 fde4 	bl	8003872 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acaa:	2240      	movs	r2, #64	; 0x40
 800acac:	2100      	movs	r1, #0
 800acae:	4806      	ldr	r0, [pc, #24]	; (800acc8 <USBD_LL_Init+0x94>)
 800acb0:	f7f8 fd98 	bl	80037e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acb4:	2280      	movs	r2, #128	; 0x80
 800acb6:	2101      	movs	r1, #1
 800acb8:	4803      	ldr	r0, [pc, #12]	; (800acc8 <USBD_LL_Init+0x94>)
 800acba:	f7f8 fd93 	bl	80037e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20006438 	.word	0x20006438

0800accc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7f7 fd7c 	bl	80027e0 <HAL_PCD_Start>
 800ace8:	4603      	mov	r3, r0
 800acea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f942 	bl	800af78 <USBD_Get_USB_Status>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	4608      	mov	r0, r1
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4603      	mov	r3, r0
 800ad12:	70fb      	strb	r3, [r7, #3]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70bb      	strb	r3, [r7, #2]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad2a:	78bb      	ldrb	r3, [r7, #2]
 800ad2c:	883a      	ldrh	r2, [r7, #0]
 800ad2e:	78f9      	ldrb	r1, [r7, #3]
 800ad30:	f7f8 f960 	bl	8002ff4 <HAL_PCD_EP_Open>
 800ad34:	4603      	mov	r3, r0
 800ad36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad38:	7bfb      	ldrb	r3, [r7, #15]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f91c 	bl	800af78 <USBD_Get_USB_Status>
 800ad40:	4603      	mov	r3, r0
 800ad42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad68:	78fa      	ldrb	r2, [r7, #3]
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f7f8 f9a9 	bl	80030c4 <HAL_PCD_EP_Close>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 f8fd 	bl	800af78 <USBD_Get_USB_Status>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ada6:	78fa      	ldrb	r2, [r7, #3]
 800ada8:	4611      	mov	r1, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	f7f8 fa81 	bl	80032b2 <HAL_PCD_EP_SetStall>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 f8de 	bl	800af78 <USBD_Get_USB_Status>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b084      	sub	sp, #16
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ade4:	78fa      	ldrb	r2, [r7, #3]
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f7f8 fac6 	bl	800337a <HAL_PCD_EP_ClrStall>
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 f8bf 	bl	800af78 <USBD_Get_USB_Status>
 800adfa:	4603      	mov	r3, r0
 800adfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	da0b      	bge.n	800ae3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae24:	78fb      	ldrb	r3, [r7, #3]
 800ae26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2a:	68f9      	ldr	r1, [r7, #12]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	1a9b      	subs	r3, r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	333e      	adds	r3, #62	; 0x3e
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	e00b      	b.n	800ae54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae42:	68f9      	ldr	r1, [r7, #12]
 800ae44:	4613      	mov	r3, r2
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	1a9b      	subs	r3, r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ae52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae7a:	78fa      	ldrb	r2, [r7, #3]
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7f8 f893 	bl	8002faa <HAL_PCD_SetAddress>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f874 	bl	800af78 <USBD_Get_USB_Status>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b086      	sub	sp, #24
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	607a      	str	r2, [r7, #4]
 800aea8:	603b      	str	r3, [r7, #0]
 800aeaa:	460b      	mov	r3, r1
 800aeac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aebc:	7af9      	ldrb	r1, [r7, #11]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	f7f8 f9ac 	bl	800321e <HAL_PCD_EP_Transmit>
 800aec6:	4603      	mov	r3, r0
 800aec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f853 	bl	800af78 <USBD_Get_USB_Status>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	460b      	mov	r3, r1
 800aeee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aefe:	7af9      	ldrb	r1, [r7, #11]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	f7f8 f928 	bl	8003158 <HAL_PCD_EP_Receive>
 800af08:	4603      	mov	r3, r0
 800af0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f832 	bl	800af78 <USBD_Get_USB_Status>
 800af14:	4603      	mov	r3, r0
 800af16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af18:	7dbb      	ldrb	r3, [r7, #22]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800af34:	78fa      	ldrb	r2, [r7, #3]
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f8 f958 	bl	80031ee <HAL_PCD_EP_GetRxCount>
 800af3e:	4603      	mov	r3, r0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af50:	4b03      	ldr	r3, [pc, #12]	; (800af60 <USBD_static_malloc+0x18>)
}
 800af52:	4618      	mov	r0, r3
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20004bd8 	.word	0x20004bd8

0800af64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]

}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	2b03      	cmp	r3, #3
 800af8a:	d817      	bhi.n	800afbc <USBD_Get_USB_Status+0x44>
 800af8c:	a201      	add	r2, pc, #4	; (adr r2, 800af94 <USBD_Get_USB_Status+0x1c>)
 800af8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af92:	bf00      	nop
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afab 	.word	0x0800afab
 800af9c:	0800afb1 	.word	0x0800afb1
 800afa0:	0800afb7 	.word	0x0800afb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73fb      	strb	r3, [r7, #15]
    break;
 800afa8:	e00b      	b.n	800afc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afaa:	2303      	movs	r3, #3
 800afac:	73fb      	strb	r3, [r7, #15]
    break;
 800afae:	e008      	b.n	800afc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afb0:	2301      	movs	r3, #1
 800afb2:	73fb      	strb	r3, [r7, #15]
    break;
 800afb4:	e005      	b.n	800afc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afb6:	2303      	movs	r3, #3
 800afb8:	73fb      	strb	r3, [r7, #15]
    break;
 800afba:	e002      	b.n	800afc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afbc:	2303      	movs	r3, #3
 800afbe:	73fb      	strb	r3, [r7, #15]
    break;
 800afc0:	bf00      	nop
  }
  return usb_status;
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <__libc_init_array>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	4d0d      	ldr	r5, [pc, #52]	; (800b008 <__libc_init_array+0x38>)
 800afd4:	4c0d      	ldr	r4, [pc, #52]	; (800b00c <__libc_init_array+0x3c>)
 800afd6:	1b64      	subs	r4, r4, r5
 800afd8:	10a4      	asrs	r4, r4, #2
 800afda:	2600      	movs	r6, #0
 800afdc:	42a6      	cmp	r6, r4
 800afde:	d109      	bne.n	800aff4 <__libc_init_array+0x24>
 800afe0:	4d0b      	ldr	r5, [pc, #44]	; (800b010 <__libc_init_array+0x40>)
 800afe2:	4c0c      	ldr	r4, [pc, #48]	; (800b014 <__libc_init_array+0x44>)
 800afe4:	f000 f8f6 	bl	800b1d4 <_init>
 800afe8:	1b64      	subs	r4, r4, r5
 800afea:	10a4      	asrs	r4, r4, #2
 800afec:	2600      	movs	r6, #0
 800afee:	42a6      	cmp	r6, r4
 800aff0:	d105      	bne.n	800affe <__libc_init_array+0x2e>
 800aff2:	bd70      	pop	{r4, r5, r6, pc}
 800aff4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff8:	4798      	blx	r3
 800affa:	3601      	adds	r6, #1
 800affc:	e7ee      	b.n	800afdc <__libc_init_array+0xc>
 800affe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b002:	4798      	blx	r3
 800b004:	3601      	adds	r6, #1
 800b006:	e7f2      	b.n	800afee <__libc_init_array+0x1e>
 800b008:	0800b328 	.word	0x0800b328
 800b00c:	0800b328 	.word	0x0800b328
 800b010:	0800b328 	.word	0x0800b328
 800b014:	0800b32c 	.word	0x0800b32c

0800b018 <__retarget_lock_acquire_recursive>:
 800b018:	4770      	bx	lr

0800b01a <__retarget_lock_release_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <memcpy>:
 800b01c:	440a      	add	r2, r1
 800b01e:	4291      	cmp	r1, r2
 800b020:	f100 33ff 	add.w	r3, r0, #4294967295
 800b024:	d100      	bne.n	800b028 <memcpy+0xc>
 800b026:	4770      	bx	lr
 800b028:	b510      	push	{r4, lr}
 800b02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b032:	4291      	cmp	r1, r2
 800b034:	d1f9      	bne.n	800b02a <memcpy+0xe>
 800b036:	bd10      	pop	{r4, pc}

0800b038 <memset>:
 800b038:	4402      	add	r2, r0
 800b03a:	4603      	mov	r3, r0
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d100      	bne.n	800b042 <memset+0xa>
 800b040:	4770      	bx	lr
 800b042:	f803 1b01 	strb.w	r1, [r3], #1
 800b046:	e7f9      	b.n	800b03c <memset+0x4>

0800b048 <cleanup_glue>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	460c      	mov	r4, r1
 800b04c:	6809      	ldr	r1, [r1, #0]
 800b04e:	4605      	mov	r5, r0
 800b050:	b109      	cbz	r1, 800b056 <cleanup_glue+0xe>
 800b052:	f7ff fff9 	bl	800b048 <cleanup_glue>
 800b056:	4621      	mov	r1, r4
 800b058:	4628      	mov	r0, r5
 800b05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b05e:	f000 b869 	b.w	800b134 <_free_r>
	...

0800b064 <_reclaim_reent>:
 800b064:	4b2c      	ldr	r3, [pc, #176]	; (800b118 <_reclaim_reent+0xb4>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4283      	cmp	r3, r0
 800b06a:	b570      	push	{r4, r5, r6, lr}
 800b06c:	4604      	mov	r4, r0
 800b06e:	d051      	beq.n	800b114 <_reclaim_reent+0xb0>
 800b070:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b072:	b143      	cbz	r3, 800b086 <_reclaim_reent+0x22>
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d14a      	bne.n	800b110 <_reclaim_reent+0xac>
 800b07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07c:	6819      	ldr	r1, [r3, #0]
 800b07e:	b111      	cbz	r1, 800b086 <_reclaim_reent+0x22>
 800b080:	4620      	mov	r0, r4
 800b082:	f000 f857 	bl	800b134 <_free_r>
 800b086:	6961      	ldr	r1, [r4, #20]
 800b088:	b111      	cbz	r1, 800b090 <_reclaim_reent+0x2c>
 800b08a:	4620      	mov	r0, r4
 800b08c:	f000 f852 	bl	800b134 <_free_r>
 800b090:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b092:	b111      	cbz	r1, 800b09a <_reclaim_reent+0x36>
 800b094:	4620      	mov	r0, r4
 800b096:	f000 f84d 	bl	800b134 <_free_r>
 800b09a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b09c:	b111      	cbz	r1, 800b0a4 <_reclaim_reent+0x40>
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f848 	bl	800b134 <_free_r>
 800b0a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b0a6:	b111      	cbz	r1, 800b0ae <_reclaim_reent+0x4a>
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 f843 	bl	800b134 <_free_r>
 800b0ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b0b0:	b111      	cbz	r1, 800b0b8 <_reclaim_reent+0x54>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 f83e 	bl	800b134 <_free_r>
 800b0b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0ba:	b111      	cbz	r1, 800b0c2 <_reclaim_reent+0x5e>
 800b0bc:	4620      	mov	r0, r4
 800b0be:	f000 f839 	bl	800b134 <_free_r>
 800b0c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b0c4:	b111      	cbz	r1, 800b0cc <_reclaim_reent+0x68>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f000 f834 	bl	800b134 <_free_r>
 800b0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ce:	b111      	cbz	r1, 800b0d6 <_reclaim_reent+0x72>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 f82f 	bl	800b134 <_free_r>
 800b0d6:	69a3      	ldr	r3, [r4, #24]
 800b0d8:	b1e3      	cbz	r3, 800b114 <_reclaim_reent+0xb0>
 800b0da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4798      	blx	r3
 800b0e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b0e2:	b1b9      	cbz	r1, 800b114 <_reclaim_reent+0xb0>
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b0ea:	f7ff bfad 	b.w	800b048 <cleanup_glue>
 800b0ee:	5949      	ldr	r1, [r1, r5]
 800b0f0:	b941      	cbnz	r1, 800b104 <_reclaim_reent+0xa0>
 800b0f2:	3504      	adds	r5, #4
 800b0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f6:	2d80      	cmp	r5, #128	; 0x80
 800b0f8:	68d9      	ldr	r1, [r3, #12]
 800b0fa:	d1f8      	bne.n	800b0ee <_reclaim_reent+0x8a>
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 f819 	bl	800b134 <_free_r>
 800b102:	e7ba      	b.n	800b07a <_reclaim_reent+0x16>
 800b104:	680e      	ldr	r6, [r1, #0]
 800b106:	4620      	mov	r0, r4
 800b108:	f000 f814 	bl	800b134 <_free_r>
 800b10c:	4631      	mov	r1, r6
 800b10e:	e7ef      	b.n	800b0f0 <_reclaim_reent+0x8c>
 800b110:	2500      	movs	r5, #0
 800b112:	e7ef      	b.n	800b0f4 <_reclaim_reent+0x90>
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	bf00      	nop
 800b118:	20000184 	.word	0x20000184

0800b11c <__malloc_lock>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__malloc_lock+0x8>)
 800b11e:	f7ff bf7b 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800b122:	bf00      	nop
 800b124:	20006844 	.word	0x20006844

0800b128 <__malloc_unlock>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__malloc_unlock+0x8>)
 800b12a:	f7ff bf76 	b.w	800b01a <__retarget_lock_release_recursive>
 800b12e:	bf00      	nop
 800b130:	20006844 	.word	0x20006844

0800b134 <_free_r>:
 800b134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b136:	2900      	cmp	r1, #0
 800b138:	d048      	beq.n	800b1cc <_free_r+0x98>
 800b13a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b13e:	9001      	str	r0, [sp, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f1a1 0404 	sub.w	r4, r1, #4
 800b146:	bfb8      	it	lt
 800b148:	18e4      	addlt	r4, r4, r3
 800b14a:	f7ff ffe7 	bl	800b11c <__malloc_lock>
 800b14e:	4a20      	ldr	r2, [pc, #128]	; (800b1d0 <_free_r+0x9c>)
 800b150:	9801      	ldr	r0, [sp, #4]
 800b152:	6813      	ldr	r3, [r2, #0]
 800b154:	4615      	mov	r5, r2
 800b156:	b933      	cbnz	r3, 800b166 <_free_r+0x32>
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	6014      	str	r4, [r2, #0]
 800b15c:	b003      	add	sp, #12
 800b15e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b162:	f7ff bfe1 	b.w	800b128 <__malloc_unlock>
 800b166:	42a3      	cmp	r3, r4
 800b168:	d90b      	bls.n	800b182 <_free_r+0x4e>
 800b16a:	6821      	ldr	r1, [r4, #0]
 800b16c:	1862      	adds	r2, r4, r1
 800b16e:	4293      	cmp	r3, r2
 800b170:	bf04      	itt	eq
 800b172:	681a      	ldreq	r2, [r3, #0]
 800b174:	685b      	ldreq	r3, [r3, #4]
 800b176:	6063      	str	r3, [r4, #4]
 800b178:	bf04      	itt	eq
 800b17a:	1852      	addeq	r2, r2, r1
 800b17c:	6022      	streq	r2, [r4, #0]
 800b17e:	602c      	str	r4, [r5, #0]
 800b180:	e7ec      	b.n	800b15c <_free_r+0x28>
 800b182:	461a      	mov	r2, r3
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	b10b      	cbz	r3, 800b18c <_free_r+0x58>
 800b188:	42a3      	cmp	r3, r4
 800b18a:	d9fa      	bls.n	800b182 <_free_r+0x4e>
 800b18c:	6811      	ldr	r1, [r2, #0]
 800b18e:	1855      	adds	r5, r2, r1
 800b190:	42a5      	cmp	r5, r4
 800b192:	d10b      	bne.n	800b1ac <_free_r+0x78>
 800b194:	6824      	ldr	r4, [r4, #0]
 800b196:	4421      	add	r1, r4
 800b198:	1854      	adds	r4, r2, r1
 800b19a:	42a3      	cmp	r3, r4
 800b19c:	6011      	str	r1, [r2, #0]
 800b19e:	d1dd      	bne.n	800b15c <_free_r+0x28>
 800b1a0:	681c      	ldr	r4, [r3, #0]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	6053      	str	r3, [r2, #4]
 800b1a6:	4421      	add	r1, r4
 800b1a8:	6011      	str	r1, [r2, #0]
 800b1aa:	e7d7      	b.n	800b15c <_free_r+0x28>
 800b1ac:	d902      	bls.n	800b1b4 <_free_r+0x80>
 800b1ae:	230c      	movs	r3, #12
 800b1b0:	6003      	str	r3, [r0, #0]
 800b1b2:	e7d3      	b.n	800b15c <_free_r+0x28>
 800b1b4:	6825      	ldr	r5, [r4, #0]
 800b1b6:	1961      	adds	r1, r4, r5
 800b1b8:	428b      	cmp	r3, r1
 800b1ba:	bf04      	itt	eq
 800b1bc:	6819      	ldreq	r1, [r3, #0]
 800b1be:	685b      	ldreq	r3, [r3, #4]
 800b1c0:	6063      	str	r3, [r4, #4]
 800b1c2:	bf04      	itt	eq
 800b1c4:	1949      	addeq	r1, r1, r5
 800b1c6:	6021      	streq	r1, [r4, #0]
 800b1c8:	6054      	str	r4, [r2, #4]
 800b1ca:	e7c7      	b.n	800b15c <_free_r+0x28>
 800b1cc:	b003      	add	sp, #12
 800b1ce:	bd30      	pop	{r4, r5, pc}
 800b1d0:	20004df8 	.word	0x20004df8

0800b1d4 <_init>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	bf00      	nop
 800b1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1da:	bc08      	pop	{r3}
 800b1dc:	469e      	mov	lr, r3
 800b1de:	4770      	bx	lr

0800b1e0 <_fini>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	bf00      	nop
 800b1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e6:	bc08      	pop	{r3}
 800b1e8:	469e      	mov	lr, r3
 800b1ea:	4770      	bx	lr
