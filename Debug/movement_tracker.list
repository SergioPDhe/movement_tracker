
movement_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800afcc  0800afcc  0001afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b100  0800b100  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b108  0800b108  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b108  0800b108  0001b108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006644  200001e8  0800b2f8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000682c  0800b2f8  0002682c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c09f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538f  00000000  00000000  0004c2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00051648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bf8  00000000  00000000  000533f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b63a  00000000  00000000  00054fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023597  00000000  00000000  00070622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eeae  00000000  00000000  00093bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c4  00000000  00000000  00132abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800afb4 	.word	0x0800afb4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800afb4 	.word	0x0800afb4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MPU6050_Init>:
//#include "usbd_cdc_if.h"
#include "MPU6050.h"


uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
  dev->i2cHandle = i2cHandle;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	601a      	str	r2, [r3, #0]

  dev->accelerometer[0] = 0.0f;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
  dev->accelerometer[1] = 0.0f;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f04f 0200 	mov.w	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  dev->accelerometer[2] = 0.0f;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]

  dev->gyroscope[0] = 0.0f;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f04f 0200 	mov.w	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  dev->gyroscope[1] = 0.0f;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f04f 0200 	mov.w	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  dev->gyroscope[2] = 0.0f;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f04f 0200 	mov.w	r2, #0
 8000516:	619a      	str	r2, [r3, #24]

  dev->temp = 0.0f;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f04f 0200 	mov.w	r2, #0
 800051e:	61da      	str	r2, [r3, #28]

  uint8_t errNum = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status;

  uint8_t regData;

  status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
 8000524:	f107 030d 	add.w	r3, r7, #13
 8000528:	461a      	mov	r2, r3
 800052a:	2175      	movs	r1, #117	; 0x75
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f000 f8fd 	bl	800072c <MPU6050_ReadRegister>
 8000532:	4603      	mov	r3, r0
 8000534:	73bb      	strb	r3, [r7, #14]
  errNum += (status != HAL_OK);
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	4413      	add	r3, r2
 8000548:	73fb      	strb	r3, [r7, #15]

  if (regData != MPU6050_ID)
 800054a:	7b7b      	ldrb	r3, [r7, #13]
 800054c:	2b68      	cmp	r3, #104	; 0x68
 800054e:	d001      	beq.n	8000554 <MPU6050_Init+0x7c>
    {
      return 255;
 8000550:	23ff      	movs	r3, #255	; 0xff
 8000552:	e011      	b.n	8000578 <MPU6050_Init+0xa0>
    }
  status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x00);
 8000554:	2200      	movs	r2, #0
 8000556:	216b      	movs	r1, #107	; 0x6b
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f921 	bl	80007a0 <MPU6050_WriteRegister>
 800055e:	4603      	mov	r3, r0
 8000560:	73bb      	strb	r3, [r7, #14]
  errNum += (status != HAL_OK);
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	2b00      	cmp	r3, #0
 8000566:	bf14      	ite	ne
 8000568:	2301      	movne	r3, #1
 800056a:	2300      	moveq	r3, #0
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	4413      	add	r3, r2
 8000574:	73fb      	strb	r3, [r7, #15]
  status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
  errNum += (status != HAL_OK);
  status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x00);
  errNum += (status != HAL_OK);*/

  return errNum;
 8000576:	7bfb      	ldrb	r3, [r7, #15]

}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MPU6050_ReadTemp>:

HAL_StatusTypeDef MPU6050_ReadTemp(MPU6050 *dev)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint8_t regData[2];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, TEMP_OUT_H, regData, 2);
 8000588:	f107 0208 	add.w	r2, r7, #8
 800058c:	2302      	movs	r3, #2
 800058e:	2141      	movs	r1, #65	; 0x41
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f8e6 	bl	8000762 <MPU6050_ReadRegisters>
 8000596:	4603      	mov	r3, r0
 8000598:	73fb      	strb	r3, [r7, #15]

  int16_t tempRaw = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 800059a:	7a3b      	ldrb	r3, [r7, #8]
 800059c:	021b      	lsls	r3, r3, #8
 800059e:	b21a      	sxth	r2, r3
 80005a0:	7a7b      	ldrb	r3, [r7, #9]
 80005a2:	b21b      	sxth	r3, r3
 80005a4:	4313      	orrs	r3, r2
 80005a6:	81bb      	strh	r3, [r7, #12]

  dev->temp = ((float)tempRaw/340.0f) + 35.53f;
 80005a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ac:	ee07 3a90 	vmov	s15, r3
 80005b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005b4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80005d4 <MPU6050_ReadTemp+0x54>
 80005b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005bc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80005d8 <MPU6050_ReadTemp+0x58>
 80005c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	edc3 7a07 	vstr	s15, [r3, #28]

  return status;
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	43aa0000 	.word	0x43aa0000
 80005d8:	420e1eb8 	.word	0x420e1eb8

080005dc <MPU6050_ReadAccel>:



HAL_StatusTypeDef MPU6050_ReadAccel(MPU6050 *dev)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint8_t regData[6];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, ACCEL_XOUT_H, regData, 6);
 80005e4:	f107 0210 	add.w	r2, r7, #16
 80005e8:	2306      	movs	r3, #6
 80005ea:	213b      	movs	r1, #59	; 0x3b
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f8b8 	bl	8000762 <MPU6050_ReadRegisters>
 80005f2:	4603      	mov	r3, r0
 80005f4:	75fb      	strb	r3, [r7, #23]

  int16_t accelRaw[3];

  accelRaw[0] = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 80005f6:	7c3b      	ldrb	r3, [r7, #16]
 80005f8:	021b      	lsls	r3, r3, #8
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	7c7b      	ldrb	r3, [r7, #17]
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b21b      	sxth	r3, r3
 8000604:	813b      	strh	r3, [r7, #8]
  accelRaw[1] = ((int16_t)regData[2]<<8) | (int16_t)regData[3];
 8000606:	7cbb      	ldrb	r3, [r7, #18]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	b21a      	sxth	r2, r3
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21b      	sxth	r3, r3
 8000614:	817b      	strh	r3, [r7, #10]
  accelRaw[2] = ((int16_t)regData[4]<<8) | (int16_t)regData[5];
 8000616:	7d3b      	ldrb	r3, [r7, #20]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	7d7b      	ldrb	r3, [r7, #21]
 800061e:	b21b      	sxth	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b21b      	sxth	r3, r3
 8000624:	81bb      	strh	r3, [r7, #12]

  dev->accelerometer[0] = ((float)accelRaw[0]/16384.0f);
 8000626:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000632:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000680 <MPU6050_ReadAccel+0xa4>
 8000636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	edc3 7a01 	vstr	s15, [r3, #4]
  dev->accelerometer[1] = ((float)accelRaw[1]/16384.0f);
 8000640:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800064c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000680 <MPU6050_ReadAccel+0xa4>
 8000650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	edc3 7a02 	vstr	s15, [r3, #8]
  dev->accelerometer[2] = ((float)accelRaw[2]/16384.0f);
 800065a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800065e:	ee07 3a90 	vmov	s15, r3
 8000662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000666:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000680 <MPU6050_ReadAccel+0xa4>
 800066a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	edc3 7a03 	vstr	s15, [r3, #12]

  return status;
 8000674:	7dfb      	ldrb	r3, [r7, #23]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	46800000 	.word	0x46800000

08000684 <MPU6050_ReadGyro>:

HAL_StatusTypeDef MPU6050_ReadGyro(MPU6050 *dev)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint8_t regData[6];

  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, GYRO_XOUT_H, regData, 6);
 800068c:	f107 0210 	add.w	r2, r7, #16
 8000690:	2306      	movs	r3, #6
 8000692:	2143      	movs	r1, #67	; 0x43
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f864 	bl	8000762 <MPU6050_ReadRegisters>
 800069a:	4603      	mov	r3, r0
 800069c:	75fb      	strb	r3, [r7, #23]

  int16_t gyroRaw[3];

  gyroRaw[0] = ((int16_t)regData[0]<<8) | (int16_t)regData[1];
 800069e:	7c3b      	ldrb	r3, [r7, #16]
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	7c7b      	ldrb	r3, [r7, #17]
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b21b      	sxth	r3, r3
 80006ac:	813b      	strh	r3, [r7, #8]
  gyroRaw[1] = ((int16_t)regData[2]<<8) | (int16_t)regData[3];
 80006ae:	7cbb      	ldrb	r3, [r7, #18]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	817b      	strh	r3, [r7, #10]
  gyroRaw[2] = ((int16_t)regData[4]<<8) | (int16_t)regData[5];
 80006be:	7d3b      	ldrb	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	81bb      	strh	r3, [r7, #12]

  dev->gyroscope[0] = ((float)gyroRaw[0]/131.0f);
 80006ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006da:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000728 <MPU6050_ReadGyro+0xa4>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	edc3 7a04 	vstr	s15, [r3, #16]
  dev->gyroscope[1] = ((float)gyroRaw[1]/131.0f);
 80006e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000728 <MPU6050_ReadGyro+0xa4>
 80006f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	edc3 7a05 	vstr	s15, [r3, #20]
  dev->gyroscope[2] = ((float)gyroRaw[2]/131.0f);
 8000702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000728 <MPU6050_ReadGyro+0xa4>
 8000712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	edc3 7a06 	vstr	s15, [r3, #24]

  return status;
 800071c:	7dfb      	ldrb	r3, [r7, #23]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	43030000 	.word	0x43030000

0800072c <MPU6050_ReadRegister>:




HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af04      	add	r7, sp, #16
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	460b      	mov	r3, r1
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	72fb      	strb	r3, [r7, #11]
  return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	b29a      	uxth	r2, r3
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	9302      	str	r3, [sp, #8]
 8000748:	2301      	movs	r3, #1
 800074a:	9301      	str	r3, [sp, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	21d0      	movs	r1, #208	; 0xd0
 8000754:	f001 f894 	bl	8001880 <HAL_I2C_Mem_Read>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b088      	sub	sp, #32
 8000766:	af04      	add	r7, sp, #16
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	461a      	mov	r2, r3
 800076e:	460b      	mov	r3, r1
 8000770:	72fb      	strb	r3, [r7, #11]
 8000772:	4613      	mov	r3, r2
 8000774:	72bb      	strb	r3, [r7, #10]
  return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	b29a      	uxth	r2, r3
 800077e:	7abb      	ldrb	r3, [r7, #10]
 8000780:	b29b      	uxth	r3, r3
 8000782:	f04f 31ff 	mov.w	r1, #4294967295
 8000786:	9102      	str	r1, [sp, #8]
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	2301      	movs	r3, #1
 8000790:	21d0      	movs	r1, #208	; 0xd0
 8000792:	f001 f875 	bl	8001880 <HAL_I2C_Mem_Read>
 8000796:	4603      	mov	r3, r0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MPU6050_WriteRegister>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	460b      	mov	r3, r1
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	72fb      	strb	r3, [r7, #11]
  return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	7afb      	ldrb	r3, [r7, #11]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	9302      	str	r3, [sp, #8]
 80007bc:	2301      	movs	r3, #1
 80007be:	9301      	str	r3, [sp, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	21d0      	movs	r1, #208	; 0xd0
 80007c8:	f000 ff60 	bl	800168c <HAL_I2C_Mem_Write>
 80007cc:	4603      	mov	r3, r0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	; 0x40
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f000 fb11 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f837 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e6:	f000 f8f5 	bl	80009d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ea:	f000 f89b 	bl	8000924 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007ee:	f000 f8c7 	bl	8000980 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&acc, &hi2c1);
 80007f2:	490f      	ldr	r1, [pc, #60]	; (8000830 <main+0x58>)
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <main+0x5c>)
 80007f6:	f7ff fe6f 	bl	80004d8 <MPU6050_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007fa:	f007 f873 	bl	80078e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadIMU */
  ReadIMUHandle = osThreadNew(StartReadIMU, NULL, &ReadIMU_attributes);
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <main+0x60>)
 8000800:	2100      	movs	r1, #0
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <main+0x64>)
 8000804:	f007 f8b8 	bl	8007978 <osThreadNew>
 8000808:	4603      	mov	r3, r0
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <main+0x68>)
 800080c:	6013      	str	r3, [r2, #0]

  /* creation of SendBLEData */
  SendBLEDataHandle = osThreadNew(StartSendBLEData, NULL, &SendBLEData_attributes);
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <main+0x6c>)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <main+0x70>)
 8000814:	f007 f8b0 	bl	8007978 <osThreadNew>
 8000818:	4603      	mov	r3, r0
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <main+0x74>)
 800081c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000824:	480a      	ldr	r0, [pc, #40]	; (8000850 <main+0x78>)
 8000826:	f000 fdb9 	bl	800139c <HAL_GPIO_WritePin>


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800082a:	f007 f87f 	bl	800792c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082e:	e7fe      	b.n	800082e <main+0x56>
 8000830:	20004e1c 	.word	0x20004e1c
 8000834:	20004dfc 	.word	0x20004dfc
 8000838:	0800b040 	.word	0x0800b040
 800083c:	08000a95 	.word	0x08000a95
 8000840:	20004eb8 	.word	0x20004eb8
 8000844:	0800b064 	.word	0x0800b064
 8000848:	08000ac1 	.word	0x08000ac1
 800084c:	20004e70 	.word	0x20004e70
 8000850:	40020800 	.word	0x40020800

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f00a fad8 	bl	800ae18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <SystemClock_Config+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a26      	ldr	r2, [pc, #152]	; (800091c <SystemClock_Config+0xc8>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <SystemClock_Config+0xc8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a20      	ldr	r2, [pc, #128]	; (8000920 <SystemClock_Config+0xcc>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <SystemClock_Config+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008c4:	2319      	movs	r3, #25
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008c8:	23c0      	movs	r3, #192	; 0xc0
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fed5 	bl	8003688 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e4:	f000 f90e 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2103      	movs	r1, #3
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f937 	bl	8003b78 <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000910:	f000 f8f8 	bl	8000b04 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f000 fd4f 	bl	8001404 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f8ca 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20004e1c 	.word	0x20004e1c
 8000978:	40005400 	.word	0x40005400
 800097c:	000186a0 	.word	0x000186a0

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f003 fd60 	bl	800447c <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f89f 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20004e74 	.word	0x20004e74
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MX_GPIO_Init+0xb8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <MX_GPIO_Init+0xb8>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_GPIO_Init+0xb8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_GPIO_Init+0xb8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0xbc>)
 8000a62:	f000 fc9b 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_GPIO_Init+0xbc>)
 8000a80:	f000 fb08 	bl	8001094 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800

08000a94 <StartReadIMU>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadIMU */
void StartReadIMU(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a9c:	f009 fc9e 	bl	800a3dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      MPU6050_ReadAccel(&acc);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <StartReadIMU+0x28>)
 8000aa2:	f7ff fd9b 	bl	80005dc <MPU6050_ReadAccel>
      MPU6050_ReadTemp(&acc);
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <StartReadIMU+0x28>)
 8000aa8:	f7ff fd6a 	bl	8000580 <MPU6050_ReadTemp>
      MPU6050_ReadGyro(&acc);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <StartReadIMU+0x28>)
 8000aae:	f7ff fde9 	bl	8000684 <MPU6050_ReadGyro>

      osDelay(100);
 8000ab2:	2064      	movs	r0, #100	; 0x64
 8000ab4:	f006 fff2 	bl	8007a9c <osDelay>
      MPU6050_ReadAccel(&acc);
 8000ab8:	e7f2      	b.n	8000aa0 <StartReadIMU+0xc>
 8000aba:	bf00      	nop
 8000abc:	20004dfc 	.word	0x20004dfc

08000ac0 <StartSendBLEData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendBLEData */
void StartSendBLEData(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendBLEData */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <StartSendBLEData+0x1c>)
 8000ace:	f000 fc7e 	bl	80013ce <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad6:	f006 ffe1 	bl	8007a9c <osDelay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ada:	e7f5      	b.n	8000ac8 <StartSendBLEData+0x8>
 8000adc:	40020800 	.word	0x40020800

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af2:	f000 f9a9 	bl	8000e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40014000 	.word	0x40014000

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_MspInit+0x54>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x54>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_MspInit+0x54>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_MspInit+0x54>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	210f      	movs	r1, #15
 8000b52:	f06f 0001 	mvn.w	r0, #1
 8000b56:	f000 fa73 	bl	8001040 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <HAL_I2C_MspInit+0x84>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12c      	bne.n	8000be4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bac:	2312      	movs	r3, #18
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <HAL_I2C_MspInit+0x8c>)
 8000bc4:	f000 fa66 	bl	8001094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_I2C_MspInit+0x88>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40005400 	.word	0x40005400
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c52:	23c0      	movs	r3, #192	; 0xc0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c62:	2307      	movs	r3, #7
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_MspInit+0x8c>)
 8000c6e:	f000 fa11 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020400 	.word	0x40020400

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	2018      	movs	r0, #24
 8000c9e:	f000 f9cf 	bl	8001040 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ca2:	2018      	movs	r0, #24
 8000ca4:	f000 f9e8 	bl	8001078 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_InitTick+0xa0>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_InitTick+0xa0>)
 8000cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb6:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_InitTick+0xa0>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 f922 	bl	8003f18 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cd4:	f003 f90c 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 8000cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <HAL_InitTick+0xa4>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_InitTick+0xa8>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_InitTick+0xac>)
 8000cec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_InitTick+0xa8>)
 8000cf0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_InitTick+0xa8>)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_InitTick+0xa8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <HAL_InitTick+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_InitTick+0xa8>)
 8000d0a:	f003 f937 	bl	8003f7c <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_InitTick+0xa8>)
 8000d16:	f003 f98b 	bl	8004030 <HAL_TIM_Base_Start_IT>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	e000      	b.n	8000d20 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3730      	adds	r7, #48	; 0x30
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	431bde83 	.word	0x431bde83
 8000d30:	20004ebc 	.word	0x20004ebc
 8000d34:	40014000 	.word	0x40014000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000d6a:	f003 f9c3 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20004ebc 	.word	0x20004ebc

08000d78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <OTG_FS_IRQHandler+0x10>)
 8000d7e:	f001 fc50 	bl	8002622 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20006418 	.word	0x20006418

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd7 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f009 ffe7 	bl	800adb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fcf9 	bl	80007d8 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000df4:	0800b110 	.word	0x0800b110
  ldr r2, =_sbss
 8000df8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000dfc:	2000682c 	.word	0x2000682c

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f8fc 	bl	800102a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	200f      	movs	r0, #15
 8000e34:	f7ff ff28 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe6a 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20004f04 	.word	0x20004f04

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20004f04 	.word	0x20004f04

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff4c 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001052:	f7ff ff61 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001056:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	68b9      	ldr	r1, [r7, #8]
 800105c:	6978      	ldr	r0, [r7, #20]
 800105e:	f7ff ffb1 	bl	8000fc4 <NVIC_EncodePriority>
 8001062:	4602      	mov	r2, r0
 8001064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff80 	bl	8000f70 <__NVIC_SetPriority>
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff54 	bl	8000f34 <__NVIC_EnableIRQ>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	e159      	b.n	8001364 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8148 	bne.w	800135e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d130      	bne.n	8001148 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	2203      	movs	r2, #3
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111c:	2201      	movs	r2, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f003 0201 	and.w	r2, r3, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b03      	cmp	r3, #3
 8001152:	d017      	beq.n	8001184 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d123      	bne.n	80011d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	220f      	movs	r2, #15
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	691a      	ldr	r2, [r3, #16]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	69b9      	ldr	r1, [r7, #24]
 80011d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 80a2 	beq.w	800135e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b57      	ldr	r3, [pc, #348]	; (800137c <HAL_GPIO_Init+0x2e8>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_GPIO_Init+0x2e8>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b54      	ldr	r3, [pc, #336]	; (800137c <HAL_GPIO_Init+0x2e8>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001236:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x202>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x1fe>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a47      	ldr	r2, [pc, #284]	; (800138c <HAL_GPIO_Init+0x2f8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x1fa>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a46      	ldr	r2, [pc, #280]	; (8001390 <HAL_GPIO_Init+0x2fc>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x1f6>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a45      	ldr	r2, [pc, #276]	; (8001394 <HAL_GPIO_Init+0x300>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x1f2>
 8001282:	2304      	movs	r3, #4
 8001284:	e008      	b.n	8001298 <HAL_GPIO_Init+0x204>
 8001286:	2307      	movs	r3, #7
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x204>
 800128a:	2303      	movs	r3, #3
 800128c:	e004      	b.n	8001298 <HAL_GPIO_Init+0x204>
 800128e:	2302      	movs	r3, #2
 8001290:	e002      	b.n	8001298 <HAL_GPIO_Init+0x204>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_GPIO_Init+0x204>
 8001296:	2300      	movs	r3, #0
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	f002 0203 	and.w	r2, r2, #3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4093      	lsls	r3, r2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a8:	4935      	ldr	r1, [pc, #212]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b6:	4b38      	ldr	r3, [pc, #224]	; (8001398 <HAL_GPIO_Init+0x304>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x304>)
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_GPIO_Init+0x304>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001304:	4a24      	ldr	r2, [pc, #144]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_GPIO_Init+0x304>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a1a      	ldr	r2, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_GPIO_Init+0x304>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3301      	adds	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b0f      	cmp	r3, #15
 8001368:	f67f aea2 	bls.w	80010b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	400b      	ands	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e12b      	b.n	800166e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fb9c 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001468:	f002 fd2e 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 800146c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a81      	ldr	r2, [pc, #516]	; (8001678 <HAL_I2C_Init+0x274>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d807      	bhi.n	8001488 <HAL_I2C_Init+0x84>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a80      	ldr	r2, [pc, #512]	; (800167c <HAL_I2C_Init+0x278>)
 800147c:	4293      	cmp	r3, r2
 800147e:	bf94      	ite	ls
 8001480:	2301      	movls	r3, #1
 8001482:	2300      	movhi	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e006      	b.n	8001496 <HAL_I2C_Init+0x92>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a7d      	ldr	r2, [pc, #500]	; (8001680 <HAL_I2C_Init+0x27c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0e7      	b.n	800166e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_I2C_Init+0x280>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	0c9b      	lsrs	r3, r3, #18
 80014a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a6a      	ldr	r2, [pc, #424]	; (8001678 <HAL_I2C_Init+0x274>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d802      	bhi.n	80014d8 <HAL_I2C_Init+0xd4>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3301      	adds	r3, #1
 80014d6:	e009      	b.n	80014ec <HAL_I2C_Init+0xe8>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	4a69      	ldr	r2, [pc, #420]	; (8001688 <HAL_I2C_Init+0x284>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	099b      	lsrs	r3, r3, #6
 80014ea:	3301      	adds	r3, #1
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	430b      	orrs	r3, r1
 80014f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	495c      	ldr	r1, [pc, #368]	; (8001678 <HAL_I2C_Init+0x274>)
 8001508:	428b      	cmp	r3, r1
 800150a:	d819      	bhi.n	8001540 <HAL_I2C_Init+0x13c>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e59      	subs	r1, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fbb1 f3f3 	udiv	r3, r1, r3
 800151a:	1c59      	adds	r1, r3, #1
 800151c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001520:	400b      	ands	r3, r1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00a      	beq.n	800153c <HAL_I2C_Init+0x138>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1e59      	subs	r1, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fbb1 f3f3 	udiv	r3, r1, r3
 8001534:	3301      	adds	r3, #1
 8001536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153a:	e051      	b.n	80015e0 <HAL_I2C_Init+0x1dc>
 800153c:	2304      	movs	r3, #4
 800153e:	e04f      	b.n	80015e0 <HAL_I2C_Init+0x1dc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d111      	bne.n	800156c <HAL_I2C_Init+0x168>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e58      	subs	r0, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6859      	ldr	r1, [r3, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	440b      	add	r3, r1
 8001556:	fbb0 f3f3 	udiv	r3, r0, r3
 800155a:	3301      	adds	r3, #1
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf0c      	ite	eq
 8001564:	2301      	moveq	r3, #1
 8001566:	2300      	movne	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	e012      	b.n	8001592 <HAL_I2C_Init+0x18e>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1e58      	subs	r0, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	0099      	lsls	r1, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001582:	3301      	adds	r3, #1
 8001584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf0c      	ite	eq
 800158c:	2301      	moveq	r3, #1
 800158e:	2300      	movne	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_Init+0x196>
 8001596:	2301      	movs	r3, #1
 8001598:	e022      	b.n	80015e0 <HAL_I2C_Init+0x1dc>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10e      	bne.n	80015c0 <HAL_I2C_Init+0x1bc>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e58      	subs	r0, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6859      	ldr	r1, [r3, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	440b      	add	r3, r1
 80015b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015be:	e00f      	b.n	80015e0 <HAL_I2C_Init+0x1dc>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1e58      	subs	r0, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	0099      	lsls	r1, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	6809      	ldr	r1, [r1, #0]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800160e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6911      	ldr	r1, [r2, #16]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68d2      	ldr	r2, [r2, #12]
 800161a:	4311      	orrs	r1, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	000186a0 	.word	0x000186a0
 800167c:	001e847f 	.word	0x001e847f
 8001680:	003d08ff 	.word	0x003d08ff
 8001684:	431bde83 	.word	0x431bde83
 8001688:	10624dd3 	.word	0x10624dd3

0800168c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af02      	add	r7, sp, #8
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4603      	mov	r3, r0
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	460b      	mov	r3, r1
 80016a0:	813b      	strh	r3, [r7, #8]
 80016a2:	4613      	mov	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016a6:	f7ff fbe3 	bl	8000e70 <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	f040 80d9 	bne.w	800186c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2319      	movs	r3, #25
 80016c0:	2201      	movs	r2, #1
 80016c2:	496d      	ldr	r1, [pc, #436]	; (8001878 <HAL_I2C_Mem_Write+0x1ec>)
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fc7f 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
 80016d2:	e0cc      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Mem_Write+0x56>
 80016de:	2302      	movs	r3, #2
 80016e0:	e0c5      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d007      	beq.n	8001708 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2221      	movs	r2, #33	; 0x21
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	; 0x40
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a3a      	ldr	r2, [r7, #32]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4a4d      	ldr	r2, [pc, #308]	; (800187c <HAL_I2C_Mem_Write+0x1f0>)
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800174a:	88f8      	ldrh	r0, [r7, #6]
 800174c:	893a      	ldrh	r2, [r7, #8]
 800174e:	8979      	ldrh	r1, [r7, #10]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4603      	mov	r3, r0
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fab6 	bl	8001ccc <I2C_RequestMemoryWrite>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d052      	beq.n	800180c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e081      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fd00 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00d      	beq.n	8001796 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b04      	cmp	r3, #4
 8001780:	d107      	bne.n	8001792 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001790:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06b      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	781a      	ldrb	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d11b      	bne.n	800180c <HAL_I2C_Mem_Write+0x180>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d017      	beq.n	800180c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1aa      	bne.n	800176a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fcec 	bl	80021f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2b04      	cmp	r3, #4
 800182a:	d107      	bne.n	800183c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e016      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800184e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2220      	movs	r2, #32
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800186c:	2302      	movs	r3, #2
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	00100002 	.word	0x00100002
 800187c:	ffff0000 	.word	0xffff0000

08001880 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	817b      	strh	r3, [r7, #10]
 8001892:	460b      	mov	r3, r1
 8001894:	813b      	strh	r3, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800189a:	f7ff fae9 	bl	8000e70 <HAL_GetTick>
 800189e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	f040 8208 	bne.w	8001cbe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2319      	movs	r3, #25
 80018b4:	2201      	movs	r2, #1
 80018b6:	497b      	ldr	r1, [pc, #492]	; (8001aa4 <HAL_I2C_Mem_Read+0x224>)
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fb85 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
 80018c6:	e1fb      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_I2C_Mem_Read+0x56>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e1f4      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d007      	beq.n	80018fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2222      	movs	r2, #34	; 0x22
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2240      	movs	r2, #64	; 0x40
 8001918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800192c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a5b      	ldr	r2, [pc, #364]	; (8001aa8 <HAL_I2C_Mem_Read+0x228>)
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800193e:	88f8      	ldrh	r0, [r7, #6]
 8001940:	893a      	ldrh	r2, [r7, #8]
 8001942:	8979      	ldrh	r1, [r7, #10]
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4603      	mov	r3, r0
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fa52 	bl	8001df8 <I2C_RequestMemoryRead>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1b0      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d113      	bne.n	800198e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e184      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	2b01      	cmp	r3, #1
 8001994:	d11b      	bne.n	80019ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e164      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d11b      	bne.n	8001a0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	e144      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a24:	e138      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	f200 80f1 	bhi.w	8001c12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d123      	bne.n	8001a80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 fc1b 	bl	8002278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e139      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a7e:	e10b      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d14e      	bne.n	8001b26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <HAL_I2C_Mem_Read+0x22c>)
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa98 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e10e      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
 8001aa2:	bf00      	nop
 8001aa4:	00100002 	.word	0x00100002
 8001aa8:	ffff0000 	.word	0xffff0000
 8001aac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b24:	e0b8      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4966      	ldr	r1, [pc, #408]	; (8001cc8 <HAL_I2C_Mem_Read+0x448>)
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa49 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0bf      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b88:	2200      	movs	r2, #0
 8001b8a:	494f      	ldr	r1, [pc, #316]	; (8001cc8 <HAL_I2C_Mem_Read+0x448>)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fa1b 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e091      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c10:	e042      	b.n	8001c98 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fb2e 	bl	8002278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e04c      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d118      	bne.n	8001c98 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aec2 	bne.w	8001a26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	00010004 	.word	0x00010004

08001ccc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4603      	mov	r3, r0
 8001cdc:	817b      	strh	r3, [r7, #10]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	813b      	strh	r3, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f960 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1c:	d103      	bne.n	8001d26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e05f      	b.n	8001dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	6a3a      	ldr	r2, [r7, #32]
 8001d3e:	492d      	ldr	r1, [pc, #180]	; (8001df4 <I2C_RequestMemoryWrite+0x128>)
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f998 	bl	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e04c      	b.n	8001dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fa02 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d107      	bne.n	8001d8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e02b      	b.n	8001dea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	e021      	b.n	8001de8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db4:	6a39      	ldr	r1, [r7, #32]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9dc 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00d      	beq.n	8001dde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d107      	bne.n	8001dda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e005      	b.n	8001dea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dde:	893b      	ldrh	r3, [r7, #8]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	00010002 	.word	0x00010002

08001df8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	813b      	strh	r3, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f8c2 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e58:	d103      	bne.n	8001e62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0aa      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e66:	897b      	ldrh	r3, [r7, #10]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	6a3a      	ldr	r2, [r7, #32]
 8001e7a:	4952      	ldr	r1, [pc, #328]	; (8001fc4 <I2C_RequestMemoryRead+0x1cc>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f8fa 	bl	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e097      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f964 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d107      	bne.n	8001eca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e076      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed4:	893b      	ldrh	r3, [r7, #8]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	e021      	b.n	8001f24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ee0:	893b      	ldrh	r3, [r7, #8]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f93e 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d107      	bne.n	8001f16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e050      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f1a:	893b      	ldrh	r3, [r7, #8]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f26:	6a39      	ldr	r1, [r7, #32]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f923 	bl	8002174 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00d      	beq.n	8001f50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d107      	bne.n	8001f4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e035      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f82b 	bl	8001fc8 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f86:	d103      	bne.n	8001f90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e013      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f94:	897b      	ldrh	r3, [r7, #10]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	6a3a      	ldr	r2, [r7, #32]
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <I2C_RequestMemoryRead+0x1cc>)
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f863 	bl	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	00010002 	.word	0x00010002

08001fc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd8:	e025      	b.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d021      	beq.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7fe ff45 	bl	8000e70 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d116      	bne.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e023      	b.n	800206e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10d      	bne.n	800204c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	e00c      	b.n	8002066 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4013      	ands	r3, r2
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	429a      	cmp	r2, r3
 800206a:	d0b6      	beq.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002084:	e051      	b.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002094:	d123      	bne.n	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f043 0204 	orr.w	r2, r3, #4
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e046      	b.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d021      	beq.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7fe fec3 	bl	8000e70 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e020      	b.n	800216c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10c      	bne.n	800214e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e00b      	b.n	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	43da      	mvns	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d18d      	bne.n	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002180:	e02d      	b.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f8ce 	bl	8002324 <I2C_IsAcknowledgeFailed>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e02d      	b.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d021      	beq.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800219a:	f7fe fe69 	bl	8000e70 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d302      	bcc.n	80021b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d116      	bne.n	80021de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0220 	orr.w	r2, r3, #32
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e007      	b.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d1ca      	bne.n	8002182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002202:	e02d      	b.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f88d 	bl	8002324 <I2C_IsAcknowledgeFailed>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e02d      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d021      	beq.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7fe fe28 	bl	8000e70 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d116      	bne.n	8002260 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b04      	cmp	r3, #4
 800226c:	d1ca      	bne.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002284:	e042      	b.n	800230c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b10      	cmp	r3, #16
 8002292:	d119      	bne.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e029      	b.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7fe fdd2 	bl	8000e70 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	2b40      	cmp	r3, #64	; 0x40
 8002318:	d1b5      	bne.n	8002286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800233a:	d11b      	bne.n	8002374 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002344:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f043 0204 	orr.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002384:	b08f      	sub	sp, #60	; 0x3c
 8002386:	af0a      	add	r7, sp, #40	; 0x28
 8002388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e10f      	b.n	80025b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f008 f9f4 	bl	800a79c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2203      	movs	r2, #3
 80023b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fb7d 	bl	8004ad2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	687e      	ldr	r6, [r7, #4]
 80023e0:	466d      	mov	r5, sp
 80023e2:	f106 0410 	add.w	r4, r6, #16
 80023e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023f6:	1d33      	adds	r3, r6, #4
 80023f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fa:	6838      	ldr	r0, [r7, #0]
 80023fc:	f002 fa54 	bl	80048a8 <USB_CoreInit>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0d0      	b.n	80025b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f002 fb6b 	bl	8004af4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e04a      	b.n	80024ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	333d      	adds	r3, #61	; 0x3d
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002438:	7bfa      	ldrb	r2, [r7, #15]
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	333c      	adds	r3, #60	; 0x3c
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	b298      	uxth	r0, r3
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3342      	adds	r3, #66	; 0x42
 8002460:	4602      	mov	r2, r0
 8002462:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	333f      	adds	r3, #63	; 0x3f
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3344      	adds	r3, #68	; 0x44
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3348      	adds	r3, #72	; 0x48
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	3350      	adds	r3, #80	; 0x50
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	3301      	adds	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d3af      	bcc.n	8002424 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e044      	b.n	8002554 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	3301      	adds	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d3b5      	bcc.n	80024ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	687e      	ldr	r6, [r7, #4]
 8002566:	466d      	mov	r5, sp
 8002568:	f106 0410 	add.w	r4, r6, #16
 800256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002578:	e885 0003 	stmia.w	r5, {r0, r1}
 800257c:	1d33      	adds	r3, r6, #4
 800257e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f002 fb03 	bl	8004b8c <USB_DevInit>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e00d      	b.n	80025b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fb7f 	bl	8005cb0 <USB_DevDisconnect>

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_Start+0x1c>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e020      	b.n	800261a <HAL_PCD_Start+0x5e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d109      	bne.n	80025fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d005      	beq.n	80025fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fa55 	bl	8004ab0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fb2f 	bl	8005c6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002622:	b590      	push	{r4, r7, lr}
 8002624:	b08d      	sub	sp, #52	; 0x34
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f003 fbed 	bl	8005e18 <USB_GetMode>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 839d 	bne.w	8002d80 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fb51 	bl	8005cf2 <USB_ReadInterrupts>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8393 	beq.w	8002d7e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fb48 	bl	8005cf2 <USB_ReadInterrupts>
 8002662:	4603      	mov	r3, r0
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d107      	bne.n	800267c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f002 0202 	and.w	r2, r2, #2
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fb36 	bl	8005cf2 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b10      	cmp	r3, #16
 800268e:	d161      	bne.n	8002754 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0210 	bic.w	r2, r2, #16
 800269e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f003 020f 	and.w	r2, r3, #15
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	0c5b      	lsrs	r3, r3, #17
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d124      	bne.n	8002716 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d035      	beq.n	8002744 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80026e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	6a38      	ldr	r0, [r7, #32]
 80026ec:	f003 f96d 	bl	80059ca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026fc:	441a      	add	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800270e:	441a      	add	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	619a      	str	r2, [r3, #24]
 8002714:	e016      	b.n	8002744 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	0c5b      	lsrs	r3, r3, #17
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b06      	cmp	r3, #6
 8002720:	d110      	bne.n	8002744 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002728:	2208      	movs	r2, #8
 800272a:	4619      	mov	r1, r3
 800272c:	6a38      	ldr	r0, [r7, #32]
 800272e:	f003 f94c 	bl	80059ca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800273e:	441a      	add	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0210 	orr.w	r2, r2, #16
 8002752:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 faca 	bl	8005cf2 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002764:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002768:	d16e      	bne.n	8002848 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fad0 	bl	8005d18 <USB_ReadDevAllOutEpInterrupt>
 8002778:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800277a:	e062      	b.n	8002842 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d057      	beq.n	8002836 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f003 faf5 	bl	8005d80 <USB_ReadDevOutEPInterrupt>
 8002796:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ae:	461a      	mov	r2, r3
 80027b0:	2301      	movs	r3, #1
 80027b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fdb0 	bl	800331c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d2:	461a      	mov	r2, r3
 80027d4:	2308      	movs	r3, #8
 80027d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 feaa 	bl	8003534 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f6:	461a      	mov	r2, r3
 80027f8:	2310      	movs	r3, #16
 80027fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	2320      	movs	r3, #32
 8002816:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	461a      	mov	r2, r3
 8002830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002834:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	085b      	lsrs	r3, r3, #1
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d199      	bne.n	800277c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 fa50 	bl	8005cf2 <USB_ReadInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800285c:	f040 80c0 	bne.w	80029e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fa71 	bl	8005d4c <USB_ReadDevAllInEpInterrupt>
 800286a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002870:	e0b2      	b.n	80029d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a7 	beq.w	80029cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fa97 	bl	8005dbc <USB_ReadDevInEPInterrupt>
 800288e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d057      	beq.n	800294a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	2201      	movs	r2, #1
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69f9      	ldr	r1, [r7, #28]
 80028b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028ba:	4013      	ands	r3, r2
 80028bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ca:	461a      	mov	r2, r3
 80028cc:	2301      	movs	r3, #1
 80028ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d132      	bne.n	800293e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	3348      	adds	r3, #72	; 0x48
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4403      	add	r3, r0
 80028f8:	3344      	adds	r3, #68	; 0x44
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4419      	add	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4403      	add	r3, r0
 800290c:	3348      	adds	r3, #72	; 0x48
 800290e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d113      	bne.n	800293e <HAL_PCD_IRQHandler+0x31c>
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3350      	adds	r3, #80	; 0x50
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d108      	bne.n	800293e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002936:	461a      	mov	r2, r3
 8002938:	2101      	movs	r1, #1
 800293a:	f003 fa9f 	bl	8005e7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f007 ffaa 	bl	800a89e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4413      	add	r3, r2
 800295c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002960:	461a      	mov	r2, r3
 8002962:	2308      	movs	r3, #8
 8002964:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800297c:	461a      	mov	r2, r3
 800297e:	2310      	movs	r3, #16
 8002980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002998:	461a      	mov	r2, r3
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b4:	461a      	mov	r2, r3
 80029b6:	2302      	movs	r3, #2
 80029b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fc1b 	bl	8003202 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	3301      	adds	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f47f af49 	bne.w	8002872 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 f984 	bl	8005cf2 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029f4:	d122      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fe26 	bl	8003670 <HAL_PCDEx_LPM_Callback>
 8002a24:	e002      	b.n	8002a2c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f007 ffa6 	bl	800a978 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 f956 	bl	8005cf2 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a50:	d112      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f007 ff62 	bl	800a92c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a76:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 f938 	bl	8005cf2 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8c:	f040 80c7 	bne.w	8002c1e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2110      	movs	r1, #16
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 f9d2 	bl	8004e54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab4:	e056      	b.n	8002b64 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ac8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ada:	0151      	lsls	r1, r2, #5
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	440a      	add	r2, r1
 8002ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ae4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ae8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afa:	0151      	lsls	r1, r2, #5
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	440a      	add	r2, r1
 8002b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	461a      	mov	r2, r3
 8002b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b2e:	0151      	lsls	r1, r2, #5
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	440a      	add	r2, r1
 8002b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4e:	0151      	lsls	r1, r2, #5
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	440a      	add	r2, r1
 8002b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	3301      	adds	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d3a3      	bcc.n	8002ab6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9a:	f043 030b 	orr.w	r3, r3, #11
 8002b9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb0:	f043 030b 	orr.w	r3, r3, #11
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	e015      	b.n	8002be4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002bce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bde:	f043 030b 	orr.w	r3, r3, #11
 8002be2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	69fa      	ldr	r2, [r7, #28]
 8002bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c08:	461a      	mov	r2, r3
 8002c0a:	f003 f937 	bl	8005e7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 f865 	bl	8005cf2 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c32:	d124      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f8fb 	bl	8005e34 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 f963 	bl	8004f0e <USB_GetDevSpeed>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	f001 f92c 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8002c58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f001 fe82 	bl	800496c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f007 fe40 	bl	800a8ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 f835 	bl	8005cf2 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d10a      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f007 fe1d 	bl	800a8d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f002 0208 	and.w	r2, r2, #8
 8002ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 f820 	bl	8005cf2 <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbc:	d10f      	bne.n	8002cde <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f007 fe75 	bl	800a9b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 f805 	bl	8005cf2 <USB_ReadInterrupts>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf2:	d10f      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f007 fe48 	bl	800a994 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 ffea 	bl	8005cf2 <USB_ReadInterrupts>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d10a      	bne.n	8002d40 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f007 fe56 	bl	800a9dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 ffd4 	bl	8005cf2 <USB_ReadInterrupts>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d115      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f007 fe46 	bl	800a9f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	e000      	b.n	8002d80 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d7e:	bf00      	nop
    }
  }
}
 8002d80:	3734      	adds	r7, #52	; 0x34
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd90      	pop	{r4, r7, pc}

08002d86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_SetAddress+0x1a>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e013      	b.n	8002dc8 <HAL_PCD_SetAddress+0x42>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ff32 	bl	8005c22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	70fb      	strb	r3, [r7, #3]
 8002de2:	460b      	mov	r3, r1
 8002de4:	803b      	strh	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da0f      	bge.n	8002e16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	3338      	adds	r3, #56	; 0x38
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	705a      	strb	r2, [r3, #1]
 8002e14:	e00f      	b.n	8002e36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e42:	883a      	ldrh	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	78ba      	ldrb	r2, [r7, #2]
 8002e4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e60:	78bb      	ldrb	r3, [r7, #2]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d102      	bne.n	8002e6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_PCD_EP_Open+0xaa>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e00e      	b.n	8002e98 <HAL_PCD_EP_Open+0xc8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 f865 	bl	8004f58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e96:	7afb      	ldrb	r3, [r7, #11]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da0f      	bge.n	8002ed4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	3338      	adds	r3, #56	; 0x38
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	705a      	strb	r2, [r3, #1]
 8002ed2:	e00f      	b.n	8002ef4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_EP_Close+0x6e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00e      	b.n	8002f2c <HAL_PCD_EP_Close+0x8c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 f8a3 	bl	8005068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	460b      	mov	r3, r1
 8002f42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	7afb      	ldrb	r3, [r7, #11]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f90:	7afb      	ldrb	r3, [r7, #11]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	f002 fb7e 	bl	80056a8 <USB_EP0StartXfer>
 8002fac:	e008      	b.n	8002fc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6979      	ldr	r1, [r7, #20]
 8002fbc:	f002 f930 	bl	8005220 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fec:	681b      	ldr	r3, [r3, #0]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b086      	sub	sp, #24
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	460b      	mov	r3, r1
 8003008:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800300a:	7afb      	ldrb	r3, [r7, #11]
 800300c:	f003 020f 	and.w	r2, r3, #15
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	3338      	adds	r3, #56	; 0x38
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2201      	movs	r2, #1
 8003038:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	b2da      	uxtb	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d102      	bne.n	8003054 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003054:	7afb      	ldrb	r3, [r7, #11]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	f002 fb1c 	bl	80056a8 <USB_EP0StartXfer>
 8003070:	e008      	b.n	8003084 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	f002 f8ce 	bl	8005220 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e050      	b.n	800314e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da0f      	bge.n	80030d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	4613      	mov	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3338      	adds	r3, #56	; 0x38
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	3304      	adds	r3, #4
 80030ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	705a      	strb	r2, [r3, #1]
 80030d2:	e00d      	b.n	80030f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	3304      	adds	r3, #4
 80030e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_SetStall+0x82>
 800310c:	2302      	movs	r3, #2
 800310e:	e01e      	b.n	800314e <HAL_PCD_EP_SetStall+0xc0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f002 fcab 	bl	8005a7a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	b2d9      	uxtb	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800313e:	461a      	mov	r2, r3
 8003140:	f002 fe9c 	bl	8005e7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 020f 	and.w	r2, r3, #15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d901      	bls.n	8003174 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e042      	b.n	80031fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	da0f      	bge.n	800319c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	3338      	adds	r3, #56	; 0x38
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	4413      	add	r3, r2
 8003190:	3304      	adds	r3, #4
 8003192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e00f      	b.n	80031bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_PCD_EP_ClrStall+0x86>
 80031d8:	2302      	movs	r3, #2
 80031da:	e00e      	b.n	80031fa <HAL_PCD_EP_ClrStall+0xa4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fcb3 	bl	8005b56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b08a      	sub	sp, #40	; 0x28
 8003206:	af02      	add	r7, sp, #8
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	3338      	adds	r3, #56	; 0x38
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	3304      	adds	r3, #4
 8003228:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	429a      	cmp	r2, r3
 8003234:	d901      	bls.n	800323a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06c      	b.n	8003314 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	695a      	ldr	r2, [r3, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	d902      	bls.n	8003256 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3303      	adds	r3, #3
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800325e:	e02b      	b.n	80032b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	429a      	cmp	r2, r3
 8003274:	d902      	bls.n	800327c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3303      	adds	r3, #3
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003294:	b2db      	uxtb	r3, r3
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4603      	mov	r3, r0
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f002 fb57 	bl	800594e <USB_WritePacket>

    ep->xfer_buff  += len;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	441a      	add	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d809      	bhi.n	80032e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d203      	bcs.n	80032e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1be      	bne.n	8003260 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d811      	bhi.n	8003312 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	2201      	movs	r2, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	43db      	mvns	r3, r3
 8003308:	6939      	ldr	r1, [r7, #16]
 800330a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800330e:	4013      	ands	r3, r2
 8003310:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	333c      	adds	r3, #60	; 0x3c
 8003334:	3304      	adds	r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 80a0 	bne.w	8003494 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d015      	beq.n	800338a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a72      	ldr	r2, [pc, #456]	; (800352c <PCD_EP_OutXfrComplete_int+0x210>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f240 80dd 	bls.w	8003522 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80d7 	beq.w	8003522 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	6093      	str	r3, [r2, #8]
 8003388:	e0cb      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	2320      	movs	r3, #32
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	e0bc      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f040 80b7 	bne.w	8003522 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a5d      	ldr	r2, [pc, #372]	; (800352c <PCD_EP_OutXfrComplete_int+0x210>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d90f      	bls.n	80033dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d8:	6093      	str	r3, [r2, #8]
 80033da:	e0a2      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	0159      	lsls	r1, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	440b      	add	r3, r1
 80033f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003402:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003416:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4403      	add	r3, r0
 800343a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4419      	add	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4403      	add	r3, r0
 8003450:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003454:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d114      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x16a>
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800347e:	461a      	mov	r2, r3
 8003480:	2101      	movs	r1, #1
 8003482:	f002 fcfb 	bl	8005e7c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f007 f9eb 	bl	800a868 <HAL_PCD_DataOutStageCallback>
 8003492:	e046      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <PCD_EP_OutXfrComplete_int+0x214>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d124      	bne.n	80034e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	461a      	mov	r2, r3
 80034b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b8:	6093      	str	r3, [r2, #8]
 80034ba:	e032      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d008      	beq.n	80034d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	2320      	movs	r3, #32
 80034d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f007 f9c2 	bl	800a868 <HAL_PCD_DataOutStageCallback>
 80034e4:	e01d      	b.n	8003522 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d114      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x1fa>
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800350e:	461a      	mov	r2, r3
 8003510:	2100      	movs	r1, #0
 8003512:	f002 fcb3 	bl	8005e7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f007 f9a3 	bl	800a868 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	4f54300a 	.word	0x4f54300a
 8003530:	4f54310a 	.word	0x4f54310a

08003534 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	333c      	adds	r3, #60	; 0x3c
 800354c:	3304      	adds	r3, #4
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a15      	ldr	r2, [pc, #84]	; (80035bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d90e      	bls.n	8003588 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003580:	461a      	mov	r2, r3
 8003582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003586:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f007 f95b 	bl	800a844 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <PCD_EP_OutSetupPacket_int+0x88>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d90c      	bls.n	80035b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d108      	bne.n	80035b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035a8:	461a      	mov	r2, r3
 80035aa:	2101      	movs	r1, #1
 80035ac:	f002 fc66 	bl	8005e7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	4f54300a 	.word	0x4f54300a

080035c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
 80035cc:	4613      	mov	r3, r2
 80035ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035de:	883b      	ldrh	r3, [r7, #0]
 80035e0:	0419      	lsls	r1, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
 80035ec:	e028      	b.n	8003640 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4413      	add	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e00d      	b.n	800361e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3340      	adds	r3, #64	; 0x40
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	0c1b      	lsrs	r3, r3, #16
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	4413      	add	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	3b01      	subs	r3, #1
 8003624:	429a      	cmp	r2, r3
 8003626:	d3ec      	bcc.n	8003602 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003628:	883b      	ldrh	r3, [r7, #0]
 800362a:	0418      	lsls	r0, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	3b01      	subs	r3, #1
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4302      	orrs	r2, r0
 8003638:	3340      	adds	r3, #64	; 0x40
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e264      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d075      	beq.n	8003792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a6:	4ba3      	ldr	r3, [pc, #652]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00c      	beq.n	80036cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d112      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036be:	4b9d      	ldr	r3, [pc, #628]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	4b99      	ldr	r3, [pc, #612]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05b      	beq.n	8003790 <HAL_RCC_OscConfig+0x108>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d157      	bne.n	8003790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e23f      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ec:	d106      	bne.n	80036fc <HAL_RCC_OscConfig+0x74>
 80036ee:	4b91      	ldr	r3, [pc, #580]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a90      	ldr	r2, [pc, #576]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e01d      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003704:	d10c      	bne.n	8003720 <HAL_RCC_OscConfig+0x98>
 8003706:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a8a      	ldr	r2, [pc, #552]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4b88      	ldr	r3, [pc, #544]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a87      	ldr	r2, [pc, #540]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0xb0>
 8003720:	4b84      	ldr	r3, [pc, #528]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a83      	ldr	r2, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b81      	ldr	r3, [pc, #516]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a80      	ldr	r2, [pc, #512]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d013      	beq.n	8003768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fb96 	bl	8000e70 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd fb92 	bl	8000e70 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e204      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	4b76      	ldr	r3, [pc, #472]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0xc0>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fd fb82 	bl	8000e70 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003770:	f7fd fb7e 	bl	8000e70 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1f0      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	4b6c      	ldr	r3, [pc, #432]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f0      	bne.n	8003770 <HAL_RCC_OscConfig+0xe8>
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d063      	beq.n	8003866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d11c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	4b5c      	ldr	r3, [pc, #368]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1c4      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b56      	ldr	r3, [pc, #344]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4952      	ldr	r1, [pc, #328]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	e03a      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <HAL_RCC_OscConfig+0x2b0>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fd fb37 	bl	8000e70 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003806:	f7fd fb33 	bl	8000e70 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1a5      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b43      	ldr	r3, [pc, #268]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4940      	ldr	r1, [pc, #256]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x2b0>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fd fb16 	bl	8000e70 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fd fb12 	bl	8000e70 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e184      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	4b36      	ldr	r3, [pc, #216]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d030      	beq.n	80038d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_OscConfig+0x2b4>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fd faf6 	bl	8000e70 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003888:	f7fd faf2 	bl	8000e70 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e164      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	4b26      	ldr	r3, [pc, #152]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x200>
 80038a6:	e015      	b.n	80038d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x2b4>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fd fadf 	bl	8000e70 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fd fadb 	bl	8000e70 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e14d      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a0 	beq.w	8003a22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x2ac>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d121      	bne.n	8003962 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_RCC_OscConfig+0x2b8>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fd faa1 	bl	8000e70 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e011      	b.n	8003956 <HAL_RCC_OscConfig+0x2ce>
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	42470000 	.word	0x42470000
 800393c:	42470e80 	.word	0x42470e80
 8003940:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fd fa94 	bl	8000e70 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e106      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b85      	ldr	r3, [pc, #532]	; (8003b6c <HAL_RCC_OscConfig+0x4e4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d106      	bne.n	8003978 <HAL_RCC_OscConfig+0x2f0>
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396e:	4a80      	ldr	r2, [pc, #512]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6713      	str	r3, [r2, #112]	; 0x70
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x32a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x312>
 8003980:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	4a7a      	ldr	r2, [pc, #488]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6713      	str	r3, [r2, #112]	; 0x70
 800398c:	4b78      	ldr	r3, [pc, #480]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4a77      	ldr	r2, [pc, #476]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6713      	str	r3, [r2, #112]	; 0x70
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x32a>
 800399a:	4b75      	ldr	r3, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a74      	ldr	r2, [pc, #464]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fd fa59 	bl	8000e70 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fa55 	bl	8000e70 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0c5      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x33a>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fd fa43 	bl	8000e70 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fd fa3f 	bl	8000e70 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0af      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b56      	ldr	r3, [pc, #344]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	4a55      	ldr	r2, [pc, #340]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 809b 	beq.w	8003b62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d05c      	beq.n	8003af2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d141      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCC_OscConfig+0x4ec>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fd fa13 	bl	8000e70 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fd fa0f 	bl	8000e70 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e081      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	019b      	lsls	r3, r3, #6
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	4937      	ldr	r1, [pc, #220]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_OscConfig+0x4ec>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd f9e8 	bl	8000e70 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fd f9e4 	bl	8000e70 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e056      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab6:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x41c>
 8003ac2:	e04e      	b.n	8003b62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_OscConfig+0x4ec>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd f9d1 	bl	8000e70 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad2:	f7fd f9cd 	bl	8000e70 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e03f      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x44a>
 8003af0:	e037      	b.n	8003b62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e032      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003afe:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <HAL_RCC_OscConfig+0x4e8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d028      	beq.n	8003b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d121      	bne.n	8003b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d11a      	bne.n	8003b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b2e:	4013      	ands	r3, r2
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	3b01      	subs	r3, #1
 8003b48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40007000 	.word	0x40007000
 8003b70:	40023800 	.word	0x40023800
 8003b74:	42470060 	.word	0x42470060

08003b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cc      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d90c      	bls.n	8003bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b63      	ldr	r3, [pc, #396]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0b8      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d020      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bcc:	4b59      	ldr	r3, [pc, #356]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a58      	ldr	r2, [pc, #352]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be4:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a52      	ldr	r2, [pc, #328]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	494d      	ldr	r1, [pc, #308]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d044      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d119      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e07f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c36:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e06f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e067      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c56:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4934      	ldr	r1, [pc, #208]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fd f902 	bl	8000e70 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd f8fe 	bl	8000e70 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e04f      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 020c 	and.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1eb      	bne.n	8003c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d20c      	bcs.n	8003cc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d001      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e032      	b.n	8003d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4916      	ldr	r1, [pc, #88]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cea:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	490e      	ldr	r1, [pc, #56]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cfe:	f000 f821 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003d02:	4602      	mov	r2, r0
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	490a      	ldr	r1, [pc, #40]	; (8003d38 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	5ccb      	ldrb	r3, [r1, r3]
 8003d12:	fa22 f303 	lsr.w	r3, r2, r3
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1c4>)
 8003d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc ffb2 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	40023800 	.word	0x40023800
 8003d38:	0800b088 	.word	0x0800b088
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6079      	str	r1, [r7, #4]
 8003d4e:	2100      	movs	r1, #0
 8003d50:	60f9      	str	r1, [r7, #12]
 8003d52:	2100      	movs	r1, #0
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d56:	2100      	movs	r1, #0
 8003d58:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5a:	4952      	ldr	r1, [pc, #328]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d5c:	6889      	ldr	r1, [r1, #8]
 8003d5e:	f001 010c 	and.w	r1, r1, #12
 8003d62:	2908      	cmp	r1, #8
 8003d64:	d00d      	beq.n	8003d82 <HAL_RCC_GetSysClockFreq+0x3e>
 8003d66:	2908      	cmp	r1, #8
 8003d68:	f200 8094 	bhi.w	8003e94 <HAL_RCC_GetSysClockFreq+0x150>
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x32>
 8003d70:	2904      	cmp	r1, #4
 8003d72:	d003      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x38>
 8003d74:	e08e      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d76:	4b4c      	ldr	r3, [pc, #304]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d78:	60bb      	str	r3, [r7, #8]
       break;
 8003d7a:	e08e      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <HAL_RCC_GetSysClockFreq+0x168>)
 8003d7e:	60bb      	str	r3, [r7, #8]
      break;
 8003d80:	e08b      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d82:	4948      	ldr	r1, [pc, #288]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d84:	6849      	ldr	r1, [r1, #4]
 8003d86:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d8a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d8c:	4945      	ldr	r1, [pc, #276]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d8e:	6849      	ldr	r1, [r1, #4]
 8003d90:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d94:	2900      	cmp	r1, #0
 8003d96:	d024      	beq.n	8003de2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d98:	4942      	ldr	r1, [pc, #264]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d9a:	6849      	ldr	r1, [r1, #4]
 8003d9c:	0989      	lsrs	r1, r1, #6
 8003d9e:	4608      	mov	r0, r1
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003da8:	f04f 0500 	mov.w	r5, #0
 8003dac:	ea00 0204 	and.w	r2, r0, r4
 8003db0:	ea01 0305 	and.w	r3, r1, r5
 8003db4:	493d      	ldr	r1, [pc, #244]	; (8003eac <HAL_RCC_GetSysClockFreq+0x168>)
 8003db6:	fb01 f003 	mul.w	r0, r1, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	fb01 f102 	mul.w	r1, r1, r2
 8003dc0:	1844      	adds	r4, r0, r1
 8003dc2:	493a      	ldr	r1, [pc, #232]	; (8003eac <HAL_RCC_GetSysClockFreq+0x168>)
 8003dc4:	fba2 0101 	umull	r0, r1, r2, r1
 8003dc8:	1863      	adds	r3, r4, r1
 8003dca:	4619      	mov	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	f7fc fa04 	bl	80001e0 <__aeabi_uldivmod>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4613      	mov	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e04a      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	461a      	mov	r2, r3
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	ea02 0400 	and.w	r4, r2, r0
 8003dfa:	ea03 0501 	and.w	r5, r3, r1
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	014b      	lsls	r3, r1, #5
 8003e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e10:	0142      	lsls	r2, r0, #5
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	1b00      	subs	r0, r0, r4
 8003e18:	eb61 0105 	sbc.w	r1, r1, r5
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	018b      	lsls	r3, r1, #6
 8003e26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e2a:	0182      	lsls	r2, r0, #6
 8003e2c:	1a12      	subs	r2, r2, r0
 8003e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f04f 0100 	mov.w	r1, #0
 8003e3a:	00d9      	lsls	r1, r3, #3
 8003e3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e40:	00d0      	lsls	r0, r2, #3
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	1912      	adds	r2, r2, r4
 8003e48:	eb45 0303 	adc.w	r3, r5, r3
 8003e4c:	f04f 0000 	mov.w	r0, #0
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	0299      	lsls	r1, r3, #10
 8003e56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e5a:	0290      	lsls	r0, r2, #10
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	f7fc f9b8 	bl	80001e0 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4613      	mov	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	3301      	adds	r3, #1
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	60bb      	str	r3, [r7, #8]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e96:	60bb      	str	r3, [r7, #8]
      break;
 8003e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	017d7840 	.word	0x017d7840

08003eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ecc:	f7ff fff0 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0a9b      	lsrs	r3, r3, #10
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	0800b098 	.word	0x0800b098

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	f7ff ffdc 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0b5b      	lsrs	r3, r3, #13
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40023800 	.word	0x40023800
 8003f14:	0800b098 	.word	0x0800b098

08003f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	220f      	movs	r2, #15
 8003f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f28:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_GetClockConfig+0x5c>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <HAL_RCC_GetClockConfig+0x5c>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <HAL_RCC_GetClockConfig+0x5c>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_RCC_GetClockConfig+0x60>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0207 	and.w	r2, r3, #7
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40023c00 	.word	0x40023c00

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f839 	bl	800401a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 f9ca 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e044      	b.n	80040d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x6c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d013      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x6c>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1a      	ldr	r2, [pc, #104]	; (80040e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x6c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x6c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_TIM_Base_Start_IT+0xbc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x6c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d010      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e007      	b.n	80040d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40014000 	.word	0x40014000

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0202 	mvn.w	r2, #2
 8004120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8ee 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8e0 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8f1 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8c4 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8b6 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8c7 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f89a 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f88c 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f89d 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f870 	bl	8004318 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f862 	bl	8004304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f873 	bl	800432c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fc34 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8e2 	bl	8004468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f838 	bl	8004340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d10e      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0220 	mvn.w	r2, #32
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8ac 	bl	8004454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a34      	ldr	r2, [pc, #208]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00f      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d00b      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a31      	ldr	r2, [pc, #196]	; (800443c <TIM_Base_SetConfig+0xe8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a30      	ldr	r2, [pc, #192]	; (8004440 <TIM_Base_SetConfig+0xec>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x38>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <TIM_Base_SetConfig+0xf0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a25      	ldr	r2, [pc, #148]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01b      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d017      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a22      	ldr	r2, [pc, #136]	; (800443c <TIM_Base_SetConfig+0xe8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d013      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <TIM_Base_SetConfig+0xec>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00f      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a20      	ldr	r2, [pc, #128]	; (8004444 <TIM_Base_SetConfig+0xf0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00b      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <TIM_Base_SetConfig+0xf4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1e      	ldr	r2, [pc, #120]	; (800444c <TIM_Base_SetConfig+0xf8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <TIM_Base_SetConfig+0xfc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d108      	bne.n	80043f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a08      	ldr	r2, [pc, #32]	; (8004438 <TIM_Base_SetConfig+0xe4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000
 800443c:	40000400 	.word	0x40000400
 8004440:	40000800 	.word	0x40000800
 8004444:	40000c00 	.word	0x40000c00
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e03f      	b.n	800450e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc fba8 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2224      	movs	r2, #36	; 0x24
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f829 	bl	8004518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	b09f      	sub	sp, #124	; 0x7c
 800451e:	af00      	add	r7, sp, #0
 8004520:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800452c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800452e:	68d9      	ldr	r1, [r3, #12]
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	ea40 0301 	orr.w	r3, r0, r1
 8004538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	431a      	orrs	r2, r3
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	431a      	orrs	r2, r3
 800454a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4313      	orrs	r3, r2
 8004550:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800455c:	f021 010c 	bic.w	r1, r1, #12
 8004560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004566:	430b      	orrs	r3, r1
 8004568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004576:	6999      	ldr	r1, [r3, #24]
 8004578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	ea40 0301 	orr.w	r3, r0, r1
 8004580:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4bc5      	ldr	r3, [pc, #788]	; (800489c <UART_SetConfig+0x384>)
 8004588:	429a      	cmp	r2, r3
 800458a:	d004      	beq.n	8004596 <UART_SetConfig+0x7e>
 800458c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4bc3      	ldr	r3, [pc, #780]	; (80048a0 <UART_SetConfig+0x388>)
 8004592:	429a      	cmp	r2, r3
 8004594:	d103      	bne.n	800459e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004596:	f7ff fcab 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 800459a:	6778      	str	r0, [r7, #116]	; 0x74
 800459c:	e002      	b.n	80045a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800459e:	f7ff fc93 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80045a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ac:	f040 80b6 	bne.w	800471c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b2:	461c      	mov	r4, r3
 80045b4:	f04f 0500 	mov.w	r5, #0
 80045b8:	4622      	mov	r2, r4
 80045ba:	462b      	mov	r3, r5
 80045bc:	1891      	adds	r1, r2, r2
 80045be:	6439      	str	r1, [r7, #64]	; 0x40
 80045c0:	415b      	adcs	r3, r3
 80045c2:	647b      	str	r3, [r7, #68]	; 0x44
 80045c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045c8:	1912      	adds	r2, r2, r4
 80045ca:	eb45 0303 	adc.w	r3, r5, r3
 80045ce:	f04f 0000 	mov.w	r0, #0
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	00d9      	lsls	r1, r3, #3
 80045d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045dc:	00d0      	lsls	r0, r2, #3
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	1911      	adds	r1, r2, r4
 80045e4:	6639      	str	r1, [r7, #96]	; 0x60
 80045e6:	416b      	adcs	r3, r5
 80045e8:	667b      	str	r3, [r7, #100]	; 0x64
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045f8:	415b      	adcs	r3, r3
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004604:	f7fb fdec 	bl	80001e0 <__aeabi_uldivmod>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4ba5      	ldr	r3, [pc, #660]	; (80048a4 <UART_SetConfig+0x38c>)
 800460e:	fba3 2302 	umull	r2, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	011e      	lsls	r6, r3, #4
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	461c      	mov	r4, r3
 800461a:	f04f 0500 	mov.w	r5, #0
 800461e:	4622      	mov	r2, r4
 8004620:	462b      	mov	r3, r5
 8004622:	1891      	adds	r1, r2, r2
 8004624:	6339      	str	r1, [r7, #48]	; 0x30
 8004626:	415b      	adcs	r3, r3
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
 800462a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800462e:	1912      	adds	r2, r2, r4
 8004630:	eb45 0303 	adc.w	r3, r5, r3
 8004634:	f04f 0000 	mov.w	r0, #0
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	00d9      	lsls	r1, r3, #3
 800463e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004642:	00d0      	lsls	r0, r2, #3
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	1911      	adds	r1, r2, r4
 800464a:	65b9      	str	r1, [r7, #88]	; 0x58
 800464c:	416b      	adcs	r3, r5
 800464e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	1891      	adds	r1, r2, r2
 800465c:	62b9      	str	r1, [r7, #40]	; 0x28
 800465e:	415b      	adcs	r3, r3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800466a:	f7fb fdb9 	bl	80001e0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4b8c      	ldr	r3, [pc, #560]	; (80048a4 <UART_SetConfig+0x38c>)
 8004674:	fba3 1302 	umull	r1, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2164      	movs	r1, #100	; 0x64
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <UART_SetConfig+0x38c>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004694:	441e      	add	r6, r3
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	4618      	mov	r0, r3
 800469a:	f04f 0100 	mov.w	r1, #0
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	1894      	adds	r4, r2, r2
 80046a4:	623c      	str	r4, [r7, #32]
 80046a6:	415b      	adcs	r3, r3
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ae:	1812      	adds	r2, r2, r0
 80046b0:	eb41 0303 	adc.w	r3, r1, r3
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	f04f 0500 	mov.w	r5, #0
 80046bc:	00dd      	lsls	r5, r3, #3
 80046be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046c2:	00d4      	lsls	r4, r2, #3
 80046c4:	4622      	mov	r2, r4
 80046c6:	462b      	mov	r3, r5
 80046c8:	1814      	adds	r4, r2, r0
 80046ca:	653c      	str	r4, [r7, #80]	; 0x50
 80046cc:	414b      	adcs	r3, r1
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	1891      	adds	r1, r2, r2
 80046dc:	61b9      	str	r1, [r7, #24]
 80046de:	415b      	adcs	r3, r3
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046ea:	f7fb fd79 	bl	80001e0 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <UART_SetConfig+0x38c>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	; 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	3332      	adds	r3, #50	; 0x32
 8004706:	4a67      	ldr	r2, [pc, #412]	; (80048a4 <UART_SetConfig+0x38c>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 0207 	and.w	r2, r3, #7
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4432      	add	r2, r6
 8004718:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800471a:	e0b9      	b.n	8004890 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800471c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471e:	461c      	mov	r4, r3
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	4622      	mov	r2, r4
 8004726:	462b      	mov	r3, r5
 8004728:	1891      	adds	r1, r2, r2
 800472a:	6139      	str	r1, [r7, #16]
 800472c:	415b      	adcs	r3, r3
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004734:	1912      	adds	r2, r2, r4
 8004736:	eb45 0303 	adc.w	r3, r5, r3
 800473a:	f04f 0000 	mov.w	r0, #0
 800473e:	f04f 0100 	mov.w	r1, #0
 8004742:	00d9      	lsls	r1, r3, #3
 8004744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004748:	00d0      	lsls	r0, r2, #3
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	eb12 0804 	adds.w	r8, r2, r4
 8004752:	eb43 0905 	adc.w	r9, r3, r5
 8004756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	008b      	lsls	r3, r1, #2
 800476a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800476e:	0082      	lsls	r2, r0, #2
 8004770:	4640      	mov	r0, r8
 8004772:	4649      	mov	r1, r9
 8004774:	f7fb fd34 	bl	80001e0 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <UART_SetConfig+0x38c>)
 800477e:	fba3 2302 	umull	r2, r3, r3, r2
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	011e      	lsls	r6, r3, #4
 8004786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004788:	4618      	mov	r0, r3
 800478a:	f04f 0100 	mov.w	r1, #0
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	1894      	adds	r4, r2, r2
 8004794:	60bc      	str	r4, [r7, #8]
 8004796:	415b      	adcs	r3, r3
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800479e:	1812      	adds	r2, r2, r0
 80047a0:	eb41 0303 	adc.w	r3, r1, r3
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	f04f 0500 	mov.w	r5, #0
 80047ac:	00dd      	lsls	r5, r3, #3
 80047ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047b2:	00d4      	lsls	r4, r2, #3
 80047b4:	4622      	mov	r2, r4
 80047b6:	462b      	mov	r3, r5
 80047b8:	1814      	adds	r4, r2, r0
 80047ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80047bc:	414b      	adcs	r3, r1
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f04f 0100 	mov.w	r1, #0
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047d8:	0082      	lsls	r2, r0, #2
 80047da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047de:	f7fb fcff 	bl	80001e0 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <UART_SetConfig+0x38c>)
 80047e8:	fba3 1302 	umull	r1, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	2164      	movs	r1, #100	; 0x64
 80047f0:	fb01 f303 	mul.w	r3, r1, r3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	3332      	adds	r3, #50	; 0x32
 80047fa:	4a2a      	ldr	r2, [pc, #168]	; (80048a4 <UART_SetConfig+0x38c>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	441e      	add	r6, r3
 8004808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800480a:	4618      	mov	r0, r3
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	1894      	adds	r4, r2, r2
 8004816:	603c      	str	r4, [r7, #0]
 8004818:	415b      	adcs	r3, r3
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004820:	1812      	adds	r2, r2, r0
 8004822:	eb41 0303 	adc.w	r3, r1, r3
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	f04f 0500 	mov.w	r5, #0
 800482e:	00dd      	lsls	r5, r3, #3
 8004830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004834:	00d4      	lsls	r4, r2, #3
 8004836:	4622      	mov	r2, r4
 8004838:	462b      	mov	r3, r5
 800483a:	eb12 0a00 	adds.w	sl, r2, r0
 800483e:	eb43 0b01 	adc.w	fp, r3, r1
 8004842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	008b      	lsls	r3, r1, #2
 8004856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800485a:	0082      	lsls	r2, r0, #2
 800485c:	4650      	mov	r0, sl
 800485e:	4659      	mov	r1, fp
 8004860:	f7fb fcbe 	bl	80001e0 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <UART_SetConfig+0x38c>)
 800486a:	fba3 1302 	umull	r1, r3, r3, r2
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	2164      	movs	r1, #100	; 0x64
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	3332      	adds	r3, #50	; 0x32
 800487c:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <UART_SetConfig+0x38c>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4432      	add	r2, r6
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	377c      	adds	r7, #124	; 0x7c
 8004894:	46bd      	mov	sp, r7
 8004896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489a:	bf00      	nop
 800489c:	40011000 	.word	0x40011000
 80048a0:	40011400 	.word	0x40011400
 80048a4:	51eb851f 	.word	0x51eb851f

080048a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a8:	b084      	sub	sp, #16
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	f107 001c 	add.w	r0, r7, #28
 80048b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d122      	bne.n	8004906 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d105      	bne.n	80048fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f001 fb1c 	bl	8005f38 <USB_CoreReset>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	e01a      	b.n	800493c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 fb10 	bl	8005f38 <USB_CoreReset>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800491c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
 800492e:	e005      	b.n	800493c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10b      	bne.n	800495a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f043 0206 	orr.w	r2, r3, #6
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f043 0220 	orr.w	r2, r3, #32
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004966:	b004      	add	sp, #16
 8004968:	4770      	bx	lr
	...

0800496c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	4613      	mov	r3, r2
 8004978:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d165      	bne.n	8004a4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a41      	ldr	r2, [pc, #260]	; (8004a88 <USB_SetTurnaroundTime+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d906      	bls.n	8004996 <USB_SetTurnaroundTime+0x2a>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <USB_SetTurnaroundTime+0x120>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d202      	bcs.n	8004996 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004990:	230f      	movs	r3, #15
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e062      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <USB_SetTurnaroundTime+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d306      	bcc.n	80049ac <USB_SetTurnaroundTime+0x40>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <USB_SetTurnaroundTime+0x124>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d202      	bcs.n	80049ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049a6:	230e      	movs	r3, #14
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e057      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <USB_SetTurnaroundTime+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d306      	bcc.n	80049c2 <USB_SetTurnaroundTime+0x56>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4a37      	ldr	r2, [pc, #220]	; (8004a94 <USB_SetTurnaroundTime+0x128>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d202      	bcs.n	80049c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80049bc:	230d      	movs	r3, #13
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e04c      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <USB_SetTurnaroundTime+0x128>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d306      	bcc.n	80049d8 <USB_SetTurnaroundTime+0x6c>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4a32      	ldr	r2, [pc, #200]	; (8004a98 <USB_SetTurnaroundTime+0x12c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d802      	bhi.n	80049d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049d2:	230c      	movs	r3, #12
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	e041      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4a2f      	ldr	r2, [pc, #188]	; (8004a98 <USB_SetTurnaroundTime+0x12c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d906      	bls.n	80049ee <USB_SetTurnaroundTime+0x82>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4a2e      	ldr	r2, [pc, #184]	; (8004a9c <USB_SetTurnaroundTime+0x130>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d802      	bhi.n	80049ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049e8:	230b      	movs	r3, #11
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e036      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <USB_SetTurnaroundTime+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d906      	bls.n	8004a04 <USB_SetTurnaroundTime+0x98>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a29      	ldr	r2, [pc, #164]	; (8004aa0 <USB_SetTurnaroundTime+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d802      	bhi.n	8004a04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049fe:	230a      	movs	r3, #10
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e02b      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <USB_SetTurnaroundTime+0x134>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d906      	bls.n	8004a1a <USB_SetTurnaroundTime+0xae>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <USB_SetTurnaroundTime+0x138>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d202      	bcs.n	8004a1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a14:	2309      	movs	r3, #9
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e020      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <USB_SetTurnaroundTime+0x138>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d306      	bcc.n	8004a30 <USB_SetTurnaroundTime+0xc4>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4a20      	ldr	r2, [pc, #128]	; (8004aa8 <USB_SetTurnaroundTime+0x13c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d802      	bhi.n	8004a30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e015      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <USB_SetTurnaroundTime+0x13c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d906      	bls.n	8004a46 <USB_SetTurnaroundTime+0xda>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <USB_SetTurnaroundTime+0x140>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d202      	bcs.n	8004a46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a40:	2307      	movs	r3, #7
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e00a      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a46:	2306      	movs	r3, #6
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e007      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a52:	2309      	movs	r3, #9
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e001      	b.n	8004a5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a58:	2309      	movs	r3, #9
 8004a5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	029b      	lsls	r3, r3, #10
 8004a70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a74:	431a      	orrs	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	00d8acbf 	.word	0x00d8acbf
 8004a8c:	00e4e1c0 	.word	0x00e4e1c0
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	01067380 	.word	0x01067380
 8004a98:	011a499f 	.word	0x011a499f
 8004a9c:	01312cff 	.word	0x01312cff
 8004aa0:	014ca43f 	.word	0x014ca43f
 8004aa4:	016e3600 	.word	0x016e3600
 8004aa8:	01a6ab1f 	.word	0x01a6ab1f
 8004aac:	01e84800 	.word	0x01e84800

08004ab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f043 0201 	orr.w	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d115      	bne.n	8004b42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7fc f9b0 	bl	8000e88 <HAL_Delay>
      ms++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 f972 	bl	8005e18 <USB_GetMode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d01e      	beq.n	8004b78 <USB_SetCurrentMode+0x84>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b31      	cmp	r3, #49	; 0x31
 8004b3e:	d9f0      	bls.n	8004b22 <USB_SetCurrentMode+0x2e>
 8004b40:	e01a      	b.n	8004b78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d115      	bne.n	8004b74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b54:	2001      	movs	r0, #1
 8004b56:	f7fc f997 	bl	8000e88 <HAL_Delay>
      ms++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f001 f959 	bl	8005e18 <USB_GetMode>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <USB_SetCurrentMode+0x84>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b31      	cmp	r3, #49	; 0x31
 8004b70:	d9f0      	bls.n	8004b54 <USB_SetCurrentMode+0x60>
 8004b72:	e001      	b.n	8004b78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e005      	b.n	8004b84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b32      	cmp	r3, #50	; 0x32
 8004b7c:	d101      	bne.n	8004b82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e009      	b.n	8004bc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3340      	adds	r3, #64	; 0x40
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b0e      	cmp	r3, #14
 8004bc4:	d9f2      	bls.n	8004bac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11c      	bne.n	8004c06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bda:	f043 0302 	orr.w	r3, r3, #2
 8004bde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
 8004c04:	e00b      	b.n	8004c1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c24:	461a      	mov	r2, r3
 8004c26:	2300      	movs	r3, #0
 8004c28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	4619      	mov	r1, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c38:	461a      	mov	r2, r3
 8004c3a:	680b      	ldr	r3, [r1, #0]
 8004c3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10c      	bne.n	8004c5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f945 	bl	8004edc <USB_SetDevSpeed>
 8004c52:	e008      	b.n	8004c66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c54:	2101      	movs	r1, #1
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f940 	bl	8004edc <USB_SetDevSpeed>
 8004c5c:	e003      	b.n	8004c66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c5e:	2103      	movs	r1, #3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f93b 	bl	8004edc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c66:	2110      	movs	r1, #16
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8f3 	bl	8004e54 <USB_FlushTxFifo>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f90f 	bl	8004e9c <USB_FlushRxFifo>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	e043      	b.n	8004d3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cc8:	d118      	bne.n	8004cfc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	015a      	lsls	r2, r3, #5
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce2:	6013      	str	r3, [r2, #0]
 8004ce4:	e013      	b.n	8004d0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e008      	b.n	8004d0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3301      	adds	r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d3b7      	bcc.n	8004cb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	e043      	b.n	8004dd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d5e:	d118      	bne.n	8004d92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e013      	b.n	8004da4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e008      	b.n	8004da4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2300      	movs	r3, #0
 8004da2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d3b7      	bcc.n	8004d48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004df8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f043 0210 	orr.w	r2, r3, #16
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <USB_DevInit+0x2c4>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f043 0208 	orr.w	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d107      	bne.n	8004e40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e4c:	b004      	add	sp, #16
 8004e4e:	4770      	bx	lr
 8004e50:	803c3800 	.word	0x803c3800

08004e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	f043 0220 	orr.w	r2, r3, #32
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3301      	adds	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <USB_FlushTxFifo+0x44>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e006      	b.n	8004e8c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d0f1      	beq.n	8004e6e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	00030d40 	.word	0x00030d40

08004e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2210      	movs	r2, #16
 8004eac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <USB_FlushRxFifo+0x3c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e006      	b.n	8004ecc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d0f1      	beq.n	8004eae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	00030d40 	.word	0x00030d40

08004edc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b087      	sub	sp, #28
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0306 	and.w	r3, r3, #6
 8004f26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
 8004f32:	e00a      	b.n	8004f4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d002      	beq.n	8004f40 <USB_GetDevSpeed+0x32>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d102      	bne.n	8004f46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f40:	2302      	movs	r3, #2
 8004f42:	75fb      	strb	r3, [r7, #23]
 8004f44:	e001      	b.n	8004f4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f46:	230f      	movs	r3, #15
 8004f48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d13a      	bne.n	8004fea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	68f9      	ldr	r1, [r7, #12]
 8004f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d155      	bne.n	8005058 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	059b      	lsls	r3, r3, #22
 8004fce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e036      	b.n	8005058 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005008:	4313      	orrs	r3, r2
 800500a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11a      	bne.n	8005058 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800503e:	430b      	orrs	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	0151      	lsls	r1, r2, #5
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	440a      	add	r2, r1
 800504a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800504e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005056:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d161      	bne.n	8005148 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800509a:	d11f      	bne.n	80050dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	68f9      	ldr	r1, [r7, #12]
 80050f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fc:	4013      	ands	r3, r2
 80050fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	b29b      	uxth	r3, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005120:	4013      	ands	r3, r2
 8005122:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	440b      	add	r3, r1
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	4619      	mov	r1, r3
 8005140:	4b35      	ldr	r3, [pc, #212]	; (8005218 <USB_DeactivateEndpoint+0x1b0>)
 8005142:	4013      	ands	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
 8005146:	e060      	b.n	800520a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515e:	d11f      	bne.n	80051a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800517e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800519e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	43db      	mvns	r3, r3
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051c0:	4013      	ands	r3, r2
 80051c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	43db      	mvns	r3, r3
 80051de:	68f9      	ldr	r1, [r7, #12]
 80051e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e4:	4013      	ands	r3, r2
 80051e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	0159      	lsls	r1, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	440b      	add	r3, r1
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	4619      	mov	r1, r3
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <USB_DeactivateEndpoint+0x1b4>)
 8005206:	4013      	ands	r3, r2
 8005208:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	ec337800 	.word	0xec337800
 800521c:	eff37800 	.word	0xeff37800

08005220 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	785b      	ldrb	r3, [r3, #1]
 800523c:	2b01      	cmp	r3, #1
 800523e:	f040 815c 	bne.w	80054fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d132      	bne.n	80052b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005264:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005268:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800526c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800528c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	0cdb      	lsrs	r3, r3, #19
 80052aa:	04db      	lsls	r3, r3, #19
 80052ac:	6113      	str	r3, [r2, #16]
 80052ae:	e074      	b.n	800539a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	0cdb      	lsrs	r3, r3, #19
 80052cc:	04db      	lsls	r3, r3, #19
 80052ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6959      	ldr	r1, [r3, #20]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	440b      	add	r3, r1
 800530c:	1e59      	subs	r1, r3, #1
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	fbb1 f3f3 	udiv	r3, r1, r3
 8005316:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005318:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <USB_EPStartXfer+0x370>)
 800531a:	400b      	ands	r3, r1
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	0148      	lsls	r0, r1, #5
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	4401      	add	r1, r0
 8005324:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005342:	69b9      	ldr	r1, [r7, #24]
 8005344:	0148      	lsls	r0, r1, #5
 8005346:	69f9      	ldr	r1, [r7, #28]
 8005348:	4401      	add	r1, r0
 800534a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800534e:	4313      	orrs	r3, r2
 8005350:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	78db      	ldrb	r3, [r3, #3]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d11f      	bne.n	800539a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005374:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005378:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005394:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005398:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d14b      	bne.n	8005438 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	78db      	ldrb	r3, [r3, #3]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d128      	bne.n	8005416 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d110      	bne.n	80053f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e00f      	b.n	8005416 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e12f      	b.n	8005698 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005456:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d015      	beq.n	800548c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8117 	beq.w	8005698 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	2101      	movs	r1, #1
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005486:	4313      	orrs	r3, r2
 8005488:	634b      	str	r3, [r1, #52]	; 0x34
 800548a:	e105      	b.n	8005698 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	2b00      	cmp	r3, #0
 800549a:	d110      	bne.n	80054be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	e00f      	b.n	80054de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	015a      	lsls	r2, r3, #5
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	0151      	lsls	r1, r2, #5
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	440a      	add	r2, r1
 80054d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781a      	ldrb	r2, [r3, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	b298      	uxth	r0, r3
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	4603      	mov	r3, r0
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fa2b 	bl	800594e <USB_WritePacket>
 80054f8:	e0ce      	b.n	8005698 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	69fa      	ldr	r2, [r7, #28]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005514:	0cdb      	lsrs	r3, r3, #19
 8005516:	04db      	lsls	r3, r3, #19
 8005518:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800553c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d126      	bne.n	8005594 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	0148      	lsls	r0, r1, #5
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	4401      	add	r1, r0
 8005564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800558a:	6113      	str	r3, [r2, #16]
 800558c:	e036      	b.n	80055fc <USB_EPStartXfer+0x3dc>
 800558e:	bf00      	nop
 8005590:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4413      	add	r3, r2
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	8afb      	ldrh	r3, [r7, #22]
 80055ba:	04d9      	lsls	r1, r3, #19
 80055bc:	4b39      	ldr	r3, [pc, #228]	; (80056a4 <USB_EPStartXfer+0x484>)
 80055be:	400b      	ands	r3, r1
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	0148      	lsls	r0, r1, #5
 80055c4:	69f9      	ldr	r1, [r7, #28]
 80055c6:	4401      	add	r1, r0
 80055c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055cc:	4313      	orrs	r3, r2
 80055ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	8af9      	ldrh	r1, [r7, #22]
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	0148      	lsls	r0, r1, #5
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	4401      	add	r1, r0
 80055f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10d      	bne.n	800561e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	460a      	mov	r2, r1
 800561c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	78db      	ldrb	r3, [r3, #3]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d128      	bne.n	8005678 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e00f      	b.n	8005678 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005676:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	1ff80000 	.word	0x1ff80000

080056a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	f040 80cd 	bne.w	8005864 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d132      	bne.n	8005738 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	0cdb      	lsrs	r3, r3, #19
 8005732:	04db      	lsls	r3, r3, #19
 8005734:	6113      	str	r3, [r2, #16]
 8005736:	e04e      	b.n	80057d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	0cdb      	lsrs	r3, r3, #19
 8005754:	04db      	lsls	r3, r3, #19
 8005756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800577a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	429a      	cmp	r2, r3
 8005786:	d903      	bls.n	8005790 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c6:	6939      	ldr	r1, [r7, #16]
 80057c8:	0148      	lsls	r0, r1, #5
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	4401      	add	r1, r0
 80057ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11e      	bne.n	800581a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d009      	beq.n	80057f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e092      	b.n	8005940 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005838:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d07e      	beq.n	8005940 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	2101      	movs	r1, #1
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585e:	4313      	orrs	r3, r2
 8005860:	634b      	str	r3, [r1, #52]	; 0x34
 8005862:	e06d      	b.n	8005940 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800587e:	0cdb      	lsrs	r3, r3, #19
 8005880:	04db      	lsls	r3, r3, #19
 8005882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ee:	6939      	ldr	r1, [r7, #16]
 80058f0:	0148      	lsls	r0, r1, #5
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	4401      	add	r1, r0
 80058f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d10d      	bne.n	8005920 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	68d9      	ldr	r1, [r3, #12]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	460a      	mov	r2, r1
 800591e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800593e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800594e:	b480      	push	{r7}
 8005950:	b089      	sub	sp, #36	; 0x24
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4611      	mov	r1, r2
 800595a:	461a      	mov	r2, r3
 800595c:	460b      	mov	r3, r1
 800595e:	71fb      	strb	r3, [r7, #7]
 8005960:	4613      	mov	r3, r2
 8005962:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800596c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005970:	2b00      	cmp	r3, #0
 8005972:	d123      	bne.n	80059bc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005974:	88bb      	ldrh	r3, [r7, #4]
 8005976:	3303      	adds	r3, #3
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e018      	b.n	80059b4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	031a      	lsls	r2, r3, #12
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598e:	461a      	mov	r2, r3
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	3301      	adds	r3, #1
 800599a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3301      	adds	r3, #1
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d3e2      	bcc.n	8005982 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3724      	adds	r7, #36	; 0x24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b08b      	sub	sp, #44	; 0x2c
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	4613      	mov	r3, r2
 80059d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059f0:	2300      	movs	r3, #0
 80059f2:	623b      	str	r3, [r7, #32]
 80059f4:	e014      	b.n	8005a20 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	3301      	adds	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	3301      	adds	r3, #1
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	3301      	adds	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	6a3a      	ldr	r2, [r7, #32]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d3e6      	bcc.n	80059f6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a28:	8bfb      	ldrh	r3, [r7, #30]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d01e      	beq.n	8005a6c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f107 0310 	add.w	r3, r7, #16
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	701a      	strb	r2, [r3, #0]
      i++;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	3301      	adds	r3, #1
 8005a58:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005a60:	8bfb      	ldrh	r3, [r7, #30]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a66:	8bfb      	ldrh	r3, [r7, #30]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1ea      	bne.n	8005a42 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	372c      	adds	r7, #44	; 0x2c
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d12c      	bne.n	8005af0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db12      	blt.n	8005ace <USB_EPSetStall+0x54>
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00f      	beq.n	8005ace <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005acc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e02b      	b.n	8005b48 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	db12      	blt.n	8005b28 <USB_EPSetStall+0xae>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00f      	beq.n	8005b28 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d128      	bne.n	8005bc4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d003      	beq.n	8005ba2 <USB_EPClearStall+0x4c>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	78db      	ldrb	r3, [r3, #3]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d138      	bne.n	8005c14 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e027      	b.n	8005c14 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	78db      	ldrb	r3, [r3, #3]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d003      	beq.n	8005bf4 <USB_EPClearStall+0x9e>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d10f      	bne.n	8005c14 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c44:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c88:	f023 0303 	bic.w	r3, r3, #3
 8005c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9c:	f023 0302 	bic.w	r3, r3, #2
 8005ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cde:	f043 0302 	orr.w	r3, r3, #2
 8005ce2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4013      	ands	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	0c1b      	lsrs	r3, r3, #16
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	b29b      	uxth	r3, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	4013      	ands	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dae:	68bb      	ldr	r3, [r7, #8]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	01db      	lsls	r3, r3, #7
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	f003 0301 	and.w	r3, r3, #1
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	333c      	adds	r3, #60	; 0x3c
 8005e92:	3304      	adds	r3, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <USB_EP0_OutStart+0xb8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d90a      	bls.n	8005eb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb0:	d101      	bne.n	8005eb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e037      	b.n	8005f26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee4:	f043 0318 	orr.w	r3, r3, #24
 8005ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005efc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10f      	bne.n	8005f24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	4f54300a 	.word	0x4f54300a

08005f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <USB_CoreReset+0x60>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e01a      	b.n	8005f8a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	daf3      	bge.n	8005f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <USB_CoreReset+0x60>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e006      	b.n	8005f8a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d0f1      	beq.n	8005f6c <USB_CoreReset+0x34>

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	00030d40 	.word	0x00030d40

08005f9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005fac:	f004 febc 	bl	800ad28 <USBD_static_malloc>
 8005fb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e066      	b.n	8006092 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7c1b      	ldrb	r3, [r3, #16]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d119      	bne.n	8006008 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd8:	2202      	movs	r2, #2
 8005fda:	2181      	movs	r1, #129	; 0x81
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f004 fd80 	bl	800aae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fec:	2202      	movs	r2, #2
 8005fee:	2101      	movs	r1, #1
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f004 fd76 	bl	800aae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2210      	movs	r2, #16
 8006002:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006006:	e016      	b.n	8006036 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006008:	2340      	movs	r3, #64	; 0x40
 800600a:	2202      	movs	r2, #2
 800600c:	2181      	movs	r1, #129	; 0x81
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f004 fd67 	bl	800aae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	2202      	movs	r2, #2
 800601e:	2101      	movs	r1, #1
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f004 fd5e 	bl	800aae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2210      	movs	r2, #16
 8006032:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006036:	2308      	movs	r3, #8
 8006038:	2203      	movs	r2, #3
 800603a:	2182      	movs	r1, #130	; 0x82
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f004 fd50 	bl	800aae2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7c1b      	ldrb	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006076:	2101      	movs	r1, #1
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f004 fe21 	bl	800acc0 <USBD_LL_PrepareReceive>
 800607e:	e007      	b.n	8006090 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	2101      	movs	r1, #1
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f004 fe18 	bl	800acc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060a6:	2181      	movs	r1, #129	; 0x81
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f004 fd40 	bl	800ab2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060b4:	2101      	movs	r1, #1
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f004 fd39 	bl	800ab2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060c4:	2182      	movs	r1, #130	; 0x82
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f004 fd31 	bl	800ab2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f6:	4618      	mov	r0, r3
 80060f8:	f004 fe24 	bl	800ad44 <USBD_static_free>
    pdev->pClassData = NULL;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006120:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	e0af      	b.n	8006298 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006140:	2b00      	cmp	r3, #0
 8006142:	d03f      	beq.n	80061c4 <USBD_CDC_Setup+0xb4>
 8006144:	2b20      	cmp	r3, #32
 8006146:	f040 809f 	bne.w	8006288 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	88db      	ldrh	r3, [r3, #6]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d02e      	beq.n	80061b0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b25b      	sxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	da16      	bge.n	800618a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006168:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	88d2      	ldrh	r2, [r2, #6]
 800616e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	88db      	ldrh	r3, [r3, #6]
 8006174:	2b07      	cmp	r3, #7
 8006176:	bf28      	it	cs
 8006178:	2307      	movcs	r3, #7
 800617a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	89fa      	ldrh	r2, [r7, #14]
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 fae9 	bl	800775a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006188:	e085      	b.n	8006296 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	785a      	ldrb	r2, [r3, #1]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	88db      	ldrh	r3, [r3, #6]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80061a0:	6939      	ldr	r1, [r7, #16]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	88db      	ldrh	r3, [r3, #6]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 fb02 	bl	80077b2 <USBD_CtlPrepareRx>
      break;
 80061ae:	e072      	b.n	8006296 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	7850      	ldrb	r0, [r2, #1]
 80061bc:	2200      	movs	r2, #0
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	4798      	blx	r3
      break;
 80061c2:	e068      	b.n	8006296 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b0b      	cmp	r3, #11
 80061ca:	d852      	bhi.n	8006272 <USBD_CDC_Setup+0x162>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBD_CDC_Setup+0xc4>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	08006205 	.word	0x08006205
 80061d8:	08006281 	.word	0x08006281
 80061dc:	08006273 	.word	0x08006273
 80061e0:	08006273 	.word	0x08006273
 80061e4:	08006273 	.word	0x08006273
 80061e8:	08006273 	.word	0x08006273
 80061ec:	08006273 	.word	0x08006273
 80061f0:	08006273 	.word	0x08006273
 80061f4:	08006273 	.word	0x08006273
 80061f8:	08006273 	.word	0x08006273
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	08006259 	.word	0x08006259
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d107      	bne.n	8006220 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006210:	f107 030a 	add.w	r3, r7, #10
 8006214:	2202      	movs	r2, #2
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fa9e 	bl	800775a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800621e:	e032      	b.n	8006286 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fa28 	bl	8007678 <USBD_CtlError>
            ret = USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	75fb      	strb	r3, [r7, #23]
          break;
 800622c:	e02b      	b.n	8006286 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d107      	bne.n	800624a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800623a:	f107 030d 	add.w	r3, r7, #13
 800623e:	2201      	movs	r2, #1
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 fa89 	bl	800775a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006248:	e01d      	b.n	8006286 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fa13 	bl	8007678 <USBD_CtlError>
            ret = USBD_FAIL;
 8006252:	2303      	movs	r3, #3
 8006254:	75fb      	strb	r3, [r7, #23]
          break;
 8006256:	e016      	b.n	8006286 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d00f      	beq.n	8006284 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 fa06 	bl	8007678 <USBD_CtlError>
            ret = USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006270:	e008      	b.n	8006284 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 f9ff 	bl	8007678 <USBD_CtlError>
          ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
          break;
 800627e:	e002      	b.n	8006286 <USBD_CDC_Setup+0x176>
          break;
 8006280:	bf00      	nop
 8006282:	e008      	b.n	8006296 <USBD_CDC_Setup+0x186>
          break;
 8006284:	bf00      	nop
      }
      break;
 8006286:	e006      	b.n	8006296 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f001 f9f4 	bl	8007678 <USBD_CtlError>
      ret = USBD_FAIL;
 8006290:	2303      	movs	r3, #3
 8006292:	75fb      	strb	r3, [r7, #23]
      break;
 8006294:	bf00      	nop
  }

  return (uint8_t)ret;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062be:	2303      	movs	r3, #3
 80062c0:	e04f      	b.n	8006362 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3318      	adds	r3, #24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d029      	beq.n	8006334 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	3318      	adds	r3, #24
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	78f9      	ldrb	r1, [r7, #3]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	460b      	mov	r3, r1
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4403      	add	r3, r0
 8006300:	3344      	adds	r3, #68	; 0x44
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	fbb2 f1f3 	udiv	r1, r2, r3
 8006308:	fb03 f301 	mul.w	r3, r3, r1
 800630c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800630e:	2b00      	cmp	r3, #0
 8006310:	d110      	bne.n	8006334 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	3318      	adds	r3, #24
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006326:	78f9      	ldrb	r1, [r7, #3]
 8006328:	2300      	movs	r3, #0
 800632a:	2200      	movs	r2, #0
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f004 fca6 	bl	800ac7e <USBD_LL_Transmit>
 8006332:	e015      	b.n	8006360 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	460b      	mov	r3, r1
 8006374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e015      	b.n	80063b8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f004 fcb6 	bl	800ad02 <USBD_LL_GetRxDataSize>
 8006396:	4602      	mov	r2, r0
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80063b2:	4611      	mov	r1, r2
 80063b4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e01b      	b.n	8006412 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d015      	beq.n	8006410 <USBD_CDC_EP0_RxReady+0x50>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d010      	beq.n	8006410 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80063fc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006404:	b292      	uxth	r2, r2
 8006406:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	22ff      	movs	r2, #255	; 0xff
 800640c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2243      	movs	r2, #67	; 0x43
 8006428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800642a:	4b03      	ldr	r3, [pc, #12]	; (8006438 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20000094 	.word	0x20000094

0800643c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2243      	movs	r2, #67	; 0x43
 8006448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000050 	.word	0x20000050

0800645c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2243      	movs	r2, #67	; 0x43
 8006468:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800646a:	4b03      	ldr	r3, [pc, #12]	; (8006478 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	200000d8 	.word	0x200000d8

0800647c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	220a      	movs	r2, #10
 8006488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800648a:	4b03      	ldr	r3, [pc, #12]	; (8006498 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	2000000c 	.word	0x2000000c

0800649c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e004      	b.n	80064ba <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b087      	sub	sp, #28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e008      	b.n	80064f6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006512:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	e004      	b.n	8006528 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	e016      	b.n	8006580 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	7c1b      	ldrb	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006564:	2101      	movs	r1, #1
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f004 fbaa 	bl	800acc0 <USBD_LL_PrepareReceive>
 800656c:	e007      	b.n	800657e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	2101      	movs	r1, #1
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f004 fba1 	bl	800acc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e01f      	b.n	80065e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	79fa      	ldrb	r2, [r7, #7]
 80065d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f004 fa1d 	bl	800aa14 <USBD_LL_Init>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e016      	b.n	800662e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	f107 020e 	add.w	r2, r7, #14
 8006620:	4610      	mov	r0, r2
 8006622:	4798      	blx	r3
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f004 fa34 	bl	800aaac <USBD_LL_Start>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006670:	2303      	movs	r3, #3
 8006672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	4611      	mov	r1, r2
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006692:	7bfb      	ldrb	r3, [r7, #15]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4611      	mov	r1, r2
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
  }

  return USBD_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 ff90 	bl	8007604 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	2b02      	cmp	r3, #2
 8006706:	d01a      	beq.n	800673e <USBD_LL_SetupStage+0x72>
 8006708:	2b02      	cmp	r3, #2
 800670a:	d822      	bhi.n	8006752 <USBD_LL_SetupStage+0x86>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <USBD_LL_SetupStage+0x4a>
 8006710:	2b01      	cmp	r3, #1
 8006712:	d00a      	beq.n	800672a <USBD_LL_SetupStage+0x5e>
 8006714:	e01d      	b.n	8006752 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa62 	bl	8006be8 <USBD_StdDevReq>
 8006724:	4603      	mov	r3, r0
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e020      	b.n	800676c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006730:	4619      	mov	r1, r3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fac6 	bl	8006cc4 <USBD_StdItfReq>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e016      	b.n	800676c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fb05 	bl	8006d56 <USBD_StdEPReq>
 800674c:	4603      	mov	r3, r0
 800674e:	73fb      	strb	r3, [r7, #15]
      break;
 8006750:	e00c      	b.n	800676c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f004 fa03 	bl	800ab6c <USBD_LL_StallEP>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]
      break;
 800676a:	bf00      	nop
  }

  return ret;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b086      	sub	sp, #24
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	460b      	mov	r3, r1
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d138      	bne.n	80067fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006790:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006798:	2b03      	cmp	r3, #3
 800679a:	d14a      	bne.n	8006832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d913      	bls.n	80067d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	1ad2      	subs	r2, r2, r3
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	4293      	cmp	r3, r2
 80067c0:	bf28      	it	cs
 80067c2:	4613      	movcs	r3, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f001 f80f 	bl	80077ec <USBD_CtlContinueRx>
 80067ce:	e030      	b.n	8006832 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d10b      	bne.n	80067f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 f80a 	bl	800780e <USBD_CtlSendStatus>
 80067fa:	e01a      	b.n	8006832 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b03      	cmp	r3, #3
 8006806:	d114      	bne.n	8006832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	7afa      	ldrb	r2, [r7, #11]
 800681e:	4611      	mov	r1, r2
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	4798      	blx	r3
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	e000      	b.n	8006834 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	460b      	mov	r3, r1
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d16b      	bne.n	8006928 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3314      	adds	r3, #20
 8006854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800685c:	2b02      	cmp	r3, #2
 800685e:	d156      	bne.n	800690e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	429a      	cmp	r2, r3
 800686a:	d914      	bls.n	8006896 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	1ad2      	subs	r2, r2, r3
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	461a      	mov	r2, r3
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 ff84 	bl	8007790 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006888:	2300      	movs	r3, #0
 800688a:	2200      	movs	r2, #0
 800688c:	2100      	movs	r1, #0
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f004 fa16 	bl	800acc0 <USBD_LL_PrepareReceive>
 8006894:	e03b      	b.n	800690e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d11c      	bne.n	80068dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d316      	bcc.n	80068dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d20f      	bcs.n	80068dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 ff65 	bl	8007790 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ce:	2300      	movs	r3, #0
 80068d0:	2200      	movs	r2, #0
 80068d2:	2100      	movs	r1, #0
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f004 f9f3 	bl	800acc0 <USBD_LL_PrepareReceive>
 80068da:	e018      	b.n	800690e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d10b      	bne.n	8006900 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f004 f932 	bl	800ab6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 ff93 	bl	8007834 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d122      	bne.n	800695e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fe98 	bl	800664e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006926:	e01a      	b.n	800695e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b03      	cmp	r3, #3
 8006932:	d114      	bne.n	800695e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00e      	beq.n	800695e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	7afa      	ldrb	r2, [r7, #11]
 800694a:	4611      	mov	r1, r2
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	4798      	blx	r3
 8006950:	4603      	mov	r3, r0
 8006952:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	e000      	b.n	8006960 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006998:	2303      	movs	r3, #3
 800699a:	e02f      	b.n	80069fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00f      	beq.n	80069c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6852      	ldr	r2, [r2, #4]
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	4611      	mov	r1, r2
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c6:	2340      	movs	r3, #64	; 0x40
 80069c8:	2200      	movs	r2, #0
 80069ca:	2100      	movs	r1, #0
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f004 f888 	bl	800aae2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2240      	movs	r2, #64	; 0x40
 80069de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	2200      	movs	r2, #0
 80069e6:	2180      	movs	r1, #128	; 0x80
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f004 f87a 	bl	800aae2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d106      	bne.n	8006a72 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e012      	b.n	8006abc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d10b      	bne.n	8006aba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e014      	b.n	8006b08 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d10d      	bne.n	8006b06 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d007      	beq.n	8006b06 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e014      	b.n	8006b54 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d10d      	bne.n	8006b52 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	4798      	blx	r3
  }

  return USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b087      	sub	sp, #28
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bc8:	8a3b      	ldrh	r3, [r7, #16]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	b21a      	sxth	r2, r3
 8006bce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b21b      	sxth	r3, r3
 8006bd6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d005      	beq.n	8006c0e <USBD_StdDevReq+0x26>
 8006c02:	2b40      	cmp	r3, #64	; 0x40
 8006c04:	d853      	bhi.n	8006cae <USBD_StdDevReq+0xc6>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <USBD_StdDevReq+0x3a>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d14f      	bne.n	8006cae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c20:	e04a      	b.n	8006cb8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	785b      	ldrb	r3, [r3, #1]
 8006c26:	2b09      	cmp	r3, #9
 8006c28:	d83b      	bhi.n	8006ca2 <USBD_StdDevReq+0xba>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <USBD_StdDevReq+0x48>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006ca3 	.word	0x08006ca3
 8006c3c:	08006c8f 	.word	0x08006c8f
 8006c40:	08006ca3 	.word	0x08006ca3
 8006c44:	08006c63 	.word	0x08006c63
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006ca3 	.word	0x08006ca3
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c6d 	.word	0x08006c6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f9de 	bl	800701c <USBD_GetDescriptor>
          break;
 8006c60:	e024      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fb43 	bl	80072f0 <USBD_SetAddress>
          break;
 8006c6a:	e01f      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fb82 	bl	8007378 <USBD_SetConfig>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
          break;
 8006c78:	e018      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc21 	bl	80074c4 <USBD_GetConfig>
          break;
 8006c82:	e013      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fc52 	bl	8007530 <USBD_GetStatus>
          break;
 8006c8c:	e00e      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fc81 	bl	8007598 <USBD_SetFeature>
          break;
 8006c96:	e009      	b.n	8006cac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fc90 	bl	80075c0 <USBD_ClrFeature>
          break;
 8006ca0:	e004      	b.n	8006cac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fce7 	bl	8007678 <USBD_CtlError>
          break;
 8006caa:	bf00      	nop
      }
      break;
 8006cac:	e004      	b.n	8006cb8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fce1 	bl	8007678 <USBD_CtlError>
      break;
 8006cb6:	bf00      	nop
  }

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop

08006cc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d005      	beq.n	8006cea <USBD_StdItfReq+0x26>
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d82f      	bhi.n	8006d42 <USBD_StdItfReq+0x7e>
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <USBD_StdItfReq+0x26>
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d12b      	bne.n	8006d42 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d81d      	bhi.n	8006d34 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	889b      	ldrh	r3, [r3, #4]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d813      	bhi.n	8006d2a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	88db      	ldrh	r3, [r3, #6]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d110      	bne.n	8006d3e <USBD_StdItfReq+0x7a>
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10d      	bne.n	8006d3e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fd73 	bl	800780e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d28:	e009      	b.n	8006d3e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fca3 	bl	8007678 <USBD_CtlError>
          break;
 8006d32:	e004      	b.n	8006d3e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fc9e 	bl	8007678 <USBD_CtlError>
          break;
 8006d3c:	e000      	b.n	8006d40 <USBD_StdItfReq+0x7c>
          break;
 8006d3e:	bf00      	nop
      }
      break;
 8006d40:	e004      	b.n	8006d4c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fc97 	bl	8007678 <USBD_CtlError>
      break;
 8006d4a:	bf00      	nop
  }

  return ret;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	889b      	ldrh	r3, [r3, #4]
 8006d68:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d007      	beq.n	8006d86 <USBD_StdEPReq+0x30>
 8006d76:	2b40      	cmp	r3, #64	; 0x40
 8006d78:	f200 8145 	bhi.w	8007006 <USBD_StdEPReq+0x2b0>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00c      	beq.n	8006d9a <USBD_StdEPReq+0x44>
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	f040 8140 	bne.w	8007006 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]
      break;
 8006d98:	e13a      	b.n	8007010 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d007      	beq.n	8006db2 <USBD_StdEPReq+0x5c>
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	f300 8129 	bgt.w	8006ffa <USBD_StdEPReq+0x2a4>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d07f      	beq.n	8006eac <USBD_StdEPReq+0x156>
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d03c      	beq.n	8006e2a <USBD_StdEPReq+0xd4>
 8006db0:	e123      	b.n	8006ffa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d002      	beq.n	8006dc4 <USBD_StdEPReq+0x6e>
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d016      	beq.n	8006df0 <USBD_StdEPReq+0x9a>
 8006dc2:	e02c      	b.n	8006e1e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00d      	beq.n	8006de6 <USBD_StdEPReq+0x90>
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b80      	cmp	r3, #128	; 0x80
 8006dce:	d00a      	beq.n	8006de6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f003 fec9 	bl	800ab6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f003 fec5 	bl	800ab6c <USBD_LL_StallEP>
 8006de2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006de4:	e020      	b.n	8006e28 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fc45 	bl	8007678 <USBD_CtlError>
              break;
 8006dee:	e01b      	b.n	8006e28 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	885b      	ldrh	r3, [r3, #2]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10e      	bne.n	8006e16 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <USBD_StdEPReq+0xc0>
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b80      	cmp	r3, #128	; 0x80
 8006e02:	d008      	beq.n	8006e16 <USBD_StdEPReq+0xc0>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	88db      	ldrh	r3, [r3, #6]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f003 feab 	bl	800ab6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fcf9 	bl	800780e <USBD_CtlSendStatus>

              break;
 8006e1c:	e004      	b.n	8006e28 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc29 	bl	8007678 <USBD_CtlError>
              break;
 8006e26:	bf00      	nop
          }
          break;
 8006e28:	e0ec      	b.n	8007004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d002      	beq.n	8006e3c <USBD_StdEPReq+0xe6>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d016      	beq.n	8006e68 <USBD_StdEPReq+0x112>
 8006e3a:	e030      	b.n	8006e9e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <USBD_StdEPReq+0x108>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d00a      	beq.n	8006e5e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f003 fe8d 	bl	800ab6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e52:	2180      	movs	r1, #128	; 0x80
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f003 fe89 	bl	800ab6c <USBD_LL_StallEP>
 8006e5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e5c:	e025      	b.n	8006eaa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fc09 	bl	8007678 <USBD_CtlError>
              break;
 8006e66:	e020      	b.n	8006eaa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	885b      	ldrh	r3, [r3, #2]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d11b      	bne.n	8006ea8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f003 fe93 	bl	800abaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fcc2 	bl	800780e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006e9c:	e004      	b.n	8006ea8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fbe9 	bl	8007678 <USBD_CtlError>
              break;
 8006ea6:	e000      	b.n	8006eaa <USBD_StdEPReq+0x154>
              break;
 8006ea8:	bf00      	nop
          }
          break;
 8006eaa:	e0ab      	b.n	8007004 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d002      	beq.n	8006ebe <USBD_StdEPReq+0x168>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d032      	beq.n	8006f22 <USBD_StdEPReq+0x1cc>
 8006ebc:	e097      	b.n	8006fee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <USBD_StdEPReq+0x17e>
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b80      	cmp	r3, #128	; 0x80
 8006ec8:	d004      	beq.n	8006ed4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fbd3 	bl	8007678 <USBD_CtlError>
                break;
 8006ed2:	e091      	b.n	8006ff8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da0b      	bge.n	8006ef4 <USBD_StdEPReq+0x19e>
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	3310      	adds	r3, #16
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	4413      	add	r3, r2
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	e00b      	b.n	8006f0c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4413      	add	r3, r2
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2202      	movs	r2, #2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fc1d 	bl	800775a <USBD_CtlSendData>
              break;
 8006f20:	e06a      	b.n	8006ff8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da11      	bge.n	8006f4e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	f003 020f 	and.w	r2, r3, #15
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d117      	bne.n	8006f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb96 	bl	8007678 <USBD_CtlError>
                  break;
 8006f4c:	e054      	b.n	8006ff8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d104      	bne.n	8006f74 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fb83 	bl	8007678 <USBD_CtlError>
                  break;
 8006f72:	e041      	b.n	8006ff8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da0b      	bge.n	8006f94 <USBD_StdEPReq+0x23e>
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	3310      	adds	r3, #16
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	3304      	adds	r3, #4
 8006f92:	e00b      	b.n	8006fac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
 8006f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3304      	adds	r3, #4
 8006fac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <USBD_StdEPReq+0x264>
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	2b80      	cmp	r3, #128	; 0x80
 8006fb8:	d103      	bne.n	8006fc2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	e00e      	b.n	8006fe0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f003 fe0e 	bl	800abe8 <USBD_LL_IsStallEP>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e002      	b.n	8006fe0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fbb7 	bl	800775a <USBD_CtlSendData>
              break;
 8006fec:	e004      	b.n	8006ff8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fb41 	bl	8007678 <USBD_CtlError>
              break;
 8006ff6:	bf00      	nop
          }
          break;
 8006ff8:	e004      	b.n	8007004 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb3b 	bl	8007678 <USBD_CtlError>
          break;
 8007002:	bf00      	nop
      }
      break;
 8007004:	e004      	b.n	8007010 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fb35 	bl	8007678 <USBD_CtlError>
      break;
 800700e:	bf00      	nop
  }

  return ret;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	885b      	ldrh	r3, [r3, #2]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	2b06      	cmp	r3, #6
 800703e:	f200 8128 	bhi.w	8007292 <USBD_GetDescriptor+0x276>
 8007042:	a201      	add	r2, pc, #4	; (adr r2, 8007048 <USBD_GetDescriptor+0x2c>)
 8007044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007048:	08007065 	.word	0x08007065
 800704c:	0800707d 	.word	0x0800707d
 8007050:	080070bd 	.word	0x080070bd
 8007054:	08007293 	.word	0x08007293
 8007058:	08007293 	.word	0x08007293
 800705c:	08007233 	.word	0x08007233
 8007060:	0800725f 	.word	0x0800725f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7c12      	ldrb	r2, [r2, #16]
 8007070:	f107 0108 	add.w	r1, r7, #8
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	60f8      	str	r0, [r7, #12]
      break;
 800707a:	e112      	b.n	80072a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7c1b      	ldrb	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10d      	bne.n	80070a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	f107 0208 	add.w	r2, r7, #8
 8007090:	4610      	mov	r0, r2
 8007092:	4798      	blx	r3
 8007094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3301      	adds	r3, #1
 800709a:	2202      	movs	r2, #2
 800709c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800709e:	e100      	b.n	80072a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	f107 0208 	add.w	r2, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	2202      	movs	r2, #2
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e0f2      	b.n	80072a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	885b      	ldrh	r3, [r3, #2]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	f200 80ac 	bhi.w	8007220 <USBD_GetDescriptor+0x204>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBD_GetDescriptor+0xb4>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e9 	.word	0x080070e9
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	08007151 	.word	0x08007151
 80070dc:	08007185 	.word	0x08007185
 80070e0:	080071b9 	.word	0x080071b9
 80070e4:	080071ed 	.word	0x080071ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e091      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fab2 	bl	8007678 <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e089      	b.n	8007230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7c12      	ldrb	r2, [r2, #16]
 8007134:	f107 0108 	add.w	r1, r7, #8
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713e:	e077      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa98 	bl	8007678 <USBD_CtlError>
            err++;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	3301      	adds	r3, #1
 800714c:	72fb      	strb	r3, [r7, #11]
          break;
 800714e:	e06f      	b.n	8007230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e05d      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa7e 	bl	8007678 <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e055      	b.n	8007230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e043      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa64 	bl	8007678 <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e03b      	b.n	8007230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e029      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa4a 	bl	8007678 <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e021      	b.n	8007230 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	7c12      	ldrb	r2, [r2, #16]
 8007204:	f107 0108 	add.w	r1, r7, #8
 8007208:	4610      	mov	r0, r2
 800720a:	4798      	blx	r3
 800720c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720e:	e00f      	b.n	8007230 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa30 	bl	8007678 <USBD_CtlError>
            err++;
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
          break;
 800721e:	e007      	b.n	8007230 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa28 	bl	8007678 <USBD_CtlError>
          err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800722e:	bf00      	nop
      }
      break;
 8007230:	e037      	b.n	80072a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7c1b      	ldrb	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007242:	f107 0208 	add.w	r2, r7, #8
 8007246:	4610      	mov	r0, r2
 8007248:	4798      	blx	r3
 800724a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724c:	e029      	b.n	80072a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa11 	bl	8007678 <USBD_CtlError>
        err++;
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	3301      	adds	r3, #1
 800725a:	72fb      	strb	r3, [r7, #11]
      break;
 800725c:	e021      	b.n	80072a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	7c1b      	ldrb	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f107 0208 	add.w	r2, r7, #8
 8007272:	4610      	mov	r0, r2
 8007274:	4798      	blx	r3
 8007276:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	2207      	movs	r2, #7
 800727e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007280:	e00f      	b.n	80072a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f9f7 	bl	8007678 <USBD_CtlError>
        err++;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	3301      	adds	r3, #1
 800728e:	72fb      	strb	r3, [r7, #11]
      break;
 8007290:	e007      	b.n	80072a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f9ef 	bl	8007678 <USBD_CtlError>
      err++;
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	3301      	adds	r3, #1
 800729e:	72fb      	strb	r3, [r7, #11]
      break;
 80072a0:	bf00      	nop
  }

  if (err != 0U)
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d11e      	bne.n	80072e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	88db      	ldrh	r3, [r3, #6]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d016      	beq.n	80072de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072b0:	893b      	ldrh	r3, [r7, #8]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00e      	beq.n	80072d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88da      	ldrh	r2, [r3, #6]
 80072ba:	893b      	ldrh	r3, [r7, #8]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bf28      	it	cs
 80072c0:	4613      	movcs	r3, r2
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	461a      	mov	r2, r3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa44 	bl	800775a <USBD_CtlSendData>
 80072d2:	e009      	b.n	80072e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9ce 	bl	8007678 <USBD_CtlError>
 80072dc:	e004      	b.n	80072e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa95 	bl	800780e <USBD_CtlSendStatus>
 80072e4:	e000      	b.n	80072e8 <USBD_GetDescriptor+0x2cc>
    return;
 80072e6:	bf00      	nop
  }
}
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop

080072f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	889b      	ldrh	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d131      	bne.n	8007366 <USBD_SetAddress+0x76>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d12d      	bne.n	8007366 <USBD_SetAddress+0x76>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	2b7f      	cmp	r3, #127	; 0x7f
 8007310:	d829      	bhi.n	8007366 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	885b      	ldrh	r3, [r3, #2]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d104      	bne.n	8007334 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9a3 	bl	8007678 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	e01d      	b.n	8007370 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7bfa      	ldrb	r2, [r7, #15]
 8007338:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f003 fc7d 	bl	800ac40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa61 	bl	800780e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	e009      	b.n	8007370 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	e004      	b.n	8007370 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f985 	bl	8007678 <USBD_CtlError>
  }
}
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	885b      	ldrh	r3, [r3, #2]
 800738a:	b2da      	uxtb	r2, r3
 800738c:	4b4c      	ldr	r3, [pc, #304]	; (80074c0 <USBD_SetConfig+0x148>)
 800738e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007390:	4b4b      	ldr	r3, [pc, #300]	; (80074c0 <USBD_SetConfig+0x148>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d905      	bls.n	80073a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f96c 	bl	8007678 <USBD_CtlError>
    return USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e088      	b.n	80074b6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d002      	beq.n	80073b6 <USBD_SetConfig+0x3e>
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d025      	beq.n	8007400 <USBD_SetConfig+0x88>
 80073b4:	e071      	b.n	800749a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073b6:	4b42      	ldr	r3, [pc, #264]	; (80074c0 <USBD_SetConfig+0x148>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d01c      	beq.n	80073f8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80073be:	4b40      	ldr	r3, [pc, #256]	; (80074c0 <USBD_SetConfig+0x148>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073c8:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <USBD_SetConfig+0x148>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7ff f948 	bl	8006664 <USBD_SetClassConfig>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f949 	bl	8007678 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073e6:	e065      	b.n	80074b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa10 	bl	800780e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2203      	movs	r2, #3
 80073f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073f6:	e05d      	b.n	80074b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fa08 	bl	800780e <USBD_CtlSendStatus>
      break;
 80073fe:	e059      	b.n	80074b4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007400:	4b2f      	ldr	r3, [pc, #188]	; (80074c0 <USBD_SetConfig+0x148>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d112      	bne.n	800742e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007410:	4b2b      	ldr	r3, [pc, #172]	; (80074c0 <USBD_SetConfig+0x148>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800741a:	4b29      	ldr	r3, [pc, #164]	; (80074c0 <USBD_SetConfig+0x148>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff f93b 	bl	800669c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f9f1 	bl	800780e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800742c:	e042      	b.n	80074b4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800742e:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <USBD_SetConfig+0x148>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d02a      	beq.n	8007492 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff f929 	bl	800669c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <USBD_SetConfig+0x148>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007454:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <USBD_SetConfig+0x148>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff f902 	bl	8006664 <USBD_SetClassConfig>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00f      	beq.n	800748a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f903 	bl	8007678 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f7ff f90e 	bl	800669c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007488:	e014      	b.n	80074b4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9bf 	bl	800780e <USBD_CtlSendStatus>
      break;
 8007490:	e010      	b.n	80074b4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9bb 	bl	800780e <USBD_CtlSendStatus>
      break;
 8007498:	e00c      	b.n	80074b4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8eb 	bl	8007678 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074a2:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <USBD_SetConfig+0x148>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff f8f7 	bl	800669c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074ae:	2303      	movs	r3, #3
 80074b0:	73fb      	strb	r3, [r7, #15]
      break;
 80074b2:	bf00      	nop
  }

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000204 	.word	0x20000204

080074c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	88db      	ldrh	r3, [r3, #6]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d004      	beq.n	80074e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f8cd 	bl	8007678 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074de:	e023      	b.n	8007528 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	dc02      	bgt.n	80074f2 <USBD_GetConfig+0x2e>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dc03      	bgt.n	80074f8 <USBD_GetConfig+0x34>
 80074f0:	e015      	b.n	800751e <USBD_GetConfig+0x5a>
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d00b      	beq.n	800750e <USBD_GetConfig+0x4a>
 80074f6:	e012      	b.n	800751e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3308      	adds	r3, #8
 8007502:	2201      	movs	r2, #1
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f927 	bl	800775a <USBD_CtlSendData>
        break;
 800750c:	e00c      	b.n	8007528 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	2201      	movs	r2, #1
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f91f 	bl	800775a <USBD_CtlSendData>
        break;
 800751c:	e004      	b.n	8007528 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f8a9 	bl	8007678 <USBD_CtlError>
        break;
 8007526:	bf00      	nop
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	b2db      	uxtb	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	2b02      	cmp	r3, #2
 8007546:	d81e      	bhi.n	8007586 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	88db      	ldrh	r3, [r3, #6]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d004      	beq.n	800755a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f890 	bl	8007678 <USBD_CtlError>
        break;
 8007558:	e01a      	b.n	8007590 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f043 0202 	orr.w	r2, r3, #2
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	330c      	adds	r3, #12
 800757a:	2202      	movs	r2, #2
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8eb 	bl	800775a <USBD_CtlSendData>
      break;
 8007584:	e004      	b.n	8007590 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f875 	bl	8007678 <USBD_CtlError>
      break;
 800758e:	bf00      	nop
  }
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d106      	bne.n	80075b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f92b 	bl	800780e <USBD_CtlSendStatus>
  }
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d80b      	bhi.n	80075f0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d10c      	bne.n	80075fa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f910 	bl	800780e <USBD_CtlSendStatus>
      }
      break;
 80075ee:	e004      	b.n	80075fa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f840 	bl	8007678 <USBD_CtlError>
      break;
 80075f8:	e000      	b.n	80075fc <USBD_ClrFeature+0x3c>
      break;
 80075fa:	bf00      	nop
  }
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3301      	adds	r3, #1
 800762c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fabb 	bl	8006baa <SWAPBYTE>
 8007634:	4603      	mov	r3, r0
 8007636:	461a      	mov	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f7ff faae 	bl	8006baa <SWAPBYTE>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3301      	adds	r3, #1
 8007660:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7ff faa1 	bl	8006baa <SWAPBYTE>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	80da      	strh	r2, [r3, #6]
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f003 fa71 	bl	800ab6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800768a:	2100      	movs	r1, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f003 fa6d 	bl	800ab6c <USBD_LL_StallEP>
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d036      	beq.n	800771e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076b4:	6938      	ldr	r0, [r7, #16]
 80076b6:	f000 f836 	bl	8007726 <USBD_GetLen>
 80076ba:	4603      	mov	r3, r0
 80076bc:	3301      	adds	r3, #1
 80076be:	b29b      	uxth	r3, r3
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	3301      	adds	r3, #1
 80076d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4413      	add	r3, r2
 80076e0:	2203      	movs	r2, #3
 80076e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	3301      	adds	r3, #1
 80076e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076ea:	e013      	b.n	8007714 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4413      	add	r3, r2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	7812      	ldrb	r2, [r2, #0]
 80076f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	3301      	adds	r3, #1
 80076fc:	613b      	str	r3, [r7, #16]
    idx++;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
 8007700:	3301      	adds	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	4413      	add	r3, r2
 800770a:	2200      	movs	r2, #0
 800770c:	701a      	strb	r2, [r3, #0]
    idx++;
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	3301      	adds	r3, #1
 8007712:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e7      	bne.n	80076ec <USBD_GetString+0x52>
 800771c:	e000      	b.n	8007720 <USBD_GetString+0x86>
    return;
 800771e:	bf00      	nop
  }
}
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007736:	e005      	b.n	8007744 <USBD_GetLen+0x1e>
  {
    len++;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	3301      	adds	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3301      	adds	r3, #1
 8007742:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f5      	bne.n	8007738 <USBD_GetLen+0x12>
  }

  return len;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	60b9      	str	r1, [r7, #8]
 8007764:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f003 fa7c 	bl	800ac7e <USBD_LL_Transmit>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	2100      	movs	r1, #0
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f003 fa6b 	bl	800ac7e <USBD_LL_Transmit>

  return USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2203      	movs	r2, #3
 80077c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f003 fa6f 	bl	800acc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f003 fa5e 	bl	800acc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800781e:	2300      	movs	r3, #0
 8007820:	2200      	movs	r2, #0
 8007822:	2100      	movs	r1, #0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f003 fa2a 	bl	800ac7e <USBD_LL_Transmit>

  return USBD_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2205      	movs	r2, #5
 8007840:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007844:	2300      	movs	r3, #0
 8007846:	2200      	movs	r2, #0
 8007848:	2100      	movs	r1, #0
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f003 fa38 	bl	800acc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <__NVIC_SetPriority>:
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	6039      	str	r1, [r7, #0]
 8007866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800786c:	2b00      	cmp	r3, #0
 800786e:	db0a      	blt.n	8007886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	b2da      	uxtb	r2, r3
 8007874:	490c      	ldr	r1, [pc, #48]	; (80078a8 <__NVIC_SetPriority+0x4c>)
 8007876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787a:	0112      	lsls	r2, r2, #4
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	440b      	add	r3, r1
 8007880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007884:	e00a      	b.n	800789c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4908      	ldr	r1, [pc, #32]	; (80078ac <__NVIC_SetPriority+0x50>)
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	3b04      	subs	r3, #4
 8007894:	0112      	lsls	r2, r2, #4
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	440b      	add	r3, r1
 800789a:	761a      	strb	r2, [r3, #24]
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	e000e100 	.word	0xe000e100
 80078ac:	e000ed00 	.word	0xe000ed00

080078b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <SysTick_Handler+0x1c>)
 80078b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80078b8:	f001 fd28 	bl	800930c <xTaskGetSchedulerState>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d001      	beq.n	80078c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80078c2:	f002 fb11 	bl	8009ee8 <xPortSysTickHandler>
  }
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	e000e010 	.word	0xe000e010

080078d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078d4:	2100      	movs	r1, #0
 80078d6:	f06f 0004 	mvn.w	r0, #4
 80078da:	f7ff ffbf 	bl	800785c <__NVIC_SetPriority>
#endif
}
 80078de:	bf00      	nop
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ea:	f3ef 8305 	mrs	r3, IPSR
 80078ee:	603b      	str	r3, [r7, #0]
  return(result);
 80078f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80078f6:	f06f 0305 	mvn.w	r3, #5
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	e00c      	b.n	8007918 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <osKernelInitialize+0x44>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d105      	bne.n	8007912 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007906:	4b08      	ldr	r3, [pc, #32]	; (8007928 <osKernelInitialize+0x44>)
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800790c:	2300      	movs	r3, #0
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	e002      	b.n	8007918 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007912:	f04f 33ff 	mov.w	r3, #4294967295
 8007916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007918:	687b      	ldr	r3, [r7, #4]
}
 800791a:	4618      	mov	r0, r3
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20000208 	.word	0x20000208

0800792c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007932:	f3ef 8305 	mrs	r3, IPSR
 8007936:	603b      	str	r3, [r7, #0]
  return(result);
 8007938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <osKernelStart+0x1a>
    stat = osErrorISR;
 800793e:	f06f 0305 	mvn.w	r3, #5
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e010      	b.n	8007968 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <osKernelStart+0x48>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d109      	bne.n	8007962 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800794e:	f7ff ffbf 	bl	80078d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <osKernelStart+0x48>)
 8007954:	2202      	movs	r2, #2
 8007956:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007958:	f001 f87c 	bl	8008a54 <vTaskStartScheduler>
      stat = osOK;
 800795c:	2300      	movs	r3, #0
 800795e:	607b      	str	r3, [r7, #4]
 8007960:	e002      	b.n	8007968 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007962:	f04f 33ff 	mov.w	r3, #4294967295
 8007966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007968:	687b      	ldr	r3, [r7, #4]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000208 	.word	0x20000208

08007978 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b08e      	sub	sp, #56	; 0x38
 800797c:	af04      	add	r7, sp, #16
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007988:	f3ef 8305 	mrs	r3, IPSR
 800798c:	617b      	str	r3, [r7, #20]
  return(result);
 800798e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007990:	2b00      	cmp	r3, #0
 8007992:	d17e      	bne.n	8007a92 <osThreadNew+0x11a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d07b      	beq.n	8007a92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800799a:	2380      	movs	r3, #128	; 0x80
 800799c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800799e:	2318      	movs	r3, #24
 80079a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079a2:	2300      	movs	r3, #0
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d045      	beq.n	8007a3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <osThreadNew+0x48>
        name = attr->name;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <osThreadNew+0x6e>
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	2b38      	cmp	r3, #56	; 0x38
 80079d8:	d805      	bhi.n	80079e6 <osThreadNew+0x6e>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <osThreadNew+0x72>
        return (NULL);
 80079e6:	2300      	movs	r3, #0
 80079e8:	e054      	b.n	8007a94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <osThreadNew+0xa8>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	2bbb      	cmp	r3, #187	; 0xbb
 8007a08:	d90a      	bls.n	8007a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d006      	beq.n	8007a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <osThreadNew+0xa8>
        mem = 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61bb      	str	r3, [r7, #24]
 8007a1e:	e010      	b.n	8007a42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <osThreadNew+0xca>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d108      	bne.n	8007a42 <osThreadNew+0xca>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <osThreadNew+0xca>
          mem = 0;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e001      	b.n	8007a42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d110      	bne.n	8007a6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a50:	9202      	str	r2, [sp, #8]
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 fe0c 	bl	800867c <xTaskCreateStatic>
 8007a64:	4603      	mov	r3, r0
 8007a66:	613b      	str	r3, [r7, #16]
 8007a68:	e013      	b.n	8007a92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d110      	bne.n	8007a92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 fe57 	bl	8008736 <xTaskCreate>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d001      	beq.n	8007a92 <osThreadNew+0x11a>
            hTask = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a92:	693b      	ldr	r3, [r7, #16]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3728      	adds	r7, #40	; 0x28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa4:	f3ef 8305 	mrs	r3, IPSR
 8007aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <osDelay+0x1c>
    stat = osErrorISR;
 8007ab0:	f06f 0305 	mvn.w	r3, #5
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	e007      	b.n	8007ac8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 ff92 	bl	80089ec <vTaskDelay>
    }
  }

  return (stat);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a07      	ldr	r2, [pc, #28]	; (8007b00 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4a06      	ldr	r2, [pc, #24]	; (8007b04 <vApplicationGetIdleTaskMemory+0x30>)
 8007aea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2280      	movs	r2, #128	; 0x80
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	2000020c 	.word	0x2000020c
 8007b04:	200002c8 	.word	0x200002c8

08007b08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4a06      	ldr	r2, [pc, #24]	; (8007b38 <vApplicationGetTimerTaskMemory+0x30>)
 8007b1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b26:	601a      	str	r2, [r3, #0]
}
 8007b28:	bf00      	nop
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	200004c8 	.word	0x200004c8
 8007b38:	20000584 	.word	0x20000584

08007b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f103 0208 	add.w	r2, r3, #8
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f103 0208 	add.w	r2, r3, #8
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f103 0208 	add.w	r2, r3, #8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	601a      	str	r2, [r3, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf4:	d103      	bne.n	8007bfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	e00c      	b.n	8007c18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3308      	adds	r3, #8
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	e002      	b.n	8007c0c <vListInsert+0x2e>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d2f6      	bcs.n	8007c06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
}
 8007c44:	bf00      	nop
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6892      	ldr	r2, [r2, #8]
 8007c66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	6852      	ldr	r2, [r2, #4]
 8007c70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d103      	bne.n	8007c84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1e5a      	subs	r2, r3, #1
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10a      	bne.n	8007cce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cca:	bf00      	nop
 8007ccc:	e7fe      	b.n	8007ccc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cce:	f002 f879 	bl	8009dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	68f9      	ldr	r1, [r7, #12]
 8007cdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cde:	fb01 f303 	mul.w	r3, r1, r3
 8007ce2:	441a      	add	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	68f9      	ldr	r1, [r7, #12]
 8007d02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	441a      	add	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	22ff      	movs	r2, #255	; 0xff
 8007d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	22ff      	movs	r2, #255	; 0xff
 8007d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d114      	bne.n	8007d4e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01a      	beq.n	8007d62 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3310      	adds	r3, #16
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f929 	bl	8008f88 <xTaskRemoveFromEventList>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d012      	beq.n	8007d62 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <xQueueGenericReset+0xcc>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	e009      	b.n	8007d62 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3310      	adds	r3, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fef2 	bl	8007b3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3324      	adds	r3, #36	; 0x24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff feed 	bl	8007b3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d62:	f002 f85f 	bl	8009e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d66:	2301      	movs	r3, #1
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08e      	sub	sp, #56	; 0x38
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <xQueueGenericCreateStatic+0x52>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <xQueueGenericCreateStatic+0x56>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <xQueueGenericCreateStatic+0x58>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	623b      	str	r3, [r7, #32]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <xQueueGenericCreateStatic+0x7e>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericCreateStatic+0x82>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericCreateStatic+0x84>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d10a      	bne.n	8007e12 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	61fb      	str	r3, [r7, #28]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e12:	2350      	movs	r3, #80	; 0x50
 8007e14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	2b50      	cmp	r3, #80	; 0x50
 8007e1a:	d00a      	beq.n	8007e32 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	61bb      	str	r3, [r7, #24]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e32:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00d      	beq.n	8007e5a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e46:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	68b9      	ldr	r1, [r7, #8]
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f805 	bl	8007e64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3730      	adds	r7, #48	; 0x30
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e002      	b.n	8007e86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e92:	2101      	movs	r1, #1
 8007e94:	69b8      	ldr	r0, [r7, #24]
 8007e96:	f7ff ff05 	bl	8007ca4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	78fa      	ldrb	r2, [r7, #3]
 8007e9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	; 0x38
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <xQueueGenericSend+0x32>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <xQueueGenericSend+0x40>
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <xQueueGenericSend+0x44>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <xQueueGenericSend+0x46>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <xQueueGenericSend+0x60>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSend+0x6e>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <xQueueGenericSend+0x72>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericSend+0x74>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xQueueGenericSend+0x8e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	623b      	str	r3, [r7, #32]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f3a:	f001 f9e7 	bl	800930c <xTaskGetSchedulerState>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d102      	bne.n	8007f4a <xQueueGenericSend+0x9e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <xQueueGenericSend+0xa2>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueGenericSend+0xa4>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <xQueueGenericSend+0xbe>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	61fb      	str	r3, [r7, #28]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f6a:	f001 ff2b 	bl	8009dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d302      	bcc.n	8007f80 <xQueueGenericSend+0xd4>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d129      	bne.n	8007fd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f80:	683a      	ldr	r2, [r7, #0]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f86:	f000 fa0b 	bl	80083a0 <prvCopyDataToQueue>
 8007f8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d010      	beq.n	8007fb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	3324      	adds	r3, #36	; 0x24
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fff5 	bl	8008f88 <xTaskRemoveFromEventList>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d013      	beq.n	8007fcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fa4:	4b3f      	ldr	r3, [pc, #252]	; (80080a4 <xQueueGenericSend+0x1f8>)
 8007fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	f3bf 8f6f 	isb	sy
 8007fb4:	e00a      	b.n	8007fcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d007      	beq.n	8007fcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fbc:	4b39      	ldr	r3, [pc, #228]	; (80080a4 <xQueueGenericSend+0x1f8>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fcc:	f001 ff2a 	bl	8009e24 <vPortExitCritical>
				return pdPASS;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e063      	b.n	800809c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d103      	bne.n	8007fe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fda:	f001 ff23 	bl	8009e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e05c      	b.n	800809c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d106      	bne.n	8007ff6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 f82f 	bl	8009050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ff6:	f001 ff15 	bl	8009e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffa:	f000 fd9b 	bl	8008b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ffe:	f001 fee1 	bl	8009dc4 <vPortEnterCritical>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008008:	b25b      	sxtb	r3, r3
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	d103      	bne.n	8008018 <xQueueGenericSend+0x16c>
 8008010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008012:	2200      	movs	r2, #0
 8008014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008024:	d103      	bne.n	800802e <xQueueGenericSend+0x182>
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802e:	f001 fef9 	bl	8009e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008032:	1d3a      	adds	r2, r7, #4
 8008034:	f107 0314 	add.w	r3, r7, #20
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f001 f81e 	bl	800907c <xTaskCheckForTimeOut>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d124      	bne.n	8008090 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008048:	f000 faa2 	bl	8008590 <prvIsQueueFull>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d018      	beq.n	8008084 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	3310      	adds	r3, #16
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff44 	bl	8008ee8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008062:	f000 fa2d 	bl	80084c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008066:	f000 fd73 	bl	8008b50 <xTaskResumeAll>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	f47f af7c 	bne.w	8007f6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <xQueueGenericSend+0x1f8>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	e772      	b.n	8007f6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008086:	f000 fa1b 	bl	80084c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800808a:	f000 fd61 	bl	8008b50 <xTaskResumeAll>
 800808e:	e76c      	b.n	8007f6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008092:	f000 fa15 	bl	80084c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008096:	f000 fd5b 	bl	8008b50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800809a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800809c:	4618      	mov	r0, r3
 800809e:	3738      	adds	r7, #56	; 0x38
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b090      	sub	sp, #64	; 0x40
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d103      	bne.n	80080e4 <xQueueGenericSendFromISR+0x3c>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <xQueueGenericSendFromISR+0x40>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <xQueueGenericSendFromISR+0x42>
 80080e8:	2300      	movs	r3, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008100:	bf00      	nop
 8008102:	e7fe      	b.n	8008102 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d103      	bne.n	8008112 <xQueueGenericSendFromISR+0x6a>
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <xQueueGenericSendFromISR+0x6e>
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <xQueueGenericSendFromISR+0x70>
 8008116:	2300      	movs	r3, #0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	623b      	str	r3, [r7, #32]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008132:	f001 ff29 	bl	8009f88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008136:	f3ef 8211 	mrs	r2, BASEPRI
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	61fa      	str	r2, [r7, #28]
 800814c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800814e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	429a      	cmp	r2, r3
 800815c:	d302      	bcc.n	8008164 <xQueueGenericSendFromISR+0xbc>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d12f      	bne.n	80081c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800817a:	f000 f911 	bl	80083a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800817e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d112      	bne.n	80081ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d016      	beq.n	80081be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fef7 	bl	8008f88 <xTaskRemoveFromEventList>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e007      	b.n	80081be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081b2:	3301      	adds	r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	b25a      	sxtb	r2, r3
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081c2:	e001      	b.n	80081c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3740      	adds	r7, #64	; 0x40
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08c      	sub	sp, #48	; 0x30
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <xQueueReceive+0x30>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	623b      	str	r3, [r7, #32]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <xQueueReceive+0x3e>
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <xQueueReceive+0x42>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <xQueueReceive+0x44>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10a      	bne.n	800823e <xQueueReceive+0x5e>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	61fb      	str	r3, [r7, #28]
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800823e:	f001 f865 	bl	800930c <xTaskGetSchedulerState>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d102      	bne.n	800824e <xQueueReceive+0x6e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <xQueueReceive+0x72>
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <xQueueReceive+0x74>
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <xQueueReceive+0x8e>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	61bb      	str	r3, [r7, #24]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800826e:	f001 fda9 	bl	8009dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01f      	beq.n	80082be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800827e:	68b9      	ldr	r1, [r7, #8]
 8008280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008282:	f000 f8f7 	bl	8008474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008288:	1e5a      	subs	r2, r3, #1
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00f      	beq.n	80082b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	3310      	adds	r3, #16
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fe74 	bl	8008f88 <xTaskRemoveFromEventList>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d007      	beq.n	80082b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082a6:	4b3d      	ldr	r3, [pc, #244]	; (800839c <xQueueReceive+0x1bc>)
 80082a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082b6:	f001 fdb5 	bl	8009e24 <vPortExitCritical>
				return pdPASS;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e069      	b.n	8008392 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082c4:	f001 fdae 	bl	8009e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e062      	b.n	8008392 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082d2:	f107 0310 	add.w	r3, r7, #16
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 feba 	bl	8009050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082e0:	f001 fda0 	bl	8009e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e4:	f000 fc26 	bl	8008b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082e8:	f001 fd6c 	bl	8009dc4 <vPortEnterCritical>
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d103      	bne.n	8008302 <xQueueReceive+0x122>
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008308:	b25b      	sxtb	r3, r3
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d103      	bne.n	8008318 <xQueueReceive+0x138>
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008318:	f001 fd84 	bl	8009e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800831c:	1d3a      	adds	r2, r7, #4
 800831e:	f107 0310 	add.w	r3, r7, #16
 8008322:	4611      	mov	r1, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fea9 	bl	800907c <xTaskCheckForTimeOut>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d123      	bne.n	8008378 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008332:	f000 f917 	bl	8008564 <prvIsQueueEmpty>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d017      	beq.n	800836c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	3324      	adds	r3, #36	; 0x24
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4611      	mov	r1, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fdcf 	bl	8008ee8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800834a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834c:	f000 f8b8 	bl	80084c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008350:	f000 fbfe 	bl	8008b50 <xTaskResumeAll>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d189      	bne.n	800826e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <xQueueReceive+0x1bc>)
 800835c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	e780      	b.n	800826e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800836c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836e:	f000 f8a7 	bl	80084c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008372:	f000 fbed 	bl	8008b50 <xTaskResumeAll>
 8008376:	e77a      	b.n	800826e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837a:	f000 f8a1 	bl	80084c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800837e:	f000 fbe7 	bl	8008b50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008384:	f000 f8ee 	bl	8008564 <prvIsQueueEmpty>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	f43f af6f 	beq.w	800826e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008392:	4618      	mov	r0, r3
 8008394:	3730      	adds	r7, #48	; 0x30
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	e000ed04 	.word	0xe000ed04

080083a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10d      	bne.n	80083da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d14d      	bne.n	8008462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 ffbc 	bl	8009348 <xTaskPriorityDisinherit>
 80083d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	609a      	str	r2, [r3, #8]
 80083d8:	e043      	b.n	8008462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d119      	bne.n	8008414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6858      	ldr	r0, [r3, #4]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	f002 fd06 	bl	800adfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	441a      	add	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	429a      	cmp	r2, r3
 8008408:	d32b      	bcc.n	8008462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	e026      	b.n	8008462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	68d8      	ldr	r0, [r3, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841c:	461a      	mov	r2, r3
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	f002 fcec 	bl	800adfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	68da      	ldr	r2, [r3, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842c:	425b      	negs	r3, r3
 800842e:	441a      	add	r2, r3
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d207      	bcs.n	8008450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	425b      	negs	r3, r3
 800844a:	441a      	add	r2, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d105      	bne.n	8008462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	3b01      	subs	r3, #1
 8008460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800846a:	697b      	ldr	r3, [r7, #20]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d018      	beq.n	80084b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	441a      	add	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	429a      	cmp	r2, r3
 800849e:	d303      	bcc.n	80084a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68d9      	ldr	r1, [r3, #12]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	461a      	mov	r2, r3
 80084b2:	6838      	ldr	r0, [r7, #0]
 80084b4:	f002 fca2 	bl	800adfc <memcpy>
	}
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084c8:	f001 fc7c 	bl	8009dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084d4:	e011      	b.n	80084fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d012      	beq.n	8008504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3324      	adds	r3, #36	; 0x24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fd50 	bl	8008f88 <xTaskRemoveFromEventList>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ee:	f000 fe27 	bl	8009140 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dce9      	bgt.n	80084d6 <prvUnlockQueue+0x16>
 8008502:	e000      	b.n	8008506 <prvUnlockQueue+0x46>
					break;
 8008504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	22ff      	movs	r2, #255	; 0xff
 800850a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800850e:	f001 fc89 	bl	8009e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008512:	f001 fc57 	bl	8009dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800851c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800851e:	e011      	b.n	8008544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d012      	beq.n	800854e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3310      	adds	r3, #16
 800852c:	4618      	mov	r0, r3
 800852e:	f000 fd2b 	bl	8008f88 <xTaskRemoveFromEventList>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008538:	f000 fe02 	bl	8009140 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	3b01      	subs	r3, #1
 8008540:	b2db      	uxtb	r3, r3
 8008542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008548:	2b00      	cmp	r3, #0
 800854a:	dce9      	bgt.n	8008520 <prvUnlockQueue+0x60>
 800854c:	e000      	b.n	8008550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800854e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	22ff      	movs	r2, #255	; 0xff
 8008554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008558:	f001 fc64 	bl	8009e24 <vPortExitCritical>
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800856c:	f001 fc2a 	bl	8009dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e001      	b.n	8008582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008582:	f001 fc4f 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 8008586:	68fb      	ldr	r3, [r7, #12]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008598:	f001 fc14 	bl	8009dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d102      	bne.n	80085ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085a8:	2301      	movs	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	e001      	b.n	80085b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085b2:	f001 fc37 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 80085b6:	68fb      	ldr	r3, [r7, #12]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e014      	b.n	80085fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085d0:	4a0f      	ldr	r2, [pc, #60]	; (8008610 <vQueueAddToRegistry+0x50>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085dc:	490c      	ldr	r1, [pc, #48]	; (8008610 <vQueueAddToRegistry+0x50>)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085e6:	4a0a      	ldr	r2, [pc, #40]	; (8008610 <vQueueAddToRegistry+0x50>)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085f2:	e006      	b.n	8008602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2b07      	cmp	r3, #7
 80085fe:	d9e7      	bls.n	80085d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	20004f08 	.word	0x20004f08

08008614 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008624:	f001 fbce 	bl	8009dc4 <vPortEnterCritical>
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862e:	b25b      	sxtb	r3, r3
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d103      	bne.n	800863e <vQueueWaitForMessageRestricted+0x2a>
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008644:	b25b      	sxtb	r3, r3
 8008646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864a:	d103      	bne.n	8008654 <vQueueWaitForMessageRestricted+0x40>
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008654:	f001 fbe6 	bl	8009e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	3324      	adds	r3, #36	; 0x24
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fc61 	bl	8008f30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800866e:	6978      	ldr	r0, [r7, #20]
 8008670:	f7ff ff26 	bl	80084c0 <prvUnlockQueue>
	}
 8008674:	bf00      	nop
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af04      	add	r7, sp, #16
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	623b      	str	r3, [r7, #32]
}
 80086a2:	bf00      	nop
 80086a4:	e7fe      	b.n	80086a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	61fb      	str	r3, [r7, #28]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086c2:	23bc      	movs	r3, #188	; 0xbc
 80086c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2bbc      	cmp	r3, #188	; 0xbc
 80086ca:	d00a      	beq.n	80086e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	61bb      	str	r3, [r7, #24]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d01e      	beq.n	8008728 <xTaskCreateStatic+0xac>
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01b      	beq.n	8008728 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2202      	movs	r2, #2
 80086fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008702:	2300      	movs	r3, #0
 8008704:	9303      	str	r3, [sp, #12]
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	9302      	str	r3, [sp, #8]
 800870a:	f107 0314 	add.w	r3, r7, #20
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f850 	bl	80087c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008722:	f000 f8f3 	bl	800890c <prvAddNewTaskToReadyList>
 8008726:	e001      	b.n	800872c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3728      	adds	r7, #40	; 0x28
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008736:	b580      	push	{r7, lr}
 8008738:	b08c      	sub	sp, #48	; 0x30
 800873a:	af04      	add	r7, sp, #16
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008746:	88fb      	ldrh	r3, [r7, #6]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fc5c 	bl	800a008 <pvPortMalloc>
 8008750:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00e      	beq.n	8008776 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008758:	20bc      	movs	r0, #188	; 0xbc
 800875a:	f001 fc55 	bl	800a008 <pvPortMalloc>
 800875e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	631a      	str	r2, [r3, #48]	; 0x30
 800876c:	e005      	b.n	800877a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f001 fd16 	bl	800a1a0 <vPortFree>
 8008774:	e001      	b.n	800877a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008788:	88fa      	ldrh	r2, [r7, #6]
 800878a:	2300      	movs	r3, #0
 800878c:	9303      	str	r3, [sp, #12]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	9302      	str	r3, [sp, #8]
 8008792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f80e 	bl	80087c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a4:	69f8      	ldr	r0, [r7, #28]
 80087a6:	f000 f8b1 	bl	800890c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087aa:	2301      	movs	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e002      	b.n	80087b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087b0:	f04f 33ff 	mov.w	r3, #4294967295
 80087b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087b6:	69bb      	ldr	r3, [r7, #24]
	}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3720      	adds	r7, #32
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	461a      	mov	r2, r3
 80087d8:	21a5      	movs	r1, #165	; 0xa5
 80087da:	f002 fb1d 	bl	800ae18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087e8:	3b01      	subs	r3, #1
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f023 0307 	bic.w	r3, r3, #7
 80087f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	617b      	str	r3, [r7, #20]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01f      	beq.n	800885e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800881e:	2300      	movs	r3, #0
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	e012      	b.n	800884a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	4413      	add	r3, r2
 800882a:	7819      	ldrb	r1, [r3, #0]
 800882c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	3334      	adds	r3, #52	; 0x34
 8008834:	460a      	mov	r2, r1
 8008836:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	4413      	add	r3, r2
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d006      	beq.n	8008852 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	3301      	adds	r3, #1
 8008848:	61fb      	str	r3, [r7, #28]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	2b0f      	cmp	r3, #15
 800884e:	d9e9      	bls.n	8008824 <prvInitialiseNewTask+0x64>
 8008850:	e000      	b.n	8008854 <prvInitialiseNewTask+0x94>
			{
				break;
 8008852:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800885c:	e003      	b.n	8008866 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	2b37      	cmp	r3, #55	; 0x37
 800886a:	d901      	bls.n	8008870 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800886c:	2337      	movs	r3, #55	; 0x37
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008874:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800887a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	2200      	movs	r2, #0
 8008880:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff f978 	bl	8007b7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	3318      	adds	r3, #24
 8008890:	4618      	mov	r0, r3
 8008892:	f7ff f973 	bl	8007b7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800889a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	3354      	adds	r3, #84	; 0x54
 80088c0:	2260      	movs	r2, #96	; 0x60
 80088c2:	2100      	movs	r1, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f002 faa7 	bl	800ae18 <memset>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	4a0c      	ldr	r2, [pc, #48]	; (8008900 <prvInitialiseNewTask+0x140>)
 80088ce:	659a      	str	r2, [r3, #88]	; 0x58
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <prvInitialiseNewTask+0x144>)
 80088d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	4a0b      	ldr	r2, [pc, #44]	; (8008908 <prvInitialiseNewTask+0x148>)
 80088da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	69b8      	ldr	r0, [r7, #24]
 80088e2:	f001 f941 	bl	8009b68 <pxPortInitialiseStack>
 80088e6:	4602      	mov	r2, r0
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088f8:	bf00      	nop
 80088fa:	3720      	adds	r7, #32
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	0800b0c0 	.word	0x0800b0c0
 8008904:	0800b0e0 	.word	0x0800b0e0
 8008908:	0800b0a0 	.word	0x0800b0a0

0800890c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008914:	f001 fa56 	bl	8009dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008918:	4b2d      	ldr	r3, [pc, #180]	; (80089d0 <prvAddNewTaskToReadyList+0xc4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3301      	adds	r3, #1
 800891e:	4a2c      	ldr	r2, [pc, #176]	; (80089d0 <prvAddNewTaskToReadyList+0xc4>)
 8008920:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008922:	4b2c      	ldr	r3, [pc, #176]	; (80089d4 <prvAddNewTaskToReadyList+0xc8>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800892a:	4a2a      	ldr	r2, [pc, #168]	; (80089d4 <prvAddNewTaskToReadyList+0xc8>)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008930:	4b27      	ldr	r3, [pc, #156]	; (80089d0 <prvAddNewTaskToReadyList+0xc4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d110      	bne.n	800895a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008938:	f000 fc26 	bl	8009188 <prvInitialiseTaskLists>
 800893c:	e00d      	b.n	800895a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800893e:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <prvAddNewTaskToReadyList+0xcc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d109      	bne.n	800895a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008946:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <prvAddNewTaskToReadyList+0xc8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	429a      	cmp	r2, r3
 8008952:	d802      	bhi.n	800895a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008954:	4a1f      	ldr	r2, [pc, #124]	; (80089d4 <prvAddNewTaskToReadyList+0xc8>)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <prvAddNewTaskToReadyList+0xd0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	4a1e      	ldr	r2, [pc, #120]	; (80089dc <prvAddNewTaskToReadyList+0xd0>)
 8008962:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008964:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <prvAddNewTaskToReadyList+0xd0>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008970:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <prvAddNewTaskToReadyList+0xd4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d903      	bls.n	8008980 <prvAddNewTaskToReadyList+0x74>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a18      	ldr	r2, [pc, #96]	; (80089e0 <prvAddNewTaskToReadyList+0xd4>)
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <prvAddNewTaskToReadyList+0xd8>)
 800898e:	441a      	add	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f7ff f8fd 	bl	8007b96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800899c:	f001 fa42 	bl	8009e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <prvAddNewTaskToReadyList+0xcc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00e      	beq.n	80089c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvAddNewTaskToReadyList+0xc8>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d207      	bcs.n	80089c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089b6:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <prvAddNewTaskToReadyList+0xdc>)
 80089b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	20000e58 	.word	0x20000e58
 80089d4:	20000984 	.word	0x20000984
 80089d8:	20000e64 	.word	0x20000e64
 80089dc:	20000e74 	.word	0x20000e74
 80089e0:	20000e60 	.word	0x20000e60
 80089e4:	20000988 	.word	0x20000988
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d017      	beq.n	8008a2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <vTaskDelay+0x60>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <vTaskDelay+0x30>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a1c:	f000 f88a 	bl	8008b34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fcfe 	bl	8009424 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a28:	f000 f892 	bl	8008b50 <xTaskResumeAll>
 8008a2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d107      	bne.n	8008a44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <vTaskDelay+0x64>)
 8008a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000e80 	.word	0x20000e80
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a62:	463a      	mov	r2, r7
 8008a64:	1d39      	adds	r1, r7, #4
 8008a66:	f107 0308 	add.w	r3, r7, #8
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff f832 	bl	8007ad4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	9202      	str	r2, [sp, #8]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	460a      	mov	r2, r1
 8008a82:	4924      	ldr	r1, [pc, #144]	; (8008b14 <vTaskStartScheduler+0xc0>)
 8008a84:	4824      	ldr	r0, [pc, #144]	; (8008b18 <vTaskStartScheduler+0xc4>)
 8008a86:	f7ff fdf9 	bl	800867c <xTaskCreateStatic>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4a23      	ldr	r2, [pc, #140]	; (8008b1c <vTaskStartScheduler+0xc8>)
 8008a8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a90:	4b22      	ldr	r3, [pc, #136]	; (8008b1c <vTaskStartScheduler+0xc8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e001      	b.n	8008aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008aa8:	f000 fd10 	bl	80094cc <xTimerCreateTimerTask>
 8008aac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d11b      	bne.n	8008aec <vTaskStartScheduler+0x98>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	613b      	str	r3, [r7, #16]
}
 8008ac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <vTaskStartScheduler+0xcc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3354      	adds	r3, #84	; 0x54
 8008ace:	4a15      	ldr	r2, [pc, #84]	; (8008b24 <vTaskStartScheduler+0xd0>)
 8008ad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad2:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <vTaskStartScheduler+0xd4>)
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ada:	4b14      	ldr	r3, [pc, #80]	; (8008b2c <vTaskStartScheduler+0xd8>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ae0:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <vTaskStartScheduler+0xdc>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ae6:	f001 f8cb 	bl	8009c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008aea:	e00e      	b.n	8008b0a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d10a      	bne.n	8008b0a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	60fb      	str	r3, [r7, #12]
}
 8008b06:	bf00      	nop
 8008b08:	e7fe      	b.n	8008b08 <vTaskStartScheduler+0xb4>
}
 8008b0a:	bf00      	nop
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	0800afe0 	.word	0x0800afe0
 8008b18:	08009159 	.word	0x08009159
 8008b1c:	20000e7c 	.word	0x20000e7c
 8008b20:	20000984 	.word	0x20000984
 8008b24:	20000184 	.word	0x20000184
 8008b28:	20000e78 	.word	0x20000e78
 8008b2c:	20000e64 	.word	0x20000e64
 8008b30:	20000e5c 	.word	0x20000e5c

08008b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <vTaskSuspendAll+0x18>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4a03      	ldr	r2, [pc, #12]	; (8008b4c <vTaskSuspendAll+0x18>)
 8008b40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b42:	bf00      	nop
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	20000e80 	.word	0x20000e80

08008b50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b5e:	4b42      	ldr	r3, [pc, #264]	; (8008c68 <xTaskResumeAll+0x118>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <xTaskResumeAll+0x2c>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	603b      	str	r3, [r7, #0]
}
 8008b78:	bf00      	nop
 8008b7a:	e7fe      	b.n	8008b7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b7c:	f001 f922 	bl	8009dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b80:	4b39      	ldr	r3, [pc, #228]	; (8008c68 <xTaskResumeAll+0x118>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	4a38      	ldr	r2, [pc, #224]	; (8008c68 <xTaskResumeAll+0x118>)
 8008b88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8a:	4b37      	ldr	r3, [pc, #220]	; (8008c68 <xTaskResumeAll+0x118>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d162      	bne.n	8008c58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b92:	4b36      	ldr	r3, [pc, #216]	; (8008c6c <xTaskResumeAll+0x11c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d05e      	beq.n	8008c58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b9a:	e02f      	b.n	8008bfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b9c:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <xTaskResumeAll+0x120>)
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3318      	adds	r3, #24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff f851 	bl	8007c50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff f84c 	bl	8007c50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bbc:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <xTaskResumeAll+0x124>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d903      	bls.n	8008bcc <xTaskResumeAll+0x7c>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4a2a      	ldr	r2, [pc, #168]	; (8008c74 <xTaskResumeAll+0x124>)
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4a27      	ldr	r2, [pc, #156]	; (8008c78 <xTaskResumeAll+0x128>)
 8008bda:	441a      	add	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fe ffd7 	bl	8007b96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bec:	4b23      	ldr	r3, [pc, #140]	; (8008c7c <xTaskResumeAll+0x12c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d302      	bcc.n	8008bfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008bf6:	4b22      	ldr	r3, [pc, #136]	; (8008c80 <xTaskResumeAll+0x130>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bfc:	4b1c      	ldr	r3, [pc, #112]	; (8008c70 <xTaskResumeAll+0x120>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1cb      	bne.n	8008b9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c0a:	f000 fb5f 	bl	80092cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	; (8008c84 <xTaskResumeAll+0x134>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d010      	beq.n	8008c3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c1a:	f000 f847 	bl	8008cac <xTaskIncrementTick>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c24:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <xTaskResumeAll+0x130>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f1      	bne.n	8008c1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c36:	4b13      	ldr	r3, [pc, #76]	; (8008c84 <xTaskResumeAll+0x134>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c3c:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <xTaskResumeAll+0x130>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c48:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <xTaskResumeAll+0x138>)
 8008c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c58:	f001 f8e4 	bl	8009e24 <vPortExitCritical>

	return xAlreadyYielded;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20000e80 	.word	0x20000e80
 8008c6c:	20000e58 	.word	0x20000e58
 8008c70:	20000e18 	.word	0x20000e18
 8008c74:	20000e60 	.word	0x20000e60
 8008c78:	20000988 	.word	0x20000988
 8008c7c:	20000984 	.word	0x20000984
 8008c80:	20000e6c 	.word	0x20000e6c
 8008c84:	20000e68 	.word	0x20000e68
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c92:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <xTaskGetTickCount+0x1c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c98:	687b      	ldr	r3, [r7, #4]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20000e5c 	.word	0x20000e5c

08008cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cb6:	4b4f      	ldr	r3, [pc, #316]	; (8008df4 <xTaskIncrementTick+0x148>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f040 808f 	bne.w	8008dde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cc0:	4b4d      	ldr	r3, [pc, #308]	; (8008df8 <xTaskIncrementTick+0x14c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cc8:	4a4b      	ldr	r2, [pc, #300]	; (8008df8 <xTaskIncrementTick+0x14c>)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d120      	bne.n	8008d16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cd4:	4b49      	ldr	r3, [pc, #292]	; (8008dfc <xTaskIncrementTick+0x150>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	603b      	str	r3, [r7, #0]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xTaskIncrementTick+0x46>
 8008cf4:	4b41      	ldr	r3, [pc, #260]	; (8008dfc <xTaskIncrementTick+0x150>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <xTaskIncrementTick+0x154>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a3f      	ldr	r2, [pc, #252]	; (8008dfc <xTaskIncrementTick+0x150>)
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4a3f      	ldr	r2, [pc, #252]	; (8008e00 <xTaskIncrementTick+0x154>)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <xTaskIncrementTick+0x158>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	4a3d      	ldr	r2, [pc, #244]	; (8008e04 <xTaskIncrementTick+0x158>)
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	f000 fadb 	bl	80092cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d16:	4b3c      	ldr	r3, [pc, #240]	; (8008e08 <xTaskIncrementTick+0x15c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d349      	bcc.n	8008db4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d20:	4b36      	ldr	r3, [pc, #216]	; (8008dfc <xTaskIncrementTick+0x150>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d104      	bne.n	8008d34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <xTaskIncrementTick+0x15c>)
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	601a      	str	r2, [r3, #0]
					break;
 8008d32:	e03f      	b.n	8008db4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d34:	4b31      	ldr	r3, [pc, #196]	; (8008dfc <xTaskIncrementTick+0x150>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d203      	bcs.n	8008d54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d4c:	4a2e      	ldr	r2, [pc, #184]	; (8008e08 <xTaskIncrementTick+0x15c>)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d52:	e02f      	b.n	8008db4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fe ff79 	bl	8007c50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d004      	beq.n	8008d70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	3318      	adds	r3, #24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe ff70 	bl	8007c50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <xTaskIncrementTick+0x160>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d903      	bls.n	8008d84 <xTaskIncrementTick+0xd8>
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	4a22      	ldr	r2, [pc, #136]	; (8008e0c <xTaskIncrementTick+0x160>)
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <xTaskIncrementTick+0x164>)
 8008d92:	441a      	add	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fe fefb 	bl	8007b96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da4:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <xTaskIncrementTick+0x168>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3b8      	bcc.n	8008d20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db2:	e7b5      	b.n	8008d20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008db4:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <xTaskIncrementTick+0x168>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	4915      	ldr	r1, [pc, #84]	; (8008e10 <xTaskIncrementTick+0x164>)
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d901      	bls.n	8008dd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dd0:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <xTaskIncrementTick+0x16c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	617b      	str	r3, [r7, #20]
 8008ddc:	e004      	b.n	8008de8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <xTaskIncrementTick+0x170>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3301      	adds	r3, #1
 8008de4:	4a0d      	ldr	r2, [pc, #52]	; (8008e1c <xTaskIncrementTick+0x170>)
 8008de6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008de8:	697b      	ldr	r3, [r7, #20]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000e80 	.word	0x20000e80
 8008df8:	20000e5c 	.word	0x20000e5c
 8008dfc:	20000e10 	.word	0x20000e10
 8008e00:	20000e14 	.word	0x20000e14
 8008e04:	20000e70 	.word	0x20000e70
 8008e08:	20000e78 	.word	0x20000e78
 8008e0c:	20000e60 	.word	0x20000e60
 8008e10:	20000988 	.word	0x20000988
 8008e14:	20000984 	.word	0x20000984
 8008e18:	20000e6c 	.word	0x20000e6c
 8008e1c:	20000e68 	.word	0x20000e68

08008e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e26:	4b2a      	ldr	r3, [pc, #168]	; (8008ed0 <vTaskSwitchContext+0xb0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e2e:	4b29      	ldr	r3, [pc, #164]	; (8008ed4 <vTaskSwitchContext+0xb4>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e34:	e046      	b.n	8008ec4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e36:	4b27      	ldr	r3, [pc, #156]	; (8008ed4 <vTaskSwitchContext+0xb4>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e3c:	4b26      	ldr	r3, [pc, #152]	; (8008ed8 <vTaskSwitchContext+0xb8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	e010      	b.n	8008e66 <vTaskSwitchContext+0x46>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <vTaskSwitchContext+0x3e>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	491d      	ldr	r1, [pc, #116]	; (8008edc <vTaskSwitchContext+0xbc>)
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0e4      	beq.n	8008e44 <vTaskSwitchContext+0x24>
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4a15      	ldr	r2, [pc, #84]	; (8008edc <vTaskSwitchContext+0xbc>)
 8008e86:	4413      	add	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	605a      	str	r2, [r3, #4]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d104      	bne.n	8008eaa <vTaskSwitchContext+0x8a>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	605a      	str	r2, [r3, #4]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	4a0b      	ldr	r2, [pc, #44]	; (8008ee0 <vTaskSwitchContext+0xc0>)
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <vTaskSwitchContext+0xb8>)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008eba:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <vTaskSwitchContext+0xc0>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3354      	adds	r3, #84	; 0x54
 8008ec0:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <vTaskSwitchContext+0xc4>)
 8008ec2:	6013      	str	r3, [r2, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000e80 	.word	0x20000e80
 8008ed4:	20000e6c 	.word	0x20000e6c
 8008ed8:	20000e60 	.word	0x20000e60
 8008edc:	20000988 	.word	0x20000988
 8008ee0:	20000984 	.word	0x20000984
 8008ee4:	20000184 	.word	0x20000184

08008ee8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <vTaskPlaceOnEventList+0x44>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3318      	adds	r3, #24
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fe fe61 	bl	8007bde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	6838      	ldr	r0, [r7, #0]
 8008f20:	f000 fa80 	bl	8009424 <prvAddCurrentTaskToDelayedList>
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20000984 	.word	0x20000984

08008f30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	617b      	str	r3, [r7, #20]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7fe fe18 	bl	8007b96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	68b8      	ldr	r0, [r7, #8]
 8008f76:	f000 fa55 	bl	8009424 <prvAddCurrentTaskToDelayedList>
	}
 8008f7a:	bf00      	nop
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000984 	.word	0x20000984

08008f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10a      	bne.n	8008fb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	60fb      	str	r3, [r7, #12]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3318      	adds	r3, #24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fe49 	bl	8007c50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <xTaskRemoveFromEventList+0xb0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d11d      	bne.n	8009002 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fe40 	bl	8007c50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4b19      	ldr	r3, [pc, #100]	; (800903c <xTaskRemoveFromEventList+0xb4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d903      	bls.n	8008fe4 <xTaskRemoveFromEventList+0x5c>
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	4a16      	ldr	r2, [pc, #88]	; (800903c <xTaskRemoveFromEventList+0xb4>)
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4613      	mov	r3, r2
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4a13      	ldr	r2, [pc, #76]	; (8009040 <xTaskRemoveFromEventList+0xb8>)
 8008ff2:	441a      	add	r2, r3
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f7fe fdcb 	bl	8007b96 <vListInsertEnd>
 8009000:	e005      	b.n	800900e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	3318      	adds	r3, #24
 8009006:	4619      	mov	r1, r3
 8009008:	480e      	ldr	r0, [pc, #56]	; (8009044 <xTaskRemoveFromEventList+0xbc>)
 800900a:	f7fe fdc4 	bl	8007b96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <xTaskRemoveFromEventList+0xc0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	429a      	cmp	r2, r3
 800901a:	d905      	bls.n	8009028 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009020:	4b0a      	ldr	r3, [pc, #40]	; (800904c <xTaskRemoveFromEventList+0xc4>)
 8009022:	2201      	movs	r2, #1
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e001      	b.n	800902c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009028:	2300      	movs	r3, #0
 800902a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800902c:	697b      	ldr	r3, [r7, #20]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000e80 	.word	0x20000e80
 800903c:	20000e60 	.word	0x20000e60
 8009040:	20000988 	.word	0x20000988
 8009044:	20000e18 	.word	0x20000e18
 8009048:	20000984 	.word	0x20000984
 800904c:	20000e6c 	.word	0x20000e6c

08009050 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <vTaskInternalSetTimeOutState+0x24>)
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <vTaskInternalSetTimeOutState+0x28>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	605a      	str	r2, [r3, #4]
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	20000e70 	.word	0x20000e70
 8009078:	20000e5c 	.word	0x20000e5c

0800907c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	613b      	str	r3, [r7, #16]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10a      	bne.n	80090be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80090be:	f000 fe81 	bl	8009dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090c2:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <xTaskCheckForTimeOut+0xbc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d102      	bne.n	80090e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e023      	b.n	800912a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b15      	ldr	r3, [pc, #84]	; (800913c <xTaskCheckForTimeOut+0xc0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d007      	beq.n	80090fe <xTaskCheckForTimeOut+0x82>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d302      	bcc.n	80090fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090f8:	2301      	movs	r3, #1
 80090fa:	61fb      	str	r3, [r7, #28]
 80090fc:	e015      	b.n	800912a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	429a      	cmp	r2, r3
 8009106:	d20b      	bcs.n	8009120 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7ff ff9b 	bl	8009050 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800911a:	2300      	movs	r3, #0
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	e004      	b.n	800912a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009126:	2301      	movs	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800912a:	f000 fe7b 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 800912e:	69fb      	ldr	r3, [r7, #28]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3720      	adds	r7, #32
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000e5c 	.word	0x20000e5c
 800913c:	20000e70 	.word	0x20000e70

08009140 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009144:	4b03      	ldr	r3, [pc, #12]	; (8009154 <vTaskMissedYield+0x14>)
 8009146:	2201      	movs	r2, #1
 8009148:	601a      	str	r2, [r3, #0]
}
 800914a:	bf00      	nop
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	20000e6c 	.word	0x20000e6c

08009158 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009160:	f000 f852 	bl	8009208 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <prvIdleTask+0x28>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d9f9      	bls.n	8009160 <prvIdleTask+0x8>
			{
				taskYIELD();
 800916c:	4b05      	ldr	r3, [pc, #20]	; (8009184 <prvIdleTask+0x2c>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800917c:	e7f0      	b.n	8009160 <prvIdleTask+0x8>
 800917e:	bf00      	nop
 8009180:	20000988 	.word	0x20000988
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
 8009192:	e00c      	b.n	80091ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4a12      	ldr	r2, [pc, #72]	; (80091e8 <prvInitialiseTaskLists+0x60>)
 80091a0:	4413      	add	r3, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe fcca 	bl	8007b3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3301      	adds	r3, #1
 80091ac:	607b      	str	r3, [r7, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2b37      	cmp	r3, #55	; 0x37
 80091b2:	d9ef      	bls.n	8009194 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091b4:	480d      	ldr	r0, [pc, #52]	; (80091ec <prvInitialiseTaskLists+0x64>)
 80091b6:	f7fe fcc1 	bl	8007b3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091ba:	480d      	ldr	r0, [pc, #52]	; (80091f0 <prvInitialiseTaskLists+0x68>)
 80091bc:	f7fe fcbe 	bl	8007b3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091c0:	480c      	ldr	r0, [pc, #48]	; (80091f4 <prvInitialiseTaskLists+0x6c>)
 80091c2:	f7fe fcbb 	bl	8007b3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091c6:	480c      	ldr	r0, [pc, #48]	; (80091f8 <prvInitialiseTaskLists+0x70>)
 80091c8:	f7fe fcb8 	bl	8007b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091cc:	480b      	ldr	r0, [pc, #44]	; (80091fc <prvInitialiseTaskLists+0x74>)
 80091ce:	f7fe fcb5 	bl	8007b3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091d2:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <prvInitialiseTaskLists+0x78>)
 80091d4:	4a05      	ldr	r2, [pc, #20]	; (80091ec <prvInitialiseTaskLists+0x64>)
 80091d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <prvInitialiseTaskLists+0x7c>)
 80091da:	4a05      	ldr	r2, [pc, #20]	; (80091f0 <prvInitialiseTaskLists+0x68>)
 80091dc:	601a      	str	r2, [r3, #0]
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20000988 	.word	0x20000988
 80091ec:	20000de8 	.word	0x20000de8
 80091f0:	20000dfc 	.word	0x20000dfc
 80091f4:	20000e18 	.word	0x20000e18
 80091f8:	20000e2c 	.word	0x20000e2c
 80091fc:	20000e44 	.word	0x20000e44
 8009200:	20000e10 	.word	0x20000e10
 8009204:	20000e14 	.word	0x20000e14

08009208 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800920e:	e019      	b.n	8009244 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009210:	f000 fdd8 	bl	8009dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009214:	4b10      	ldr	r3, [pc, #64]	; (8009258 <prvCheckTasksWaitingTermination+0x50>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fd15 	bl	8007c50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009226:	4b0d      	ldr	r3, [pc, #52]	; (800925c <prvCheckTasksWaitingTermination+0x54>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	4a0b      	ldr	r2, [pc, #44]	; (800925c <prvCheckTasksWaitingTermination+0x54>)
 800922e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009230:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <prvCheckTasksWaitingTermination+0x58>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3b01      	subs	r3, #1
 8009236:	4a0a      	ldr	r2, [pc, #40]	; (8009260 <prvCheckTasksWaitingTermination+0x58>)
 8009238:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800923a:	f000 fdf3 	bl	8009e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f810 	bl	8009264 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009244:	4b06      	ldr	r3, [pc, #24]	; (8009260 <prvCheckTasksWaitingTermination+0x58>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1e1      	bne.n	8009210 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800924c:	bf00      	nop
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20000e2c 	.word	0x20000e2c
 800925c:	20000e58 	.word	0x20000e58
 8009260:	20000e40 	.word	0x20000e40

08009264 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3354      	adds	r3, #84	; 0x54
 8009270:	4618      	mov	r0, r3
 8009272:	f001 fde7 	bl	800ae44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800927c:	2b00      	cmp	r3, #0
 800927e:	d108      	bne.n	8009292 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	4618      	mov	r0, r3
 8009286:	f000 ff8b 	bl	800a1a0 <vPortFree>
				vPortFree( pxTCB );
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 ff88 	bl	800a1a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009290:	e018      	b.n	80092c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009298:	2b01      	cmp	r3, #1
 800929a:	d103      	bne.n	80092a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff7f 	bl	800a1a0 <vPortFree>
	}
 80092a2:	e00f      	b.n	80092c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d00a      	beq.n	80092c4 <prvDeleteTCB+0x60>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	60fb      	str	r3, [r7, #12]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <prvDeleteTCB+0x5e>
	}
 80092c4:	bf00      	nop
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092d2:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <prvResetNextTaskUnblockTime+0x38>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <prvResetNextTaskUnblockTime+0x3c>)
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092e4:	e008      	b.n	80092f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e6:	4b07      	ldr	r3, [pc, #28]	; (8009304 <prvResetNextTaskUnblockTime+0x38>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a04      	ldr	r2, [pc, #16]	; (8009308 <prvResetNextTaskUnblockTime+0x3c>)
 80092f6:	6013      	str	r3, [r2, #0]
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20000e10 	.word	0x20000e10
 8009308:	20000e78 	.word	0x20000e78

0800930c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <xTaskGetSchedulerState+0x34>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800931a:	2301      	movs	r3, #1
 800931c:	607b      	str	r3, [r7, #4]
 800931e:	e008      	b.n	8009332 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009320:	4b08      	ldr	r3, [pc, #32]	; (8009344 <xTaskGetSchedulerState+0x38>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d102      	bne.n	800932e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009328:	2302      	movs	r3, #2
 800932a:	607b      	str	r3, [r7, #4]
 800932c:	e001      	b.n	8009332 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800932e:	2300      	movs	r3, #0
 8009330:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009332:	687b      	ldr	r3, [r7, #4]
	}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000e64 	.word	0x20000e64
 8009344:	20000e80 	.word	0x20000e80

08009348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d056      	beq.n	800940c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800935e:	4b2e      	ldr	r3, [pc, #184]	; (8009418 <xTaskPriorityDisinherit+0xd0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d00a      	beq.n	800937e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	60fb      	str	r3, [r7, #12]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60bb      	str	r3, [r7, #8]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	1e5a      	subs	r2, r3, #1
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d02c      	beq.n	800940c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d128      	bne.n	800940c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	3304      	adds	r3, #4
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fc46 	bl	8007c50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b0f      	ldr	r3, [pc, #60]	; (800941c <xTaskPriorityDisinherit+0xd4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <xTaskPriorityDisinherit+0xa4>
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4a0c      	ldr	r2, [pc, #48]	; (800941c <xTaskPriorityDisinherit+0xd4>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a09      	ldr	r2, [pc, #36]	; (8009420 <xTaskPriorityDisinherit+0xd8>)
 80093fa:	441a      	add	r2, r3
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fe fbc7 	bl	8007b96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009408:	2301      	movs	r3, #1
 800940a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800940c:	697b      	ldr	r3, [r7, #20]
	}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20000984 	.word	0x20000984
 800941c:	20000e60 	.word	0x20000e60
 8009420:	20000988 	.word	0x20000988

08009424 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800942e:	4b21      	ldr	r3, [pc, #132]	; (80094b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009434:	4b20      	ldr	r3, [pc, #128]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3304      	adds	r3, #4
 800943a:	4618      	mov	r0, r3
 800943c:	f7fe fc08 	bl	8007c50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d10a      	bne.n	800945e <prvAddCurrentTaskToDelayedList+0x3a>
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d007      	beq.n	800945e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800944e:	4b1a      	ldr	r3, [pc, #104]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3304      	adds	r3, #4
 8009454:	4619      	mov	r1, r3
 8009456:	4819      	ldr	r0, [pc, #100]	; (80094bc <prvAddCurrentTaskToDelayedList+0x98>)
 8009458:	f7fe fb9d 	bl	8007b96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800945c:	e026      	b.n	80094ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4413      	add	r3, r2
 8009464:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009466:	4b14      	ldr	r3, [pc, #80]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	429a      	cmp	r2, r3
 8009474:	d209      	bcs.n	800948a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009476:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fbab 	bl	8007bde <vListInsert>
}
 8009488:	e010      	b.n	80094ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948a:	4b0e      	ldr	r3, [pc, #56]	; (80094c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fe fba1 	bl	8007bde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d202      	bcs.n	80094ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094a6:	4a08      	ldr	r2, [pc, #32]	; (80094c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	6013      	str	r3, [r2, #0]
}
 80094ac:	bf00      	nop
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20000e5c 	.word	0x20000e5c
 80094b8:	20000984 	.word	0x20000984
 80094bc:	20000e44 	.word	0x20000e44
 80094c0:	20000e14 	.word	0x20000e14
 80094c4:	20000e10 	.word	0x20000e10
 80094c8:	20000e78 	.word	0x20000e78

080094cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	; 0x28
 80094d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094d6:	f000 fb07 	bl	8009ae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094da:	4b1c      	ldr	r3, [pc, #112]	; (800954c <xTimerCreateTimerTask+0x80>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d021      	beq.n	8009526 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094ea:	1d3a      	adds	r2, r7, #4
 80094ec:	f107 0108 	add.w	r1, r7, #8
 80094f0:	f107 030c 	add.w	r3, r7, #12
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fb07 	bl	8007b08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	9202      	str	r2, [sp, #8]
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	2302      	movs	r3, #2
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	460a      	mov	r2, r1
 800950c:	4910      	ldr	r1, [pc, #64]	; (8009550 <xTimerCreateTimerTask+0x84>)
 800950e:	4811      	ldr	r0, [pc, #68]	; (8009554 <xTimerCreateTimerTask+0x88>)
 8009510:	f7ff f8b4 	bl	800867c <xTaskCreateStatic>
 8009514:	4603      	mov	r3, r0
 8009516:	4a10      	ldr	r2, [pc, #64]	; (8009558 <xTimerCreateTimerTask+0x8c>)
 8009518:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800951a:	4b0f      	ldr	r3, [pc, #60]	; (8009558 <xTimerCreateTimerTask+0x8c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009522:	2301      	movs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009530:	f383 8811 	msr	BASEPRI, r3
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	613b      	str	r3, [r7, #16]
}
 800953e:	bf00      	nop
 8009540:	e7fe      	b.n	8009540 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20000eb4 	.word	0x20000eb4
 8009550:	0800afe8 	.word	0x0800afe8
 8009554:	08009691 	.word	0x08009691
 8009558:	20000eb8 	.word	0x20000eb8

0800955c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	; 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800956a:	2300      	movs	r3, #0
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	623b      	str	r3, [r7, #32]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800958a:	4b1a      	ldr	r3, [pc, #104]	; (80095f4 <xTimerGenericCommand+0x98>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d02a      	beq.n	80095e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b05      	cmp	r3, #5
 80095a2:	dc18      	bgt.n	80095d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095a4:	f7ff feb2 	bl	800930c <xTaskGetSchedulerState>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d109      	bne.n	80095c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095ae:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <xTimerGenericCommand+0x98>)
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f107 0110 	add.w	r1, r7, #16
 80095b6:	2300      	movs	r3, #0
 80095b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ba:	f7fe fc77 	bl	8007eac <xQueueGenericSend>
 80095be:	6278      	str	r0, [r7, #36]	; 0x24
 80095c0:	e012      	b.n	80095e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095c2:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <xTimerGenericCommand+0x98>)
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	f107 0110 	add.w	r1, r7, #16
 80095ca:	2300      	movs	r3, #0
 80095cc:	2200      	movs	r2, #0
 80095ce:	f7fe fc6d 	bl	8007eac <xQueueGenericSend>
 80095d2:	6278      	str	r0, [r7, #36]	; 0x24
 80095d4:	e008      	b.n	80095e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095d6:	4b07      	ldr	r3, [pc, #28]	; (80095f4 <xTimerGenericCommand+0x98>)
 80095d8:	6818      	ldr	r0, [r3, #0]
 80095da:	f107 0110 	add.w	r1, r7, #16
 80095de:	2300      	movs	r3, #0
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	f7fe fd61 	bl	80080a8 <xQueueGenericSendFromISR>
 80095e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3728      	adds	r7, #40	; 0x28
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000eb4 	.word	0x20000eb4

080095f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <prvProcessExpiredTimer+0x94>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3304      	adds	r3, #4
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fb1d 	bl	8007c50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d022      	beq.n	800966a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	699a      	ldr	r2, [r3, #24]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	18d1      	adds	r1, r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	6978      	ldr	r0, [r7, #20]
 8009632:	f000 f8d1 	bl	80097d8 <prvInsertTimerInActiveList>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01f      	beq.n	800967c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800963c:	2300      	movs	r3, #0
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	2300      	movs	r3, #0
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	2100      	movs	r1, #0
 8009646:	6978      	ldr	r0, [r7, #20]
 8009648:	f7ff ff88 	bl	800955c <xTimerGenericCommand>
 800964c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d113      	bne.n	800967c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	60fb      	str	r3, [r7, #12]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	b2da      	uxtb	r2, r3
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	6978      	ldr	r0, [r7, #20]
 8009682:	4798      	blx	r3
}
 8009684:	bf00      	nop
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	20000eac 	.word	0x20000eac

08009690 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f857 	bl	8009750 <prvGetNextExpireTime>
 80096a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4619      	mov	r1, r3
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f803 	bl	80096b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096ae:	f000 f8d5 	bl	800985c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096b2:	e7f1      	b.n	8009698 <prvTimerTask+0x8>

080096b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096be:	f7ff fa39 	bl	8008b34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 f866 	bl	8009798 <prvSampleTimeNow>
 80096cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d130      	bne.n	8009736 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10a      	bne.n	80096f0 <prvProcessTimerOrBlockTask+0x3c>
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d806      	bhi.n	80096f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096e2:	f7ff fa35 	bl	8008b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7ff ff85 	bl	80095f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096ee:	e024      	b.n	800973a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <prvProcessTimerOrBlockTask+0x90>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <prvProcessTimerOrBlockTask+0x50>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <prvProcessTimerOrBlockTask+0x52>
 8009704:	2300      	movs	r3, #0
 8009706:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009708:	4b0f      	ldr	r3, [pc, #60]	; (8009748 <prvProcessTimerOrBlockTask+0x94>)
 800970a:	6818      	ldr	r0, [r3, #0]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	4619      	mov	r1, r3
 8009716:	f7fe ff7d 	bl	8008614 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800971a:	f7ff fa19 	bl	8008b50 <xTaskResumeAll>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <prvProcessTimerOrBlockTask+0x98>)
 8009726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	f3bf 8f6f 	isb	sy
}
 8009734:	e001      	b.n	800973a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009736:	f7ff fa0b 	bl	8008b50 <xTaskResumeAll>
}
 800973a:	bf00      	nop
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000eb0 	.word	0x20000eb0
 8009748:	20000eb4 	.word	0x20000eb4
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009758:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <prvGetNextExpireTime+0x44>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <prvGetNextExpireTime+0x16>
 8009762:	2201      	movs	r2, #1
 8009764:	e000      	b.n	8009768 <prvGetNextExpireTime+0x18>
 8009766:	2200      	movs	r2, #0
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <prvGetNextExpireTime+0x44>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	e001      	b.n	8009784 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009780:	2300      	movs	r3, #0
 8009782:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009784:	68fb      	ldr	r3, [r7, #12]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20000eac 	.word	0x20000eac

08009798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097a0:	f7ff fa74 	bl	8008c8c <xTaskGetTickCount>
 80097a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <prvSampleTimeNow+0x3c>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d205      	bcs.n	80097bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097b0:	f000 f936 	bl	8009a20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	e002      	b.n	80097c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097c2:	4a04      	ldr	r2, [pc, #16]	; (80097d4 <prvSampleTimeNow+0x3c>)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097c8:	68fb      	ldr	r3, [r7, #12]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000ebc 	.word	0x20000ebc

080097d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d812      	bhi.n	8009824 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	1ad2      	subs	r2, r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	429a      	cmp	r2, r3
 800980a:	d302      	bcc.n	8009812 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800980c:	2301      	movs	r3, #1
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e01b      	b.n	800984a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009812:	4b10      	ldr	r3, [pc, #64]	; (8009854 <prvInsertTimerInActiveList+0x7c>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3304      	adds	r3, #4
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7fe f9de 	bl	8007bde <vListInsert>
 8009822:	e012      	b.n	800984a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d206      	bcs.n	800983a <prvInsertTimerInActiveList+0x62>
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	429a      	cmp	r2, r3
 8009832:	d302      	bcc.n	800983a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e007      	b.n	800984a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800983a:	4b07      	ldr	r3, [pc, #28]	; (8009858 <prvInsertTimerInActiveList+0x80>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fe f9ca 	bl	8007bde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800984a:	697b      	ldr	r3, [r7, #20]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20000eb0 	.word	0x20000eb0
 8009858:	20000eac 	.word	0x20000eac

0800985c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b08e      	sub	sp, #56	; 0x38
 8009860:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009862:	e0ca      	b.n	80099fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	da18      	bge.n	800989c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800986a:	1d3b      	adds	r3, r7, #4
 800986c:	3304      	adds	r3, #4
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	61fb      	str	r3, [r7, #28]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009892:	6850      	ldr	r0, [r2, #4]
 8009894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009896:	6892      	ldr	r2, [r2, #8]
 8009898:	4611      	mov	r1, r2
 800989a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f2c0 80aa 	blt.w	80099f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	3304      	adds	r3, #4
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe f9cb 	bl	8007c50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ba:	463b      	mov	r3, r7
 80098bc:	4618      	mov	r0, r3
 80098be:	f7ff ff6b 	bl	8009798 <prvSampleTimeNow>
 80098c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b09      	cmp	r3, #9
 80098c8:	f200 8097 	bhi.w	80099fa <prvProcessReceivedCommands+0x19e>
 80098cc:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <prvProcessReceivedCommands+0x78>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	080098fd 	.word	0x080098fd
 80098dc:	080098fd 	.word	0x080098fd
 80098e0:	08009971 	.word	0x08009971
 80098e4:	08009985 	.word	0x08009985
 80098e8:	080099cf 	.word	0x080099cf
 80098ec:	080098fd 	.word	0x080098fd
 80098f0:	080098fd 	.word	0x080098fd
 80098f4:	08009971 	.word	0x08009971
 80098f8:	08009985 	.word	0x08009985
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009902:	f043 0301 	orr.w	r3, r3, #1
 8009906:	b2da      	uxtb	r2, r3
 8009908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	18d1      	adds	r1, r2, r3
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991c:	f7ff ff5c 	bl	80097d8 <prvInsertTimerInActiveList>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d069      	beq.n	80099fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d05e      	beq.n	80099fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	441a      	add	r2, r3
 8009944:	2300      	movs	r3, #0
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	2100      	movs	r1, #0
 800994c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994e:	f7ff fe05 	bl	800955c <xTimerGenericCommand>
 8009952:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d14f      	bne.n	80099fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61bb      	str	r3, [r7, #24]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009972:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009976:	f023 0301 	bic.w	r3, r3, #1
 800997a:	b2da      	uxtb	r2, r3
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009982:	e03a      	b.n	80099fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800998a:	f043 0301 	orr.w	r3, r3, #1
 800998e:	b2da      	uxtb	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	699b      	ldr	r3, [r3, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	617b      	str	r3, [r7, #20]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	699a      	ldr	r2, [r3, #24]
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	18d1      	adds	r1, r2, r3
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c8:	f7ff ff06 	bl	80097d8 <prvInsertTimerInActiveList>
					break;
 80099cc:	e015      	b.n	80099fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d4:	f003 0302 	and.w	r3, r3, #2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d103      	bne.n	80099e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099de:	f000 fbdf 	bl	800a1a0 <vPortFree>
 80099e2:	e00a      	b.n	80099fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ea:	f023 0301 	bic.w	r3, r3, #1
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099f6:	e000      	b.n	80099fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80099f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099fa:	4b08      	ldr	r3, [pc, #32]	; (8009a1c <prvProcessReceivedCommands+0x1c0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	1d39      	adds	r1, r7, #4
 8009a00:	2200      	movs	r2, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fbec 	bl	80081e0 <xQueueReceive>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f47f af2a 	bne.w	8009864 <prvProcessReceivedCommands+0x8>
	}
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	3730      	adds	r7, #48	; 0x30
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	20000eb4 	.word	0x20000eb4

08009a20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a26:	e048      	b.n	8009aba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a28:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a32:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fe f905 	bl	8007c50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a54:	f003 0304 	and.w	r3, r3, #4
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d02e      	beq.n	8009aba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	4413      	add	r3, r2
 8009a64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d90e      	bls.n	8009a8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a7a:	4b19      	ldr	r3, [pc, #100]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7fe f8aa 	bl	8007bde <vListInsert>
 8009a8a:	e016      	b.n	8009aba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	2300      	movs	r3, #0
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	2100      	movs	r1, #0
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f7ff fd60 	bl	800955c <xTimerGenericCommand>
 8009a9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	603b      	str	r3, [r7, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1b1      	bne.n	8009a28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009aca:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <prvSwitchTimerLists+0xc4>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a04      	ldr	r2, [pc, #16]	; (8009ae0 <prvSwitchTimerLists+0xc0>)
 8009ad0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ad2:	4a04      	ldr	r2, [pc, #16]	; (8009ae4 <prvSwitchTimerLists+0xc4>)
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	6013      	str	r3, [r2, #0]
}
 8009ad8:	bf00      	nop
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20000eac 	.word	0x20000eac
 8009ae4:	20000eb0 	.word	0x20000eb0

08009ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009aee:	f000 f969 	bl	8009dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <prvCheckForValidListAndQueue+0x60>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d120      	bne.n	8009b3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009afa:	4814      	ldr	r0, [pc, #80]	; (8009b4c <prvCheckForValidListAndQueue+0x64>)
 8009afc:	f7fe f81e 	bl	8007b3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b00:	4813      	ldr	r0, [pc, #76]	; (8009b50 <prvCheckForValidListAndQueue+0x68>)
 8009b02:	f7fe f81b 	bl	8007b3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <prvCheckForValidListAndQueue+0x6c>)
 8009b08:	4a10      	ldr	r2, [pc, #64]	; (8009b4c <prvCheckForValidListAndQueue+0x64>)
 8009b0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b0c:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <prvCheckForValidListAndQueue+0x70>)
 8009b0e:	4a10      	ldr	r2, [pc, #64]	; (8009b50 <prvCheckForValidListAndQueue+0x68>)
 8009b10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b12:	2300      	movs	r3, #0
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <prvCheckForValidListAndQueue+0x74>)
 8009b18:	4a11      	ldr	r2, [pc, #68]	; (8009b60 <prvCheckForValidListAndQueue+0x78>)
 8009b1a:	2110      	movs	r1, #16
 8009b1c:	200a      	movs	r0, #10
 8009b1e:	f7fe f929 	bl	8007d74 <xQueueGenericCreateStatic>
 8009b22:	4603      	mov	r3, r0
 8009b24:	4a08      	ldr	r2, [pc, #32]	; (8009b48 <prvCheckForValidListAndQueue+0x60>)
 8009b26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b28:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <prvCheckForValidListAndQueue+0x60>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d005      	beq.n	8009b3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b30:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <prvCheckForValidListAndQueue+0x60>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	490b      	ldr	r1, [pc, #44]	; (8009b64 <prvCheckForValidListAndQueue+0x7c>)
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fd42 	bl	80085c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b3c:	f000 f972 	bl	8009e24 <vPortExitCritical>
}
 8009b40:	bf00      	nop
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000eb4 	.word	0x20000eb4
 8009b4c:	20000e84 	.word	0x20000e84
 8009b50:	20000e98 	.word	0x20000e98
 8009b54:	20000eac 	.word	0x20000eac
 8009b58:	20000eb0 	.word	0x20000eb0
 8009b5c:	20000f60 	.word	0x20000f60
 8009b60:	20000ec0 	.word	0x20000ec0
 8009b64:	0800aff0 	.word	0x0800aff0

08009b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3b04      	subs	r3, #4
 8009b78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f023 0201 	bic.w	r2, r3, #1
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b98:	4a0c      	ldr	r2, [pc, #48]	; (8009bcc <pxPortInitialiseStack+0x64>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3b14      	subs	r3, #20
 8009ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3b04      	subs	r3, #4
 8009bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f06f 0202 	mvn.w	r2, #2
 8009bb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3b20      	subs	r3, #32
 8009bbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	08009bd1 	.word	0x08009bd1

08009bd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bda:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <prvTaskExitError+0x54>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d00a      	beq.n	8009bfa <prvTaskExitError+0x2a>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <prvTaskExitError+0x28>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	60bb      	str	r3, [r7, #8]
}
 8009c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c0e:	bf00      	nop
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0fc      	beq.n	8009c10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c16:	bf00      	nop
 8009c18:	bf00      	nop
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	2000011c 	.word	0x2000011c
	...

08009c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <pxCurrentTCBConst2>)
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f380 8809 	msr	PSP, r0
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	4770      	bx	lr
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst2>:
 8009c50:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c58:	4808      	ldr	r0, [pc, #32]	; (8009c7c <prvPortStartFirstTask+0x24>)
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f380 8808 	msr	MSP, r0
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8814 	msr	CONTROL, r0
 8009c6a:	b662      	cpsie	i
 8009c6c:	b661      	cpsie	f
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	df00      	svc	0
 8009c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed08 	.word	0xe000ed08

08009c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c86:	4b46      	ldr	r3, [pc, #280]	; (8009da0 <xPortStartScheduler+0x120>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a46      	ldr	r2, [pc, #280]	; (8009da4 <xPortStartScheduler+0x124>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10a      	bne.n	8009ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ca6:	4b3e      	ldr	r3, [pc, #248]	; (8009da0 <xPortStartScheduler+0x120>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a3f      	ldr	r2, [pc, #252]	; (8009da8 <xPortStartScheduler+0x128>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10a      	bne.n	8009cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	60fb      	str	r3, [r7, #12]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cc6:	4b39      	ldr	r3, [pc, #228]	; (8009dac <xPortStartScheduler+0x12c>)
 8009cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4b31      	ldr	r3, [pc, #196]	; (8009db0 <xPortStartScheduler+0x130>)
 8009cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cee:	4b31      	ldr	r3, [pc, #196]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf4:	e009      	b.n	8009d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009cf6:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4a2d      	ldr	r2, [pc, #180]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d12:	2b80      	cmp	r3, #128	; 0x80
 8009d14:	d0ef      	beq.n	8009cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d16:	4b27      	ldr	r3, [pc, #156]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f1c3 0307 	rsb	r3, r3, #7
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d00a      	beq.n	8009d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	60bb      	str	r3, [r7, #8]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d38:	4b1e      	ldr	r3, [pc, #120]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d4a:	4a1a      	ldr	r2, [pc, #104]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d56:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d62:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a14      	ldr	r2, [pc, #80]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d6e:	f000 f8dd 	bl	8009f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <xPortStartScheduler+0x13c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d78:	f000 f8fc 	bl	8009f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <xPortStartScheduler+0x140>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a0f      	ldr	r2, [pc, #60]	; (8009dc0 <xPortStartScheduler+0x140>)
 8009d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d88:	f7ff ff66 	bl	8009c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d8c:	f7ff f848 	bl	8008e20 <vTaskSwitchContext>
	prvTaskExitError();
 8009d90:	f7ff ff1e 	bl	8009bd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	e000ed00 	.word	0xe000ed00
 8009da4:	410fc271 	.word	0x410fc271
 8009da8:	410fc270 	.word	0x410fc270
 8009dac:	e000e400 	.word	0xe000e400
 8009db0:	20000fb0 	.word	0x20000fb0
 8009db4:	20000fb4 	.word	0x20000fb4
 8009db8:	e000ed20 	.word	0xe000ed20
 8009dbc:	2000011c 	.word	0x2000011c
 8009dc0:	e000ef34 	.word	0xe000ef34

08009dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	607b      	str	r3, [r7, #4]
}
 8009ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dde:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <vPortEnterCritical+0x58>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	4a0d      	ldr	r2, [pc, #52]	; (8009e1c <vPortEnterCritical+0x58>)
 8009de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <vPortEnterCritical+0x58>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d10f      	bne.n	8009e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortEnterCritical+0x5c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <vPortEnterCritical+0x4a>
	}
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	2000011c 	.word	0x2000011c
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e2a:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <vPortExitCritical+0x50>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <vPortExitCritical+0x24>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	607b      	str	r3, [r7, #4]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <vPortExitCritical+0x50>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <vPortExitCritical+0x50>)
 8009e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <vPortExitCritical+0x42>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	f383 8811 	msr	BASEPRI, r3
}
 8009e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	2000011c 	.word	0x2000011c
	...

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f01e 0f10 	tst.w	lr, #16
 8009e90:	bf08      	it	eq
 8009e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ea4:	f380 8811 	msr	BASEPRI, r0
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f7fe ffb6 	bl	8008e20 <vTaskSwitchContext>
 8009eb4:	f04f 0000 	mov.w	r0, #0
 8009eb8:	f380 8811 	msr	BASEPRI, r0
 8009ebc:	bc09      	pop	{r0, r3}
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f01e 0f10 	tst.w	lr, #16
 8009eca:	bf08      	it	eq
 8009ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ed0:	f380 8809 	msr	PSP, r0
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst>:
 8009ee0:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f02:	f7fe fed3 	bl	8008cac <xTaskIncrementTick>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <xPortSysTickHandler+0x40>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <vPortSetupTimerInterrupt+0x38>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <vPortSetupTimerInterrupt+0x3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <vPortSetupTimerInterrupt+0x40>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <vPortSetupTimerInterrupt+0x44>)
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f4e:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010
 8009f64:	e000e018 	.word	0xe000e018
 8009f68:	20000000 	.word	0x20000000
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f84 <vPortEnableVFP+0x10>
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f7e:	6001      	str	r1, [r0, #0]
 8009f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e000ed88 	.word	0xe000ed88

08009f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d914      	bls.n	8009fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f9a:	4a17      	ldr	r2, [pc, #92]	; (8009ff8 <vPortValidateInterruptPriority+0x70>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fa4:	4b15      	ldr	r3, [pc, #84]	; (8009ffc <vPortValidateInterruptPriority+0x74>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20a      	bcs.n	8009fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <vPortValidateInterruptPriority+0x78>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fcc:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <vPortValidateInterruptPriority+0x7c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d90a      	bls.n	8009fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	603b      	str	r3, [r7, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <vPortValidateInterruptPriority+0x60>
	}
 8009fea:	bf00      	nop
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	e000e3f0 	.word	0xe000e3f0
 8009ffc:	20000fb0 	.word	0x20000fb0
 800a000:	e000ed0c 	.word	0xe000ed0c
 800a004:	20000fb4 	.word	0x20000fb4

0800a008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b08a      	sub	sp, #40	; 0x28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a014:	f7fe fd8e 	bl	8008b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a018:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <pvPortMalloc+0x180>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a020:	f000 f920 	bl	800a264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a024:	4b59      	ldr	r3, [pc, #356]	; (800a18c <pvPortMalloc+0x184>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4013      	ands	r3, r2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 8093 	bne.w	800a158 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d01d      	beq.n	800a074 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a038:	2208      	movs	r2, #8
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4413      	add	r3, r2
 800a03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	2b00      	cmp	r3, #0
 800a048:	d014      	beq.n	800a074 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f023 0307 	bic.w	r3, r3, #7
 800a050:	3308      	adds	r3, #8
 800a052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00a      	beq.n	800a074 <pvPortMalloc+0x6c>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	617b      	str	r3, [r7, #20]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d06e      	beq.n	800a158 <pvPortMalloc+0x150>
 800a07a:	4b45      	ldr	r3, [pc, #276]	; (800a190 <pvPortMalloc+0x188>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d869      	bhi.n	800a158 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a084:	4b43      	ldr	r3, [pc, #268]	; (800a194 <pvPortMalloc+0x18c>)
 800a086:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a088:	4b42      	ldr	r3, [pc, #264]	; (800a194 <pvPortMalloc+0x18c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a08e:	e004      	b.n	800a09a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d903      	bls.n	800a0ac <pvPortMalloc+0xa4>
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1f1      	bne.n	800a090 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0ac:	4b36      	ldr	r3, [pc, #216]	; (800a188 <pvPortMalloc+0x180>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d050      	beq.n	800a158 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2208      	movs	r2, #8
 800a0bc:	4413      	add	r3, r2
 800a0be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	1ad2      	subs	r2, r2, r3
 800a0d0:	2308      	movs	r3, #8
 800a0d2:	005b      	lsls	r3, r3, #1
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d91f      	bls.n	800a118 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	f003 0307 	and.w	r3, r3, #7
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <pvPortMalloc+0xf8>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	613b      	str	r3, [r7, #16]
}
 800a0fc:	bf00      	nop
 800a0fe:	e7fe      	b.n	800a0fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a112:	69b8      	ldr	r0, [r7, #24]
 800a114:	f000 f908 	bl	800a328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a118:	4b1d      	ldr	r3, [pc, #116]	; (800a190 <pvPortMalloc+0x188>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	4a1b      	ldr	r2, [pc, #108]	; (800a190 <pvPortMalloc+0x188>)
 800a124:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a126:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <pvPortMalloc+0x188>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <pvPortMalloc+0x190>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d203      	bcs.n	800a13a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a132:	4b17      	ldr	r3, [pc, #92]	; (800a190 <pvPortMalloc+0x188>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a18      	ldr	r2, [pc, #96]	; (800a198 <pvPortMalloc+0x190>)
 800a138:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <pvPortMalloc+0x184>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	431a      	orrs	r2, r3
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <pvPortMalloc+0x194>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	4a11      	ldr	r2, [pc, #68]	; (800a19c <pvPortMalloc+0x194>)
 800a156:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a158:	f7fe fcfa 	bl	8008b50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <pvPortMalloc+0x174>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <pvPortMalloc+0x172>
	return pvReturn;
 800a17c:	69fb      	ldr	r3, [r7, #28]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3728      	adds	r7, #40	; 0x28
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	20004bc0 	.word	0x20004bc0
 800a18c:	20004bd4 	.word	0x20004bd4
 800a190:	20004bc4 	.word	0x20004bc4
 800a194:	20004bb8 	.word	0x20004bb8
 800a198:	20004bc8 	.word	0x20004bc8
 800a19c:	20004bcc 	.word	0x20004bcc

0800a1a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d04d      	beq.n	800a24e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1b2:	2308      	movs	r3, #8
 800a1b4:	425b      	negs	r3, r3
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	685a      	ldr	r2, [r3, #4]
 800a1c4:	4b24      	ldr	r3, [pc, #144]	; (800a258 <vPortFree+0xb8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <vPortFree+0x44>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <vPortFree+0x62>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	60bb      	str	r3, [r7, #8]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	4b14      	ldr	r3, [pc, #80]	; (800a258 <vPortFree+0xb8>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4013      	ands	r3, r2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01e      	beq.n	800a24e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d11a      	bne.n	800a24e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	4b0e      	ldr	r3, [pc, #56]	; (800a258 <vPortFree+0xb8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	43db      	mvns	r3, r3
 800a222:	401a      	ands	r2, r3
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a228:	f7fe fc84 	bl	8008b34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <vPortFree+0xbc>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4413      	add	r3, r2
 800a236:	4a09      	ldr	r2, [pc, #36]	; (800a25c <vPortFree+0xbc>)
 800a238:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a23a:	6938      	ldr	r0, [r7, #16]
 800a23c:	f000 f874 	bl	800a328 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a240:	4b07      	ldr	r3, [pc, #28]	; (800a260 <vPortFree+0xc0>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	4a06      	ldr	r2, [pc, #24]	; (800a260 <vPortFree+0xc0>)
 800a248:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a24a:	f7fe fc81 	bl	8008b50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a24e:	bf00      	nop
 800a250:	3718      	adds	r7, #24
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20004bd4 	.word	0x20004bd4
 800a25c:	20004bc4 	.word	0x20004bc4
 800a260:	20004bd0 	.word	0x20004bd0

0800a264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a26a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a26e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a270:	4b27      	ldr	r3, [pc, #156]	; (800a310 <prvHeapInit+0xac>)
 800a272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3307      	adds	r3, #7
 800a282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	4a1f      	ldr	r2, [pc, #124]	; (800a310 <prvHeapInit+0xac>)
 800a294:	4413      	add	r3, r2
 800a296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a29c:	4a1d      	ldr	r2, [pc, #116]	; (800a314 <prvHeapInit+0xb0>)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <prvHeapInit+0xb0>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f023 0307 	bic.w	r3, r3, #7
 800a2be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4a15      	ldr	r2, [pc, #84]	; (800a318 <prvHeapInit+0xb4>)
 800a2c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2c6:	4b14      	ldr	r3, [pc, #80]	; (800a318 <prvHeapInit+0xb4>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <prvHeapInit+0xb4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2e4:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <prvHeapInit+0xb4>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <prvHeapInit+0xb8>)
 800a2f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	4a09      	ldr	r2, [pc, #36]	; (800a320 <prvHeapInit+0xbc>)
 800a2fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <prvHeapInit+0xc0>)
 800a2fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a302:	601a      	str	r2, [r3, #0]
}
 800a304:	bf00      	nop
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	20000fb8 	.word	0x20000fb8
 800a314:	20004bb8 	.word	0x20004bb8
 800a318:	20004bc0 	.word	0x20004bc0
 800a31c:	20004bc8 	.word	0x20004bc8
 800a320:	20004bc4 	.word	0x20004bc4
 800a324:	20004bd4 	.word	0x20004bd4

0800a328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a330:	4b28      	ldr	r3, [pc, #160]	; (800a3d4 <prvInsertBlockIntoFreeList+0xac>)
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	e002      	b.n	800a33c <prvInsertBlockIntoFreeList+0x14>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	429a      	cmp	r2, r3
 800a344:	d8f7      	bhi.n	800a336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	4413      	add	r3, r2
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d108      	bne.n	800a36a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	441a      	add	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	68ba      	ldr	r2, [r7, #8]
 800a374:	441a      	add	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d118      	bne.n	800a3b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b15      	ldr	r3, [pc, #84]	; (800a3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	429a      	cmp	r2, r3
 800a388:	d00d      	beq.n	800a3a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	441a      	add	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	e008      	b.n	800a3b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3a6:	4b0c      	ldr	r3, [pc, #48]	; (800a3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	e003      	b.n	800a3b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d002      	beq.n	800a3c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	20004bb8 	.word	0x20004bb8
 800a3d8:	20004bc0 	.word	0x20004bc0

0800a3dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4912      	ldr	r1, [pc, #72]	; (800a42c <MX_USB_DEVICE_Init+0x50>)
 800a3e4:	4812      	ldr	r0, [pc, #72]	; (800a430 <MX_USB_DEVICE_Init+0x54>)
 800a3e6:	f7fc f8cf 	bl	8006588 <USBD_Init>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3f0:	f7f6 fb88 	bl	8000b04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3f4:	490f      	ldr	r1, [pc, #60]	; (800a434 <MX_USB_DEVICE_Init+0x58>)
 800a3f6:	480e      	ldr	r0, [pc, #56]	; (800a430 <MX_USB_DEVICE_Init+0x54>)
 800a3f8:	f7fc f8f6 	bl	80065e8 <USBD_RegisterClass>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a402:	f7f6 fb7f 	bl	8000b04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a406:	490c      	ldr	r1, [pc, #48]	; (800a438 <MX_USB_DEVICE_Init+0x5c>)
 800a408:	4809      	ldr	r0, [pc, #36]	; (800a430 <MX_USB_DEVICE_Init+0x54>)
 800a40a:	f7fc f847 	bl	800649c <USBD_CDC_RegisterInterface>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a414:	f7f6 fb76 	bl	8000b04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a418:	4805      	ldr	r0, [pc, #20]	; (800a430 <MX_USB_DEVICE_Init+0x54>)
 800a41a:	f7fc f90c 	bl	8006636 <USBD_Start>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a424:	f7f6 fb6e 	bl	8000b04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a428:	bf00      	nop
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000134 	.word	0x20000134
 800a430:	20004f48 	.word	0x20004f48
 800a434:	20000018 	.word	0x20000018
 800a438:	20000120 	.word	0x20000120

0800a43c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a440:	2200      	movs	r2, #0
 800a442:	4905      	ldr	r1, [pc, #20]	; (800a458 <CDC_Init_FS+0x1c>)
 800a444:	4805      	ldr	r0, [pc, #20]	; (800a45c <CDC_Init_FS+0x20>)
 800a446:	f7fc f83e 	bl	80064c6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a44a:	4905      	ldr	r1, [pc, #20]	; (800a460 <CDC_Init_FS+0x24>)
 800a44c:	4803      	ldr	r0, [pc, #12]	; (800a45c <CDC_Init_FS+0x20>)
 800a44e:	f7fc f858 	bl	8006502 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a452:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a454:	4618      	mov	r0, r3
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20005a18 	.word	0x20005a18
 800a45c:	20004f48 	.word	0x20004f48
 800a460:	20005218 	.word	0x20005218

0800a464 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a468:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	6039      	str	r1, [r7, #0]
 800a47e:	71fb      	strb	r3, [r7, #7]
 800a480:	4613      	mov	r3, r2
 800a482:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	2b23      	cmp	r3, #35	; 0x23
 800a488:	d84a      	bhi.n	800a520 <CDC_Control_FS+0xac>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <CDC_Control_FS+0x1c>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a521 	.word	0x0800a521
 800a494:	0800a521 	.word	0x0800a521
 800a498:	0800a521 	.word	0x0800a521
 800a49c:	0800a521 	.word	0x0800a521
 800a4a0:	0800a521 	.word	0x0800a521
 800a4a4:	0800a521 	.word	0x0800a521
 800a4a8:	0800a521 	.word	0x0800a521
 800a4ac:	0800a521 	.word	0x0800a521
 800a4b0:	0800a521 	.word	0x0800a521
 800a4b4:	0800a521 	.word	0x0800a521
 800a4b8:	0800a521 	.word	0x0800a521
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a521 	.word	0x0800a521
 800a4c4:	0800a521 	.word	0x0800a521
 800a4c8:	0800a521 	.word	0x0800a521
 800a4cc:	0800a521 	.word	0x0800a521
 800a4d0:	0800a521 	.word	0x0800a521
 800a4d4:	0800a521 	.word	0x0800a521
 800a4d8:	0800a521 	.word	0x0800a521
 800a4dc:	0800a521 	.word	0x0800a521
 800a4e0:	0800a521 	.word	0x0800a521
 800a4e4:	0800a521 	.word	0x0800a521
 800a4e8:	0800a521 	.word	0x0800a521
 800a4ec:	0800a521 	.word	0x0800a521
 800a4f0:	0800a521 	.word	0x0800a521
 800a4f4:	0800a521 	.word	0x0800a521
 800a4f8:	0800a521 	.word	0x0800a521
 800a4fc:	0800a521 	.word	0x0800a521
 800a500:	0800a521 	.word	0x0800a521
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a521 	.word	0x0800a521
 800a50c:	0800a521 	.word	0x0800a521
 800a510:	0800a521 	.word	0x0800a521
 800a514:	0800a521 	.word	0x0800a521
 800a518:	0800a521 	.word	0x0800a521
 800a51c:	0800a521 	.word	0x0800a521
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a520:	bf00      	nop
  }

  return (USBD_OK);
 800a522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	4805      	ldr	r0, [pc, #20]	; (800a554 <CDC_Receive_FS+0x24>)
 800a53e:	f7fb ffe0 	bl	8006502 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a542:	4804      	ldr	r0, [pc, #16]	; (800a554 <CDC_Receive_FS+0x24>)
 800a544:	f7fb fff6 	bl	8006534 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a548:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20004f48 	.word	0x20004f48

0800a558 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a558:	b480      	push	{r7}
 800a55a:	b087      	sub	sp, #28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	4613      	mov	r3, r2
 800a564:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a56a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
	...

0800a57c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2212      	movs	r2, #18
 800a58c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a58e:	4b03      	ldr	r3, [pc, #12]	; (800a59c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr
 800a59c:	20000150 	.word	0x20000150

0800a5a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20000164 	.word	0x20000164

0800a5c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5d0:	79fb      	ldrb	r3, [r7, #7]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d105      	bne.n	800a5e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4907      	ldr	r1, [pc, #28]	; (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5da:	4808      	ldr	r0, [pc, #32]	; (800a5fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5dc:	f7fd f85d 	bl	800769a <USBD_GetString>
 800a5e0:	e004      	b.n	800a5ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	4904      	ldr	r1, [pc, #16]	; (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5e6:	4805      	ldr	r0, [pc, #20]	; (800a5fc <USBD_FS_ProductStrDescriptor+0x38>)
 800a5e8:	f7fd f857 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5ec:	4b02      	ldr	r3, [pc, #8]	; (800a5f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20006218 	.word	0x20006218
 800a5fc:	0800aff8 	.word	0x0800aff8

0800a600 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	6039      	str	r1, [r7, #0]
 800a60a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	4904      	ldr	r1, [pc, #16]	; (800a620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a612:	f7fd f842 	bl	800769a <USBD_GetString>
  return USBD_StrDesc;
 800a616:	4b02      	ldr	r3, [pc, #8]	; (800a620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	20006218 	.word	0x20006218
 800a624:	0800b010 	.word	0x0800b010

0800a628 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	221a      	movs	r2, #26
 800a638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a63a:	f000 f843 	bl	800a6c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a63e:	4b02      	ldr	r3, [pc, #8]	; (800a648 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000168 	.word	0x20000168

0800a64c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	4603      	mov	r3, r0
 800a654:	6039      	str	r1, [r7, #0]
 800a656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d105      	bne.n	800a66a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	4907      	ldr	r1, [pc, #28]	; (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a662:	4808      	ldr	r0, [pc, #32]	; (800a684 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a664:	f7fd f819 	bl	800769a <USBD_GetString>
 800a668:	e004      	b.n	800a674 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	4904      	ldr	r1, [pc, #16]	; (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a66e:	4805      	ldr	r0, [pc, #20]	; (800a684 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a670:	f7fd f813 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a674:	4b02      	ldr	r3, [pc, #8]	; (800a680 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20006218 	.word	0x20006218
 800a684:	0800b024 	.word	0x0800b024

0800a688 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	4603      	mov	r3, r0
 800a690:	6039      	str	r1, [r7, #0]
 800a692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d105      	bne.n	800a6a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	4907      	ldr	r1, [pc, #28]	; (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a69e:	4808      	ldr	r0, [pc, #32]	; (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6a0:	f7fc fffb 	bl	800769a <USBD_GetString>
 800a6a4:	e004      	b.n	800a6b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	4904      	ldr	r1, [pc, #16]	; (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a6aa:	4805      	ldr	r0, [pc, #20]	; (800a6c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a6ac:	f7fc fff5 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6b0:	4b02      	ldr	r3, [pc, #8]	; (800a6bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20006218 	.word	0x20006218
 800a6c0:	0800b030 	.word	0x0800b030

0800a6c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <Get_SerialNum+0x44>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6d0:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <Get_SerialNum+0x48>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6d6:	4b0e      	ldr	r3, [pc, #56]	; (800a710 <Get_SerialNum+0x4c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6ea:	2208      	movs	r2, #8
 800a6ec:	4909      	ldr	r1, [pc, #36]	; (800a714 <Get_SerialNum+0x50>)
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f814 	bl	800a71c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6f4:	2204      	movs	r2, #4
 800a6f6:	4908      	ldr	r1, [pc, #32]	; (800a718 <Get_SerialNum+0x54>)
 800a6f8:	68b8      	ldr	r0, [r7, #8]
 800a6fa:	f000 f80f 	bl	800a71c <IntToUnicode>
  }
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	1fff7a10 	.word	0x1fff7a10
 800a70c:	1fff7a14 	.word	0x1fff7a14
 800a710:	1fff7a18 	.word	0x1fff7a18
 800a714:	2000016a 	.word	0x2000016a
 800a718:	2000017a 	.word	0x2000017a

0800a71c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
 800a732:	e027      	b.n	800a784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	0f1b      	lsrs	r3, r3, #28
 800a738:	2b09      	cmp	r3, #9
 800a73a:	d80b      	bhi.n	800a754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	0f1b      	lsrs	r3, r3, #28
 800a740:	b2da      	uxtb	r2, r3
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4619      	mov	r1, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	440b      	add	r3, r1
 800a74c:	3230      	adds	r2, #48	; 0x30
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	e00a      	b.n	800a76a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	0f1b      	lsrs	r3, r3, #28
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	440b      	add	r3, r1
 800a764:	3237      	adds	r2, #55	; 0x37
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	3301      	adds	r3, #1
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	4413      	add	r3, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a77e:	7dfb      	ldrb	r3, [r7, #23]
 800a780:	3301      	adds	r3, #1
 800a782:	75fb      	strb	r3, [r7, #23]
 800a784:	7dfa      	ldrb	r2, [r7, #23]
 800a786:	79fb      	ldrb	r3, [r7, #7]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d3d3      	bcc.n	800a734 <IntToUnicode+0x18>
  }
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b08a      	sub	sp, #40	; 0x28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7a4:	f107 0314 	add.w	r3, r7, #20
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	605a      	str	r2, [r3, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
 800a7b0:	60da      	str	r2, [r3, #12]
 800a7b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7bc:	d13a      	bne.n	800a834 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7be:	2300      	movs	r3, #0
 800a7c0:	613b      	str	r3, [r7, #16]
 800a7c2:	4b1e      	ldr	r3, [pc, #120]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c6:	4a1d      	ldr	r2, [pc, #116]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a7c8:	f043 0301 	orr.w	r3, r3, #1
 800a7cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a7ce:	4b1b      	ldr	r3, [pc, #108]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a7da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a7de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7ec:	230a      	movs	r3, #10
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7f0:	f107 0314 	add.w	r3, r7, #20
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4812      	ldr	r0, [pc, #72]	; (800a840 <HAL_PCD_MspInit+0xa4>)
 800a7f8:	f7f6 fc4c 	bl	8001094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7fc:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a800:	4a0e      	ldr	r2, [pc, #56]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a806:	6353      	str	r3, [r2, #52]	; 0x34
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a810:	4a0a      	ldr	r2, [pc, #40]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a816:	6453      	str	r3, [r2, #68]	; 0x44
 800a818:	4b08      	ldr	r3, [pc, #32]	; (800a83c <HAL_PCD_MspInit+0xa0>)
 800a81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a824:	2200      	movs	r2, #0
 800a826:	2105      	movs	r1, #5
 800a828:	2043      	movs	r0, #67	; 0x43
 800a82a:	f7f6 fc09 	bl	8001040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a82e:	2043      	movs	r0, #67	; 0x43
 800a830:	f7f6 fc22 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a834:	bf00      	nop
 800a836:	3728      	adds	r7, #40	; 0x28
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	40023800 	.word	0x40023800
 800a840:	40020000 	.word	0x40020000

0800a844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7fb ff36 	bl	80066cc <USBD_LL_SetupStage>
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	6879      	ldr	r1, [r7, #4]
 800a87e:	4613      	mov	r3, r2
 800a880:	00db      	lsls	r3, r3, #3
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	440b      	add	r3, r1
 800a888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	78fb      	ldrb	r3, [r7, #3]
 800a890:	4619      	mov	r1, r3
 800a892:	f7fb ff70 	bl	8006776 <USBD_LL_DataOutStage>
}
 800a896:	bf00      	nop
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	3348      	adds	r3, #72	; 0x48
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7fb ffb9 	bl	800683c <USBD_LL_DataInStage>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fc f8cd 	bl	8006a80 <USBD_LL_SOF>
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b084      	sub	sp, #16
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d001      	beq.n	800a906 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a902:	f7f6 f8ff 	bl	8000b04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a90c:	7bfa      	ldrb	r2, [r7, #15]
 800a90e:	4611      	mov	r1, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7fc f877 	bl	8006a04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fc f823 	bl	8006968 <USBD_LL_Reset>
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fc f872 	bl	8006a24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a952:	f043 0301 	orr.w	r3, r3, #1
 800a956:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a1b      	ldr	r3, [r3, #32]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a960:	4b04      	ldr	r3, [pc, #16]	; (800a974 <HAL_PCD_SuspendCallback+0x48>)
 800a962:	691b      	ldr	r3, [r3, #16]
 800a964:	4a03      	ldr	r2, [pc, #12]	; (800a974 <HAL_PCD_SuspendCallback+0x48>)
 800a966:	f043 0306 	orr.w	r3, r3, #6
 800a96a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	e000ed00 	.word	0xe000ed00

0800a978 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc f862 	bl	8006a50 <USBD_LL_Resume>
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9a6:	78fa      	ldrb	r2, [r7, #3]
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fc f8b0 	bl	8006b10 <USBD_LL_IsoOUTIncomplete>
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7fc f878 	bl	8006ac4 <USBD_LL_IsoINIncomplete>
}
 800a9d4:	bf00      	nop
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fc f8b6 	bl	8006b5c <USBD_LL_DevConnected>
}
 800a9f0:	bf00      	nop
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fc f8b3 	bl	8006b72 <USBD_LL_DevDisconnected>
}
 800aa0c:	bf00      	nop
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d13c      	bne.n	800aa9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa24:	4a20      	ldr	r2, [pc, #128]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a1e      	ldr	r2, [pc, #120]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa34:	4b1c      	ldr	r3, [pc, #112]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aa3c:	4b1a      	ldr	r3, [pc, #104]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa3e:	2204      	movs	r2, #4
 800aa40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa42:	4b19      	ldr	r3, [pc, #100]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa44:	2202      	movs	r2, #2
 800aa46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa48:	4b17      	ldr	r3, [pc, #92]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa4e:	4b16      	ldr	r3, [pc, #88]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa50:	2202      	movs	r2, #2
 800aa52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa54:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa5a:	4b13      	ldr	r3, [pc, #76]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aa60:	4b11      	ldr	r3, [pc, #68]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800aa66:	4b10      	ldr	r3, [pc, #64]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa6c:	4b0e      	ldr	r3, [pc, #56]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa72:	480d      	ldr	r0, [pc, #52]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa74:	f7f7 fc85 	bl	8002382 <HAL_PCD_Init>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aa7e:	f7f6 f841 	bl	8000b04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa82:	2180      	movs	r1, #128	; 0x80
 800aa84:	4808      	ldr	r0, [pc, #32]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa86:	f7f8 fde2 	bl	800364e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa8a:	2240      	movs	r2, #64	; 0x40
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	4806      	ldr	r0, [pc, #24]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa90:	f7f8 fd96 	bl	80035c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa94:	2280      	movs	r2, #128	; 0x80
 800aa96:	2101      	movs	r1, #1
 800aa98:	4803      	ldr	r0, [pc, #12]	; (800aaa8 <USBD_LL_Init+0x94>)
 800aa9a:	f7f8 fd91 	bl	80035c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	20006418 	.word	0x20006418

0800aaac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7f7 fd7a 	bl	80025bc <HAL_PCD_Start>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aacc:	7bfb      	ldrb	r3, [r7, #15]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 f942 	bl	800ad58 <USBD_Get_USB_Status>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	461a      	mov	r2, r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	70fb      	strb	r3, [r7, #3]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70bb      	strb	r3, [r7, #2]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab0a:	78bb      	ldrb	r3, [r7, #2]
 800ab0c:	883a      	ldrh	r2, [r7, #0]
 800ab0e:	78f9      	ldrb	r1, [r7, #3]
 800ab10:	f7f8 f95e 	bl	8002dd0 <HAL_PCD_EP_Open>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f91c 	bl	800ad58 <USBD_Get_USB_Status>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab48:	78fa      	ldrb	r2, [r7, #3]
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f8 f9a7 	bl	8002ea0 <HAL_PCD_EP_Close>
 800ab52:	4603      	mov	r3, r0
 800ab54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f000 f8fd 	bl	800ad58 <USBD_Get_USB_Status>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab86:	78fa      	ldrb	r2, [r7, #3]
 800ab88:	4611      	mov	r1, r2
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7f8 fa7f 	bl	800308e <HAL_PCD_EP_SetStall>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 f8de 	bl	800ad58 <USBD_Get_USB_Status>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	460b      	mov	r3, r1
 800abb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abc4:	78fa      	ldrb	r2, [r7, #3]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f8 fac4 	bl	8003156 <HAL_PCD_EP_ClrStall>
 800abce:	4603      	mov	r3, r0
 800abd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 f8bf 	bl	800ad58 <USBD_Get_USB_Status>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abde:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	da0b      	bge.n	800ac1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac0a:	68f9      	ldr	r1, [r7, #12]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	1a9b      	subs	r3, r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	333e      	adds	r3, #62	; 0x3e
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	e00b      	b.n	800ac34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac22:	68f9      	ldr	r1, [r7, #12]
 800ac24:	4613      	mov	r3, r2
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f8 f891 	bl	8002d86 <HAL_PCD_SetAddress>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f874 	bl	800ad58 <USBD_Get_USB_Status>
 800ac70:	4603      	mov	r3, r0
 800ac72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b086      	sub	sp, #24
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ac9c:	7af9      	ldrb	r1, [r7, #11]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	f7f8 f9aa 	bl	8002ffa <HAL_PCD_EP_Transmit>
 800aca6:	4603      	mov	r3, r0
 800aca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acaa:	7dfb      	ldrb	r3, [r7, #23]
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f853 	bl	800ad58 <USBD_Get_USB_Status>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acb6:	7dbb      	ldrb	r3, [r7, #22]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	607a      	str	r2, [r7, #4]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	460b      	mov	r3, r1
 800acce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800acde:	7af9      	ldrb	r1, [r7, #11]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	f7f8 f926 	bl	8002f34 <HAL_PCD_EP_Receive>
 800ace8:	4603      	mov	r3, r0
 800acea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 f832 	bl	800ad58 <USBD_Get_USB_Status>
 800acf4:	4603      	mov	r3, r0
 800acf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad14:	78fa      	ldrb	r2, [r7, #3]
 800ad16:	4611      	mov	r1, r2
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f8 f956 	bl	8002fca <HAL_PCD_EP_GetRxCount>
 800ad1e:	4603      	mov	r3, r0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad30:	4b03      	ldr	r3, [pc, #12]	; (800ad40 <USBD_static_malloc+0x18>)
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20004bd8 	.word	0x20004bd8

0800ad44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]

}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	2b03      	cmp	r3, #3
 800ad6a:	d817      	bhi.n	800ad9c <USBD_Get_USB_Status+0x44>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <USBD_Get_USB_Status+0x1c>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad85 	.word	0x0800ad85
 800ad78:	0800ad8b 	.word	0x0800ad8b
 800ad7c:	0800ad91 	.word	0x0800ad91
 800ad80:	0800ad97 	.word	0x0800ad97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73fb      	strb	r3, [r7, #15]
    break;
 800ad88:	e00b      	b.n	800ada2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad8e:	e008      	b.n	800ada2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad90:	2301      	movs	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
    break;
 800ad94:	e005      	b.n	800ada2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad96:	2303      	movs	r3, #3
 800ad98:	73fb      	strb	r3, [r7, #15]
    break;
 800ad9a:	e002      	b.n	800ada2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	73fb      	strb	r3, [r7, #15]
    break;
 800ada0:	bf00      	nop
  }
  return usb_status;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <__libc_init_array>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4d0d      	ldr	r5, [pc, #52]	; (800ade8 <__libc_init_array+0x38>)
 800adb4:	4c0d      	ldr	r4, [pc, #52]	; (800adec <__libc_init_array+0x3c>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	2600      	movs	r6, #0
 800adbc:	42a6      	cmp	r6, r4
 800adbe:	d109      	bne.n	800add4 <__libc_init_array+0x24>
 800adc0:	4d0b      	ldr	r5, [pc, #44]	; (800adf0 <__libc_init_array+0x40>)
 800adc2:	4c0c      	ldr	r4, [pc, #48]	; (800adf4 <__libc_init_array+0x44>)
 800adc4:	f000 f8f6 	bl	800afb4 <_init>
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	2600      	movs	r6, #0
 800adce:	42a6      	cmp	r6, r4
 800add0:	d105      	bne.n	800adde <__libc_init_array+0x2e>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	f855 3b04 	ldr.w	r3, [r5], #4
 800add8:	4798      	blx	r3
 800adda:	3601      	adds	r6, #1
 800addc:	e7ee      	b.n	800adbc <__libc_init_array+0xc>
 800adde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade2:	4798      	blx	r3
 800ade4:	3601      	adds	r6, #1
 800ade6:	e7f2      	b.n	800adce <__libc_init_array+0x1e>
 800ade8:	0800b108 	.word	0x0800b108
 800adec:	0800b108 	.word	0x0800b108
 800adf0:	0800b108 	.word	0x0800b108
 800adf4:	0800b10c 	.word	0x0800b10c

0800adf8 <__retarget_lock_acquire_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_release_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <memcpy>:
 800adfc:	440a      	add	r2, r1
 800adfe:	4291      	cmp	r1, r2
 800ae00:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae04:	d100      	bne.n	800ae08 <memcpy+0xc>
 800ae06:	4770      	bx	lr
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae12:	4291      	cmp	r1, r2
 800ae14:	d1f9      	bne.n	800ae0a <memcpy+0xe>
 800ae16:	bd10      	pop	{r4, pc}

0800ae18 <memset>:
 800ae18:	4402      	add	r2, r0
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d100      	bne.n	800ae22 <memset+0xa>
 800ae20:	4770      	bx	lr
 800ae22:	f803 1b01 	strb.w	r1, [r3], #1
 800ae26:	e7f9      	b.n	800ae1c <memset+0x4>

0800ae28 <cleanup_glue>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	6809      	ldr	r1, [r1, #0]
 800ae2e:	4605      	mov	r5, r0
 800ae30:	b109      	cbz	r1, 800ae36 <cleanup_glue+0xe>
 800ae32:	f7ff fff9 	bl	800ae28 <cleanup_glue>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae3e:	f000 b869 	b.w	800af14 <_free_r>
	...

0800ae44 <_reclaim_reent>:
 800ae44:	4b2c      	ldr	r3, [pc, #176]	; (800aef8 <_reclaim_reent+0xb4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4283      	cmp	r3, r0
 800ae4a:	b570      	push	{r4, r5, r6, lr}
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	d051      	beq.n	800aef4 <_reclaim_reent+0xb0>
 800ae50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ae52:	b143      	cbz	r3, 800ae66 <_reclaim_reent+0x22>
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d14a      	bne.n	800aef0 <_reclaim_reent+0xac>
 800ae5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae5c:	6819      	ldr	r1, [r3, #0]
 800ae5e:	b111      	cbz	r1, 800ae66 <_reclaim_reent+0x22>
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 f857 	bl	800af14 <_free_r>
 800ae66:	6961      	ldr	r1, [r4, #20]
 800ae68:	b111      	cbz	r1, 800ae70 <_reclaim_reent+0x2c>
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f852 	bl	800af14 <_free_r>
 800ae70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae72:	b111      	cbz	r1, 800ae7a <_reclaim_reent+0x36>
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 f84d 	bl	800af14 <_free_r>
 800ae7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae7c:	b111      	cbz	r1, 800ae84 <_reclaim_reent+0x40>
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 f848 	bl	800af14 <_free_r>
 800ae84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ae86:	b111      	cbz	r1, 800ae8e <_reclaim_reent+0x4a>
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f000 f843 	bl	800af14 <_free_r>
 800ae8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ae90:	b111      	cbz	r1, 800ae98 <_reclaim_reent+0x54>
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f83e 	bl	800af14 <_free_r>
 800ae98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae9a:	b111      	cbz	r1, 800aea2 <_reclaim_reent+0x5e>
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 f839 	bl	800af14 <_free_r>
 800aea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aea4:	b111      	cbz	r1, 800aeac <_reclaim_reent+0x68>
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 f834 	bl	800af14 <_free_r>
 800aeac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeae:	b111      	cbz	r1, 800aeb6 <_reclaim_reent+0x72>
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 f82f 	bl	800af14 <_free_r>
 800aeb6:	69a3      	ldr	r3, [r4, #24]
 800aeb8:	b1e3      	cbz	r3, 800aef4 <_reclaim_reent+0xb0>
 800aeba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aebc:	4620      	mov	r0, r4
 800aebe:	4798      	blx	r3
 800aec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aec2:	b1b9      	cbz	r1, 800aef4 <_reclaim_reent+0xb0>
 800aec4:	4620      	mov	r0, r4
 800aec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aeca:	f7ff bfad 	b.w	800ae28 <cleanup_glue>
 800aece:	5949      	ldr	r1, [r1, r5]
 800aed0:	b941      	cbnz	r1, 800aee4 <_reclaim_reent+0xa0>
 800aed2:	3504      	adds	r5, #4
 800aed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed6:	2d80      	cmp	r5, #128	; 0x80
 800aed8:	68d9      	ldr	r1, [r3, #12]
 800aeda:	d1f8      	bne.n	800aece <_reclaim_reent+0x8a>
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f819 	bl	800af14 <_free_r>
 800aee2:	e7ba      	b.n	800ae5a <_reclaim_reent+0x16>
 800aee4:	680e      	ldr	r6, [r1, #0]
 800aee6:	4620      	mov	r0, r4
 800aee8:	f000 f814 	bl	800af14 <_free_r>
 800aeec:	4631      	mov	r1, r6
 800aeee:	e7ef      	b.n	800aed0 <_reclaim_reent+0x8c>
 800aef0:	2500      	movs	r5, #0
 800aef2:	e7ef      	b.n	800aed4 <_reclaim_reent+0x90>
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	bf00      	nop
 800aef8:	20000184 	.word	0x20000184

0800aefc <__malloc_lock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__malloc_lock+0x8>)
 800aefe:	f7ff bf7b 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800af02:	bf00      	nop
 800af04:	20006824 	.word	0x20006824

0800af08 <__malloc_unlock>:
 800af08:	4801      	ldr	r0, [pc, #4]	; (800af10 <__malloc_unlock+0x8>)
 800af0a:	f7ff bf76 	b.w	800adfa <__retarget_lock_release_recursive>
 800af0e:	bf00      	nop
 800af10:	20006824 	.word	0x20006824

0800af14 <_free_r>:
 800af14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af16:	2900      	cmp	r1, #0
 800af18:	d048      	beq.n	800afac <_free_r+0x98>
 800af1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1e:	9001      	str	r0, [sp, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f1a1 0404 	sub.w	r4, r1, #4
 800af26:	bfb8      	it	lt
 800af28:	18e4      	addlt	r4, r4, r3
 800af2a:	f7ff ffe7 	bl	800aefc <__malloc_lock>
 800af2e:	4a20      	ldr	r2, [pc, #128]	; (800afb0 <_free_r+0x9c>)
 800af30:	9801      	ldr	r0, [sp, #4]
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	4615      	mov	r5, r2
 800af36:	b933      	cbnz	r3, 800af46 <_free_r+0x32>
 800af38:	6063      	str	r3, [r4, #4]
 800af3a:	6014      	str	r4, [r2, #0]
 800af3c:	b003      	add	sp, #12
 800af3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af42:	f7ff bfe1 	b.w	800af08 <__malloc_unlock>
 800af46:	42a3      	cmp	r3, r4
 800af48:	d90b      	bls.n	800af62 <_free_r+0x4e>
 800af4a:	6821      	ldr	r1, [r4, #0]
 800af4c:	1862      	adds	r2, r4, r1
 800af4e:	4293      	cmp	r3, r2
 800af50:	bf04      	itt	eq
 800af52:	681a      	ldreq	r2, [r3, #0]
 800af54:	685b      	ldreq	r3, [r3, #4]
 800af56:	6063      	str	r3, [r4, #4]
 800af58:	bf04      	itt	eq
 800af5a:	1852      	addeq	r2, r2, r1
 800af5c:	6022      	streq	r2, [r4, #0]
 800af5e:	602c      	str	r4, [r5, #0]
 800af60:	e7ec      	b.n	800af3c <_free_r+0x28>
 800af62:	461a      	mov	r2, r3
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	b10b      	cbz	r3, 800af6c <_free_r+0x58>
 800af68:	42a3      	cmp	r3, r4
 800af6a:	d9fa      	bls.n	800af62 <_free_r+0x4e>
 800af6c:	6811      	ldr	r1, [r2, #0]
 800af6e:	1855      	adds	r5, r2, r1
 800af70:	42a5      	cmp	r5, r4
 800af72:	d10b      	bne.n	800af8c <_free_r+0x78>
 800af74:	6824      	ldr	r4, [r4, #0]
 800af76:	4421      	add	r1, r4
 800af78:	1854      	adds	r4, r2, r1
 800af7a:	42a3      	cmp	r3, r4
 800af7c:	6011      	str	r1, [r2, #0]
 800af7e:	d1dd      	bne.n	800af3c <_free_r+0x28>
 800af80:	681c      	ldr	r4, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	6053      	str	r3, [r2, #4]
 800af86:	4421      	add	r1, r4
 800af88:	6011      	str	r1, [r2, #0]
 800af8a:	e7d7      	b.n	800af3c <_free_r+0x28>
 800af8c:	d902      	bls.n	800af94 <_free_r+0x80>
 800af8e:	230c      	movs	r3, #12
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	e7d3      	b.n	800af3c <_free_r+0x28>
 800af94:	6825      	ldr	r5, [r4, #0]
 800af96:	1961      	adds	r1, r4, r5
 800af98:	428b      	cmp	r3, r1
 800af9a:	bf04      	itt	eq
 800af9c:	6819      	ldreq	r1, [r3, #0]
 800af9e:	685b      	ldreq	r3, [r3, #4]
 800afa0:	6063      	str	r3, [r4, #4]
 800afa2:	bf04      	itt	eq
 800afa4:	1949      	addeq	r1, r1, r5
 800afa6:	6021      	streq	r1, [r4, #0]
 800afa8:	6054      	str	r4, [r2, #4]
 800afaa:	e7c7      	b.n	800af3c <_free_r+0x28>
 800afac:	b003      	add	sp, #12
 800afae:	bd30      	pop	{r4, r5, pc}
 800afb0:	20004df8 	.word	0x20004df8

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
