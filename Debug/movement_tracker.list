
movement_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a69c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800a83c  0800a83c  0001a83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a970  0800a970  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a978  0800a978  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006670  200001e8  0800ab68  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006858  0800ab68  00026858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cdc6  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bf  00000000  00000000  0004cfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  000525a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb0  00000000  00000000  00054410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ab  00000000  00000000  000560c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024427  00000000  00000000  0007196b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f163  00000000  00000000  00095d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134ef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008420  00000000  00000000  00134f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a824 	.word	0x0800a824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a824 	.word	0x0800a824

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <I2C_Start>:
#include "I2C.h"


// START I2C COMMUNICATION
uint8_t I2C_Start(I2C_HandleTypeDef *i2cHandle)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 &= ~I2C_CR1_POS; // clear POS bit
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80004ee:	601a      	str	r2, [r3, #0]

  i2cHandle->Instance->CR1 |= I2C_CR1_ACK; // set ACK bit
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004fe:	601a      	str	r2, [r3, #0]

  i2cHandle->Instance->CR1 |= I2C_CR1_START; // set START bit to generate start condition
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800050e:	601a      	str	r2, [r3, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_SB)); // wait for SB to set
 8000510:	bf00      	nop
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f8      	beq.n	8000512 <I2C_Start+0x3a>

  return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <I2C_Restart>:

// RESTART I2C COMMUNICATION
uint8_t I2C_Restart(I2C_HandleTypeDef *i2cHandle)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 |= I2C_CR1_START; // set START bit to generate start condition
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000544:	601a      	str	r2, [r3, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_SB)); // wait for SB to set
 8000546:	bf00      	nop
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f8      	beq.n	8000548 <I2C_Restart+0x1a>

  return 0;
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <I2C_AddressRead>:

// SEND I2C SLAVE ADDRESS
uint8_t I2C_AddressRead(I2C_HandleTypeDef *i2cHandle, uint8_t address)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	70fb      	strb	r3, [r7, #3]
  address |= 0x01; // set read/write bit to 'read'
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	70fb      	strb	r3, [r7, #3]
  i2cHandle->Instance->DR = address; // send address
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	78fa      	ldrb	r2, [r7, #3]
 800057e:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_ADDR)); // wait for ADDR bit to set
 8000580:	bf00      	nop
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f003 0302 	and.w	r3, r3, #2
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f8      	beq.n	8000582 <I2C_AddressRead+0x1e>

  //uint8_t temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit

  return 0;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <I2C_AddressWrite>:
  return 0;
}

// SEND ADDRESS FOR WRITING
uint8_t I2C_AddressWrite(I2C_HandleTypeDef *i2cHandle, uint8_t address)
{
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	460b      	mov	r3, r1
 80005a8:	70fb      	strb	r3, [r7, #3]
  i2cHandle->Instance->DR = address; // send address
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_ADDR)); // wait for ADDR bit to set
 80005b2:	bf00      	nop
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f8      	beq.n	80005b4 <I2C_AddressWrite+0x16>

  uint8_t temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	73fb      	strb	r3, [r7, #15]

  return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <I2C_Stop>:


// SEND STOP CONDITION
uint8_t I2C_Stop(I2C_HandleTypeDef *i2cHandle)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  i2cHandle->Instance->CR1 |= I2C_CR1_STOP; // set STOP bit to generate stop condition
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005fa:	601a      	str	r2, [r3, #0]

  return 0;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <I2C_SendByte>:


uint8_t I2C_SendByte(I2C_HandleTypeDef *i2cHandle, uint8_t *data)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_TXE)); // wait for TXE bit to set (TX empty)
 8000614:	bf00      	nop
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <I2C_SendByte+0xc>

  i2cHandle->Instance->DR = *data;	// send data into Data Register
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	781a      	ldrb	r2, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	611a      	str	r2, [r3, #16]

  while (!(i2cHandle->Instance->SR1 & I2C_SR1_BTF)); // wait for BTF bit to set (done transmitting)
 800062e:	bf00      	nop
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f8      	beq.n	8000630 <I2C_SendByte+0x26>

  return 0;
 800063e:	2300      	movs	r3, #0

}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <I2C_ReadData>:
  return 0;
}


uint8_t I2C_ReadData(I2C_HandleTypeDef *i2cHandle, uint8_t *data)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
  while (!(i2cHandle->Instance->SR1 & I2C_SR1_RXNE)); 		// wait for RXNE bit to set (RX NOT empty)
 8000656:	bf00      	nop
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f8      	beq.n	8000658 <I2C_ReadData+0xc>

  *data = (i2cHandle->Instance->DR & 0x00FF);			// read Data register
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	701a      	strb	r2, [r3, #0]

  return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <I2C_ReceiveBytes>:

uint8_t I2C_ReceiveBytes(I2C_HandleTypeDef *i2cHandle, uint8_t *data, uint16_t size)
{
 8000680:	b480      	push	{r7}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	4613      	mov	r3, r2
 800068c:	80fb      	strh	r3, [r7, #6]
  uint8_t temp; // dummy variable

  if (size == 0)							// size of data is 0 (nothing)
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d112      	bne.n	80006ba <I2C_ReceiveBytes+0x3a>
  {
    temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	75fb      	strb	r3, [r7, #23]
    i2cHandle->Instance->CR1 |= I2C_CR1_STOP;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e0e7      	b.n	800088a <I2C_ReceiveBytes+0x20a>
  }
  else if (size == 1)							// size of data is 1 single byte
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d11a      	bne.n	80006f6 <I2C_ReceiveBytes+0x76>
  {
    i2cHandle->Instance->CR1 &= ~I2C_CR1_ACK;					// disable ACK
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006ce:	601a      	str	r2, [r3, #0]
    temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);		// read SR1 and SR2 to clear ADDR bit
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4313      	orrs	r3, r2
 80006e2:	75fb      	strb	r3, [r7, #23]
    i2cHandle->Instance->CR1 |= I2C_CR1_STOP;					// set STOP condition
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	e0c9      	b.n	800088a <I2C_ReceiveBytes+0x20a>
  }
  else if (size == 2)							// size is 2 bytes
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d11a      	bne.n	8000732 <I2C_ReceiveBytes+0xb2>
  {
    i2cHandle->Instance->CR1 &= ~I2C_CR1_ACK;					// disable ACK
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800070a:	601a      	str	r2, [r3, #0]
    i2cHandle->Instance->CR1 |= I2C_CR1_POS;					// set POS
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800071a:	601a      	str	r2, [r3, #0]
    temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);		// read SR1 and SR2 to clear ADDR bit
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4313      	orrs	r3, r2
 800072e:	75fb      	strb	r3, [r7, #23]
 8000730:	e0ab      	b.n	800088a <I2C_ReceiveBytes+0x20a>
  }
  else									// size > 2
  {
    temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);		// read SR1 and SR2 to clear ADDR bit
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	75fb      	strb	r3, [r7, #23]
  }

  while (size > 0)					// while size > 0
 8000746:	e0a0      	b.n	800088a <I2C_ReceiveBytes+0x20a>
  {
    if (size <= 3)						// if size <= 3 (last 1-3 bytes)
 8000748:	88fb      	ldrh	r3, [r7, #6]
 800074a:	2b03      	cmp	r3, #3
 800074c:	f200 8089 	bhi.w	8000862 <I2C_ReceiveBytes+0x1e2>
    {
      if (size == 1)							// if size == 1
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d114      	bne.n	8000780 <I2C_ReceiveBytes+0x100>
      {
	while (!(i2cHandle->Instance->SR1 & I2C_SR1_RXNE)); 			// wait for RXNE bit to set (RX NOT empty)
 8000756:	bf00      	nop
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f8      	beq.n	8000758 <I2C_ReceiveBytes+0xd8>

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
	size--;									// decrement data left to read
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	3b01      	subs	r3, #1
 800077c:	80fb      	strh	r3, [r7, #6]
 800077e:	e084      	b.n	800088a <I2C_ReceiveBytes+0x20a>
      }
      else if (size == 2)
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d128      	bne.n	80007d8 <I2C_ReceiveBytes+0x158>
      {
	while (!(i2cHandle->Instance->SR1 & I2C_SR1_BTF)); 			// wait for BTF bit to set (done transmitting)
 8000786:	bf00      	nop
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f8      	beq.n	8000788 <I2C_ReceiveBytes+0x108>
							      // BTF is set when a byte is received but DR was still not read,
								// meaning there are 2 bytes ready to be read (one in DR and the one in the shift register)
								// BTF also stops the clock, stopping all communication until it is cleared and ready to read more data

	i2cHandle->Instance->CR1 |= I2C_CR1_STOP;				// set STOP condition
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007a4:	601a      	str	r2, [r3, #0]

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
	size--;									// decrement data left to read
 80007b8:	88fb      	ldrh	r3, [r7, #6]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	80fb      	strh	r3, [r7, #6]

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	3301      	adds	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
	size--;									// decrement data left to read
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	80fb      	strh	r3, [r7, #6]
 80007d6:	e058      	b.n	800088a <I2C_ReceiveBytes+0x20a>
      }
      else	// size == 3
      {
	while (!(i2cHandle->Instance->SR1 & I2C_SR1_BTF)); 			// wait for BTF bit to set (done transmitting)
 80007d8:	bf00      	nop
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f8      	beq.n	80007da <I2C_ReceiveBytes+0x15a>
	                                                    // Here byte (N-2) is in the DR and (N-1) is in the shift register
	i2cHandle->Instance->CR1 &= ~I2C_CR1_ACK;				// disable ACK
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007f6:	601a      	str	r2, [r3, #0]

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	3301      	adds	r3, #1
 8000808:	60bb      	str	r3, [r7, #8]
	size--;									// decrement data left to read
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	3b01      	subs	r3, #1
 800080e:	80fb      	strh	r3, [r7, #6]

	while (!(i2cHandle->Instance->SR1 & I2C_SR1_BTF)); 			// wait for BTF bit to set (done transmitting)
 8000810:	bf00      	nop
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f8      	beq.n	8000812 <I2C_ReceiveBytes+0x192>
	i2cHandle->Instance->CR1 |= I2C_CR1_STOP;				// set STOP condition
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800082e:	601a      	str	r2, [r3, #0]

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer (N-1)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	60bb      	str	r3, [r7, #8]
	size--;									// decrement data left to read
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	3b01      	subs	r3, #1
 8000846:	80fb      	strh	r3, [r7, #6]

	*data = i2cHandle->Instance->DR;					// read Data register to data pointer (N)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	701a      	strb	r2, [r3, #0]
	data++;									// increment data pointer
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
	size--;
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	3b01      	subs	r3, #1
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	e013      	b.n	800088a <I2C_ReceiveBytes+0x20a>
      }
    }
    else 							// size > 3
    {
      while (!(i2cHandle->Instance->SR1 & I2C_SR1_RXNE));                         // wait for RXNE bit to set (RX NOT empty)
 8000862:	bf00      	nop
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f8      	beq.n	8000864 <I2C_ReceiveBytes+0x1e4>
        *data = i2cHandle->Instance->DR;                                          // read Data register to data pointer
        data++;                                                                   // increment data pointer
        size--;                                                                   // decrement data left to read
      }*/

      *data = i2cHandle->Instance->DR;						// read Data register to data pointer
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	701a      	strb	r2, [r3, #0]
      data++;									// increment data pointer
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3301      	adds	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
      size--;									// decrement data left to read
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	3b01      	subs	r3, #1
 8000888:	80fb      	strh	r3, [r7, #6]
  while (size > 0)					// while size > 0
 800088a:	88fb      	ldrh	r3, [r7, #6]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f47f af5b 	bne.w	8000748 <I2C_ReceiveBytes+0xc8>
    }
  }

  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	371c      	adds	r7, #28
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <I2C_ReadByte>:


uint8_t I2C_ReadByte(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress, uint8_t *data)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	72fb      	strb	r3, [r7, #11]
 80008ae:	4613      	mov	r3, r2
 80008b0:	72bb      	strb	r3, [r7, #10]
  I2C_RequestRead(i2cHandle, deviceAddress, memoryAddress);	// Request specific device and memory address to be read
 80008b2:	7aba      	ldrb	r2, [r7, #10]
 80008b4:	7afb      	ldrb	r3, [r7, #11]
 80008b6:	4619      	mov	r1, r3
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f000 f86b 	bl	8000994 <I2C_RequestRead>

  I2C_Restart(i2cHandle);					// Send (Re)Start condition
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f7ff fe35 	bl	800052e <I2C_Restart>

  I2C_AddressRead(i2cHandle, deviceAddress);				// Send device address
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff fe4b 	bl	8000564 <I2C_AddressRead>

  i2cHandle->Instance->CR1 &= ~I2C_CR1_ACK;				// disable ACK
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80008dc:	601a      	str	r2, [r3, #0]
  uint8_t temp = (i2cHandle->Instance->SR1 | i2cHandle->Instance->SR2);	// read SR1 and SR2 to clear ADDR bit
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	75fb      	strb	r3, [r7, #23]

  I2C_Stop(i2cHandle);						// STOP condition
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f7ff fe76 	bl	80005e4 <I2C_Stop>

  I2C_ReadData(i2cHandle, data);				// Read byte from Data Register
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff fea6 	bl	800064c <I2C_ReadData>

  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <I2C_ReadBytes>:


uint8_t I2C_ReadBytes(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress, uint8_t *data, uint16_t size)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	72fb      	strb	r3, [r7, #11]
 8000918:	4613      	mov	r3, r2
 800091a:	72bb      	strb	r3, [r7, #10]
  I2C_RequestRead(i2cHandle, deviceAddress, memoryAddress);	// Request specific device and memory address to be read
 800091c:	7aba      	ldrb	r2, [r7, #10]
 800091e:	7afb      	ldrb	r3, [r7, #11]
 8000920:	4619      	mov	r1, r3
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f000 f836 	bl	8000994 <I2C_RequestRead>

  I2C_Restart(i2cHandle);					// Send (Re)Start condition
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff fe00 	bl	800052e <I2C_Restart>

  I2C_AddressRead(i2cHandle, deviceAddress);		        // Send device address and disable ACK
 800092e:	7afb      	ldrb	r3, [r7, #11]
 8000930:	4619      	mov	r1, r3
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff fe16 	bl	8000564 <I2C_AddressRead>

  I2C_ReceiveBytes(i2cHandle, data, size);			// Read series of bytes
 8000938:	8b3b      	ldrh	r3, [r7, #24]
 800093a:	461a      	mov	r2, r3
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff fe9e 	bl	8000680 <I2C_ReceiveBytes>

  return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <I2C_WriteByte>:

uint8_t I2C_WriteByte(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress, uint8_t *data)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b084      	sub	sp, #16
 8000952:	af00      	add	r7, sp, #0
 8000954:	60f8      	str	r0, [r7, #12]
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	72fb      	strb	r3, [r7, #11]
 800095c:	4613      	mov	r3, r2
 800095e:	72bb      	strb	r3, [r7, #10]
  I2C_Start(i2cHandle);
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff fdb9 	bl	80004d8 <I2C_Start>
  I2C_AddressWrite(i2cHandle, deviceAddress);
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	4619      	mov	r1, r3
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f7ff fe17 	bl	800059e <I2C_AddressWrite>
  I2C_SendByte(i2cHandle, &memoryAddress);
 8000970:	f107 030a 	add.w	r3, r7, #10
 8000974:	4619      	mov	r1, r3
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f7ff fe47 	bl	800060a <I2C_SendByte>
  I2C_SendByte(i2cHandle, data);
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fe43 	bl	800060a <I2C_SendByte>
  I2C_Stop(i2cHandle);
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fe2d 	bl	80005e4 <I2C_Stop>

  return 0;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <I2C_RequestRead>:
  return 0;
}

// START COMMUNICATION AND REQUEST DATA FROM DEVICE MEMORY
uint8_t I2C_RequestRead(I2C_HandleTypeDef *i2cHandle, uint8_t deviceAddress, uint8_t memoryAddress)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
 80009a0:	4613      	mov	r3, r2
 80009a2:	70bb      	strb	r3, [r7, #2]
  I2C_Start(i2cHandle);				// Start I2C communication
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff fd97 	bl	80004d8 <I2C_Start>
  I2C_AddressWrite(i2cHandle, deviceAddress);	// Send device address
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	4619      	mov	r1, r3
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fdf5 	bl	800059e <I2C_AddressWrite>
  I2C_SendByte(i2cHandle, &memoryAddress);	// Send memory address of device to be read
 80009b4:	1cbb      	adds	r3, r7, #2
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fe26 	bl	800060a <I2C_SendByte>

  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <MPU6050_Init>:
//#include "usbd_cdc_if.h"
#include "MPU6050.h"


uint8_t MPU6050_Init(MPU6050 *dev, I2C_HandleTypeDef *i2cHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  dev->i2cHandle = i2cHandle;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	601a      	str	r2, [r3, #0]
  dev->address = (0x68 << 1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	22d0      	movs	r2, #208	; 0xd0
 80009dc:	711a      	strb	r2, [r3, #4]

  for(uint8_t i = 0; i < SENSOR_SIZE; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	e007      	b.n	80009f4 <MPU6050_Init+0x2c>
  {
    dev->data[i] = 0x00;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	2200      	movs	r2, #0
 80009ec:	715a      	strb	r2, [r3, #5]
  for(uint8_t i = 0; i < SENSOR_SIZE; i++)
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b0d      	cmp	r3, #13
 80009f8:	d9f4      	bls.n	80009e4 <MPU6050_Init+0x1c>
  }

  dev->accelerometer[0] = 0.0f;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  dev->accelerometer[1] = 0.0f;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  dev->accelerometer[2] = 0.0f;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f04f 0200 	mov.w	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]

  dev->gyroscope[0] = 0.0f;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  dev->gyroscope[1] = 0.0f;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  dev->gyroscope[2] = 0.0f;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c

  dev->temp = 0.0f;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f04f 0200 	mov.w	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]


  dev->accelOffset[0] = 0.0f;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f04f 0200 	mov.w	r2, #0
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
  dev->accelOffset[1] = 0.0f;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f04f 0200 	mov.w	r2, #0
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  dev->accelOffset[2] = 0.0f;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f04f 0200 	mov.w	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38

  dev->gyroOffset[0] = 0.0f;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f04f 0200 	mov.w	r2, #0
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
  dev->gyroOffset[1] = 0.0f;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f04f 0200 	mov.w	r2, #0
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
  dev->gyroOffset[2] = 0.0f;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f04f 0200 	mov.w	r2, #0
 8000a60:	645a      	str	r2, [r3, #68]	; 0x44

  dev->tempOffset = 0.0f;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	649a      	str	r2, [r3, #72]	; 0x48

  uint8_t errNum = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status;

  uint8_t regData;

  status = MPU6050_ReadRegister(dev, WHO_AM_I, &regData);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	461a      	mov	r2, r3
 8000a74:	2175      	movs	r1, #117	; 0x75
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f928 	bl	8000ccc <MPU6050_ReadRegister>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	737b      	strb	r3, [r7, #13]
  errNum += (status != HAL_OK);
 8000a80:	7b7b      	ldrb	r3, [r7, #13]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf14      	ite	ne
 8000a86:	2301      	movne	r3, #1
 8000a88:	2300      	moveq	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	4413      	add	r3, r2
 8000a92:	73bb      	strb	r3, [r7, #14]

  if (regData != MPU6050_ID)
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	2b68      	cmp	r3, #104	; 0x68
 8000a98:	d001      	beq.n	8000a9e <MPU6050_Init+0xd6>
  {
    return 255;
 8000a9a:	23ff      	movs	r3, #255	; 0xff
 8000a9c:	e011      	b.n	8000ac2 <MPU6050_Init+0xfa>
  }
  status = MPU6050_WriteRegister(dev, PWR_MGMT_1, 0x00);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	216b      	movs	r1, #107	; 0x6b
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f93e 	bl	8000d24 <MPU6050_WriteRegister>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	737b      	strb	r3, [r7, #13]
  errNum += (status != HAL_OK);
 8000aac:	7b7b      	ldrb	r3, [r7, #13]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	7bbb      	ldrb	r3, [r7, #14]
 8000abc:	4413      	add	r3, r2
 8000abe:	73bb      	strb	r3, [r7, #14]
  status = MPU6050_WriteRegister(dev, GYRO_CONFIG, 0x00);
  errNum += (status != HAL_OK);
  status = MPU6050_WriteRegister(dev, ACCEL_CONFIG, 0x00);
  errNum += (status != HAL_OK);*/

  return errNum;
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]

}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <MPU6050_ReadSensors>:
  return status;
}


uint8_t MPU6050_ReadSensors(MPU6050 *dev)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  MPU6050_ReadSensorData(dev);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f808 	bl	8000ae8 <MPU6050_ReadSensorData>
  MPU6050_CalculateSensorData(dev);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f817 	bl	8000b0c <MPU6050_CalculateSensorData>

  return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <MPU6050_ReadSensorData>:

uint8_t MPU6050_ReadSensorData(MPU6050 *dev)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = MPU6050_ReadRegisters(dev, SENSOR_OUT, dev->data, SENSOR_SIZE);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	1d5a      	adds	r2, r3, #5
 8000af4:	230e      	movs	r3, #14
 8000af6:	213b      	movs	r1, #59	; 0x3b
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f8fa 	bl	8000cf2 <MPU6050_ReadRegisters>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73fb      	strb	r3, [r7, #15]

  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <MPU6050_CalculateSensorData>:

uint8_t MPU6050_CalculateSensorData(MPU6050 *dev)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  MPU6050_CalculateAccel(dev);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f80b 	bl	8000b30 <MPU6050_CalculateAccel>
  MPU6050_CalculateTemp(dev);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f85a 	bl	8000bd4 <MPU6050_CalculateTemp>
  MPU6050_CalculateGyro(dev);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f881 	bl	8000c28 <MPU6050_CalculateGyro>

  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <MPU6050_CalculateAccel>:


uint8_t MPU6050_CalculateAccel(MPU6050 *dev)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  int16_t accelRaw[3];

  accelRaw[0] = ((int16_t)dev->data[0]<<8) | (int16_t)dev->data[1];
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	799b      	ldrb	r3, [r3, #6]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	813b      	strh	r3, [r7, #8]
  accelRaw[1] = ((int16_t)dev->data[2]<<8) | (int16_t)dev->data[3];
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	79db      	ldrb	r3, [r3, #7]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7a1b      	ldrb	r3, [r3, #8]
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	817b      	strh	r3, [r7, #10]
  accelRaw[2] = ((int16_t)dev->data[4]<<8) | (int16_t)dev->data[5];
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7a5b      	ldrb	r3, [r3, #9]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7a9b      	ldrb	r3, [r3, #10]
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	81bb      	strh	r3, [r7, #12]

  dev->accelerometer[0] = ((float)accelRaw[0]/16384.0f);
 8000b74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b80:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000bd0 <MPU6050_CalculateAccel+0xa0>
 8000b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	edc3 7a05 	vstr	s15, [r3, #20]
  dev->accelerometer[1] = ((float)accelRaw[1]/16384.0f);
 8000b8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000bd0 <MPU6050_CalculateAccel+0xa0>
 8000b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	edc3 7a06 	vstr	s15, [r3, #24]
  dev->accelerometer[2] = ((float)accelRaw[2]/16384.0f);
 8000ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000bd0 <MPU6050_CalculateAccel+0xa0>
 8000bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edc3 7a07 	vstr	s15, [r3, #28]

  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	46800000 	.word	0x46800000

08000bd4 <MPU6050_CalculateTemp>:

uint8_t MPU6050_CalculateTemp(MPU6050 *dev)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  int16_t tempRaw = ((int16_t)dev->data[6]<<8) | (int16_t)dev->data[7];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7adb      	ldrb	r3, [r3, #11]
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7b1b      	ldrb	r3, [r3, #12]
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	81fb      	strh	r3, [r7, #14]

  dev->temp = ((float)tempRaw/340.0f) + 35.53f;
 8000bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfa:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000c20 <MPU6050_CalculateTemp+0x4c>
 8000bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c02:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000c24 <MPU6050_CalculateTemp+0x50>
 8000c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	edc3 7a08 	vstr	s15, [r3, #32]

  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	43aa0000 	.word	0x43aa0000
 8000c24:	420e1eb8 	.word	0x420e1eb8

08000c28 <MPU6050_CalculateGyro>:

uint8_t MPU6050_CalculateGyro(MPU6050 *dev)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  int16_t gyroRaw[3];

  gyroRaw[0] = ((int16_t)dev->data[8]<<8) | (int16_t)dev->data[9];
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7b5b      	ldrb	r3, [r3, #13]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7b9b      	ldrb	r3, [r3, #14]
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	813b      	strh	r3, [r7, #8]
  gyroRaw[1] = ((int16_t)dev->data[10]<<8) | (int16_t)dev->data[11];
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7bdb      	ldrb	r3, [r3, #15]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7c1b      	ldrb	r3, [r3, #16]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	817b      	strh	r3, [r7, #10]
  gyroRaw[2] = ((int16_t)dev->data[12]<<8) | (int16_t)dev->data[13];
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7c5b      	ldrb	r3, [r3, #17]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7c9b      	ldrb	r3, [r3, #18]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	81bb      	strh	r3, [r7, #12]

  dev->gyroscope[0] = ((float)gyroRaw[0]/131.0f);
 8000c6c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c70:	ee07 3a90 	vmov	s15, r3
 8000c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c78:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000cc8 <MPU6050_CalculateGyro+0xa0>
 8000c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  dev->gyroscope[1] = ((float)gyroRaw[1]/131.0f);
 8000c86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c8a:	ee07 3a90 	vmov	s15, r3
 8000c8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c92:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000cc8 <MPU6050_CalculateGyro+0xa0>
 8000c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  dev->gyroscope[2] = ((float)gyroRaw[2]/131.0f);
 8000ca0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cac:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000cc8 <MPU6050_CalculateGyro+0xa0>
 8000cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  return 0;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	43030000 	.word	0x43030000

08000ccc <MPU6050_ReadRegister>:


uint8_t MPU6050_ReadRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	72fb      	strb	r3, [r7, #11]
  //return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
  return I2C_ReadByte(dev->i2cHandle, MPU6050_ADDR, reg, data);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	7afa      	ldrb	r2, [r7, #11]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	21d0      	movs	r1, #208	; 0xd0
 8000ce4:	f7ff fddc 	bl	80008a0 <I2C_ReadByte>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <MPU6050_ReadRegisters>:

HAL_StatusTypeDef MPU6050_ReadRegisters(MPU6050 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	460b      	mov	r3, r1
 8000d00:	72fb      	strb	r3, [r7, #11]
 8000d02:	4613      	mov	r3, r2
 8000d04:	72bb      	strb	r3, [r7, #10]
  //return HAL_I2C_Mem_Read(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);

  return I2C_ReadBytes(dev->i2cHandle, MPU6050_ADDR, reg, data, length);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	7abb      	ldrb	r3, [r7, #10]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	7afa      	ldrb	r2, [r7, #11]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	21d0      	movs	r1, #208	; 0xd0
 8000d16:	f7ff fdf8 	bl	800090a <I2C_ReadBytes>
 8000d1a:	4603      	mov	r3, r0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <MPU6050_WriteRegister>:
HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050 *dev, uint8_t reg, uint8_t *data)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	72fb      	strb	r3, [r7, #11]
  //return HAL_I2C_Mem_Write(dev->i2cHandle, MPU6050_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
  return I2C_WriteByte(dev->i2cHandle, MPU6050_ADDR, reg, data);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	7afa      	ldrb	r2, [r7, #11]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	21d0      	movs	r1, #208	; 0xd0
 8000d3c:	f7ff fe07 	bl	800094e <I2C_WriteByte>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fb0c 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f838 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 f8f6 	bl	8000f48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d5c:	f000 f89c 	bl	8000e98 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 f8c8 	bl	8000ef4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&acc, &hi2c1);
 8000d64:	490f      	ldr	r1, [pc, #60]	; (8000da4 <main+0x58>)
 8000d66:	4810      	ldr	r0, [pc, #64]	; (8000da8 <main+0x5c>)
 8000d68:	f7ff fe2e 	bl	80009c8 <MPU6050_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d6c:	f006 f9f4 	bl	8007158 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadIMU */
  ReadIMUHandle = osThreadNew(StartReadIMU, NULL, &ReadIMU_attributes);
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <main+0x60>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	480e      	ldr	r0, [pc, #56]	; (8000db0 <main+0x64>)
 8000d76:	f006 fa39 	bl	80071ec <osThreadNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <main+0x68>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* creation of SendBLEData */
  SendBLEDataHandle = osThreadNew(StartSendBLEData, NULL, &SendBLEData_attributes);
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <main+0x6c>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <main+0x70>)
 8000d86:	f006 fa31 	bl	80071ec <osThreadNew>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <main+0x74>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <main+0x78>)
 8000d98:	f000 fdb4 	bl	8001904 <HAL_GPIO_WritePin>


  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d9c:	f006 fa00 	bl	80071a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x54>
 8000da2:	bf00      	nop
 8000da4:	20004e48 	.word	0x20004e48
 8000da8:	20004dfc 	.word	0x20004dfc
 8000dac:	0800a8b0 	.word	0x0800a8b0
 8000db0:	08001009 	.word	0x08001009
 8000db4:	20004ee4 	.word	0x20004ee4
 8000db8:	0800a8d4 	.word	0x0800a8d4
 8000dbc:	08001029 	.word	0x08001029
 8000dc0:	20004e9c 	.word	0x20004e9c
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b094      	sub	sp, #80	; 0x50
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	2230      	movs	r2, #48	; 0x30
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f009 fc56 	bl	800a688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <SystemClock_Config+0xc8>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <SystemClock_Config+0xc8>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <SystemClock_Config+0xc8>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <SystemClock_Config+0xcc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <SystemClock_Config+0xcc>)
 8000e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <SystemClock_Config+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e38:	2319      	movs	r3, #25
 8000e3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f855 	bl	8002efc <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e58:	f000 f908 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2103      	movs	r1, #3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fab7 	bl	80033ec <HAL_RCC_ClockConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e84:	f000 f8f2 	bl	800106c <Error_Handler>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3750      	adds	r7, #80	; 0x50
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_I2C1_Init+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x58>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C1_Init+0x50>)
 8000ed6:	f000 fd49 	bl	800196c <HAL_I2C_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee0:	f000 f8c4 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20004e48 	.word	0x20004e48
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART1_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f002 fee0 	bl	8003cf0 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f899 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20004ea0 	.word	0x20004ea0
 8000f44:	40011000 	.word	0x40011000

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a18      	ldr	r2, [pc, #96]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_GPIO_Init+0xb8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <MX_GPIO_Init+0xbc>)
 8000fd6:	f000 fc95 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xbc>)
 8000ff4:	f000 fb02 	bl	80015fc <HAL_GPIO_Init>

}
 8000ff8:	bf00      	nop
 8000ffa:	3728      	adds	r7, #40	; 0x28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020800 	.word	0x40020800

08001008 <StartReadIMU>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadIMU */
void StartReadIMU(void *argument)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001010:	f008 fe1c 	bl	8009c4c <MX_USB_DEVICE_Init>

    //MPU6050_ReadTemp(&acc);

    //MPU6050_ReadGyro(&acc);

    MPU6050_ReadSensors(&acc);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <StartReadIMU+0x1c>)
 8001016:	f7ff fd58 	bl	8000aca <MPU6050_ReadSensors>

    osDelay(100);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f006 f978 	bl	8007310 <osDelay>
    MPU6050_ReadSensors(&acc);
 8001020:	e7f8      	b.n	8001014 <StartReadIMU+0xc>
 8001022:	bf00      	nop
 8001024:	20004dfc 	.word	0x20004dfc

08001028 <StartSendBLEData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendBLEData */
void StartSendBLEData(void *argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendBLEData */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <StartSendBLEData+0x1c>)
 8001036:	f000 fc7e 	bl	8001936 <HAL_GPIO_TogglePin>
      osDelay(1000);
 800103a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800103e:	f006 f967 	bl	8007310 <osDelay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001042:	e7f5      	b.n	8001030 <StartSendBLEData+0x8>
 8001044:	40020800 	.word	0x40020800

08001048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800105a:	f000 f9a9 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40014000 	.word	0x40014000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_MspInit+0x54>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_MspInit+0x54>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x54>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_MspInit+0x54>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_MspInit+0x54>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_MspInit+0x54>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	f06f 0001 	mvn.w	r0, #1
 80010be:	f000 fa73 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_I2C_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12c      	bne.n	800114c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_I2C_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_I2C_MspInit+0x88>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_I2C_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800110e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001114:	2312      	movs	r3, #18
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001120:	2304      	movs	r3, #4
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <HAL_I2C_MspInit+0x8c>)
 800112c:	f000 fa66 	bl	80015fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_I2C_MspInit+0x88>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_I2C_MspInit+0x88>)
 800113a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113e:	6413      	str	r3, [r2, #64]	; 0x40
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_I2C_MspInit+0x88>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40005400 	.word	0x40005400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020400 	.word	0x40020400

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0x84>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12b      	bne.n	80011da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0x88>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ba:	23c0      	movs	r3, #192	; 0xc0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x8c>)
 80011d6:	f000 fa11 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020400 	.word	0x40020400

080011f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	2018      	movs	r0, #24
 8001206:	f000 f9cf 	bl	80015a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800120a:	2018      	movs	r0, #24
 800120c:	f000 f9e8 	bl	80015e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_InitTick+0xa0>)
 8001216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_InitTick+0xa0>)
 800121a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121e:	6453      	str	r3, [r2, #68]	; 0x44
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_InitTick+0xa0>)
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800122c:	f107 0210 	add.w	r2, r7, #16
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 faa8 	bl	800378c <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800123c:	f002 fa92 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8001240:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	4a13      	ldr	r2, [pc, #76]	; (8001294 <HAL_InitTick+0xa4>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3b01      	subs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_InitTick+0xa8>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_InitTick+0xac>)
 8001254:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_InitTick+0xa8>)
 8001258:	f240 32e7 	movw	r2, #999	; 0x3e7
 800125c:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_InitTick+0xa8>)
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_InitTick+0xa8>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_InitTick+0xa8>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_InitTick+0xa8>)
 8001272:	f002 fabd 	bl	80037f0 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <HAL_InitTick+0xa8>)
 800127e:	f002 fb11 	bl	80038a4 <HAL_TIM_Base_Start_IT>
 8001282:	4603      	mov	r3, r0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3730      	adds	r7, #48	; 0x30
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	431bde83 	.word	0x431bde83
 8001298:	20004ee8 	.word	0x20004ee8
 800129c:	40014000 	.word	0x40014000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80012d2:	f002 fb49 	bl	8003968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20004ee8 	.word	0x20004ee8

080012e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <OTG_FS_IRQHandler+0x10>)
 80012e6:	f000 fdd5 	bl	8001e94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20006444 	.word	0x20006444

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemInit+0x20>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <SystemInit+0x20>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131e:	490e      	ldr	r1, [pc, #56]	; (8001358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001334:	4c0b      	ldr	r4, [pc, #44]	; (8001364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001342:	f7ff ffd7 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f009 f96b 	bl	800a620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800134a:	f7ff fcff 	bl	8000d4c <main>
  bx  lr    
 800134e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800135c:	0800a980 	.word	0x0800a980
  ldr r2, =_sbss
 8001360:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001364:	20006858 	.word	0x20006858

08001368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_Init+0x40>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <HAL_Init+0x40>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_Init+0x40>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_Init+0x40>)
 800138e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f8fc 	bl	8001592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff ff28 	bl	80011f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a0:	f7ff fe6a 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20004f30 	.word	0x20004f30

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20004f30 	.word	0x20004f30

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff ffee 	bl	80013d8 <HAL_GetTick>
 80013fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	bf00      	nop
 8001418:	f7ff ffde 	bl	80013d8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000008 	.word	0x20000008

08001438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
         );
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ff4c 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ba:	f7ff ff61 	bl	8001480 <__NVIC_GetPriorityGrouping>
 80015be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	6978      	ldr	r0, [r7, #20]
 80015c6:	f7ff ffb1 	bl	800152c <NVIC_EncodePriority>
 80015ca:	4602      	mov	r2, r0
 80015cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff80 	bl	80014d8 <__NVIC_SetPriority>
}
 80015d8:	bf00      	nop
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff54 	bl	800149c <__NVIC_EnableIRQ>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	e159      	b.n	80018cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	f040 8148 	bne.w	80018c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d005      	beq.n	800164e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	2b02      	cmp	r3, #2
 800164c:	d130      	bne.n	80016b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001684:	2201      	movs	r2, #1
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 0201 	and.w	r2, r3, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d017      	beq.n	80016ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d123      	bne.n	8001740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	69b9      	ldr	r1, [r7, #24]
 800173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a2 	beq.w	80018c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b57      	ldr	r3, [pc, #348]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	4a56      	ldr	r2, [pc, #344]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 800178c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	4b54      	ldr	r3, [pc, #336]	; (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_GPIO_Init+0x2ec>)
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a49      	ldr	r2, [pc, #292]	; (80018ec <HAL_GPIO_Init+0x2f0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d019      	beq.n	80017fe <HAL_GPIO_Init+0x202>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a48      	ldr	r2, [pc, #288]	; (80018f0 <HAL_GPIO_Init+0x2f4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x1fe>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_GPIO_Init+0x2f8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x2fc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x1f6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_GPIO_Init+0x300>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x1f2>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x204>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001810:	4935      	ldr	r1, [pc, #212]	; (80018e8 <HAL_GPIO_Init+0x2ec>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001842:	4a2f      	ldr	r2, [pc, #188]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_GPIO_Init+0x304>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_GPIO_Init+0x304>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001896:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_GPIO_Init+0x304>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_GPIO_Init+0x304>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_GPIO_Init+0x304>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f aea2 	bls.w	8001618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4013      	ands	r3, r2
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43d9      	mvns	r1, r3
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	400b      	ands	r3, r1
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e12b      	b.n	8001bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d106      	bne.n	8001998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff fb9c 	bl	80010d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2224      	movs	r2, #36	; 0x24
 800199c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019d0:	f001 feb4 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 80019d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a81      	ldr	r2, [pc, #516]	; (8001be0 <HAL_I2C_Init+0x274>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d807      	bhi.n	80019f0 <HAL_I2C_Init+0x84>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a80      	ldr	r2, [pc, #512]	; (8001be4 <HAL_I2C_Init+0x278>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	bf94      	ite	ls
 80019e8:	2301      	movls	r3, #1
 80019ea:	2300      	movhi	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	e006      	b.n	80019fe <HAL_I2C_Init+0x92>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a7d      	ldr	r2, [pc, #500]	; (8001be8 <HAL_I2C_Init+0x27c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0e7      	b.n	8001bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a78      	ldr	r2, [pc, #480]	; (8001bec <HAL_I2C_Init+0x280>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9b      	lsrs	r3, r3, #18
 8001a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a6a      	ldr	r2, [pc, #424]	; (8001be0 <HAL_I2C_Init+0x274>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d802      	bhi.n	8001a40 <HAL_I2C_Init+0xd4>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	e009      	b.n	8001a54 <HAL_I2C_Init+0xe8>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a46:	fb02 f303 	mul.w	r3, r2, r3
 8001a4a:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_I2C_Init+0x284>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	3301      	adds	r3, #1
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	495c      	ldr	r1, [pc, #368]	; (8001be0 <HAL_I2C_Init+0x274>)
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d819      	bhi.n	8001aa8 <HAL_I2C_Init+0x13c>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e59      	subs	r1, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a88:	400b      	ands	r3, r1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00a      	beq.n	8001aa4 <HAL_I2C_Init+0x138>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1e59      	subs	r1, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa2:	e051      	b.n	8001b48 <HAL_I2C_Init+0x1dc>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e04f      	b.n	8001b48 <HAL_I2C_Init+0x1dc>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <HAL_I2C_Init+0x168>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e58      	subs	r0, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	440b      	add	r3, r1
 8001abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e012      	b.n	8001afa <HAL_I2C_Init+0x18e>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1e58      	subs	r0, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	0099      	lsls	r1, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Init+0x196>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e022      	b.n	8001b48 <HAL_I2C_Init+0x1dc>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10e      	bne.n	8001b28 <HAL_I2C_Init+0x1bc>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1e58      	subs	r0, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	440b      	add	r3, r1
 8001b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b26:	e00f      	b.n	8001b48 <HAL_I2C_Init+0x1dc>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	0099      	lsls	r1, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	6809      	ldr	r1, [r1, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6911      	ldr	r1, [r2, #16]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68d2      	ldr	r2, [r2, #12]
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 0201 	orr.w	r2, r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	000186a0 	.word	0x000186a0
 8001be4:	001e847f 	.word	0x001e847f
 8001be8:	003d08ff 	.word	0x003d08ff
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	b08f      	sub	sp, #60	; 0x3c
 8001bf8:	af0a      	add	r7, sp, #40	; 0x28
 8001bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e10f      	b.n	8001e26 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f008 f9f3 	bl	800a00c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2203      	movs	r2, #3
 8001c2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fb7e 	bl	8004346 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	687e      	ldr	r6, [r7, #4]
 8001c52:	466d      	mov	r5, sp
 8001c54:	f106 0410 	add.w	r4, r6, #16
 8001c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c68:	1d33      	adds	r3, r6, #4
 8001c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f002 fa55 	bl	800411c <USB_CoreInit>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0d0      	b.n	8001e26 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fb6c 	bl	8004368 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e04a      	b.n	8001d2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	1a9b      	subs	r3, r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	333d      	adds	r3, #61	; 0x3d
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	333c      	adds	r3, #60	; 0x3c
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3342      	adds	r3, #66	; 0x42
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	333f      	adds	r3, #63	; 0x3f
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3344      	adds	r3, #68	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3348      	adds	r3, #72	; 0x48
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3350      	adds	r3, #80	; 0x50
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d3af      	bcc.n	8001c96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e044      	b.n	8001dc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d3b5      	bcc.n	8001d3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	687e      	ldr	r6, [r7, #4]
 8001dd8:	466d      	mov	r5, sp
 8001dda:	f106 0410 	add.w	r4, r6, #16
 8001dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dea:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dee:	1d33      	adds	r3, r6, #4
 8001df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df2:	6838      	ldr	r0, [r7, #0]
 8001df4:	f002 fb04 	bl	8004400 <USB_DevInit>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00d      	b.n	8001e26 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fb80 	bl	8005524 <USB_DevDisconnect>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e2e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_PCD_Start+0x1c>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e020      	b.n	8001e8c <HAL_PCD_Start+0x5e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d109      	bne.n	8001e6e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fa56 	bl	8004324 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fb30 	bl	80054e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b08d      	sub	sp, #52	; 0x34
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fbee 	bl	800568c <USB_GetMode>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 839d 	bne.w	80025f2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fb52 	bl	8005566 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 8393 	beq.w	80025f0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f003 fb49 	bl	8005566 <USB_ReadInterrupts>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d107      	bne.n	8001eee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695a      	ldr	r2, [r3, #20]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f002 0202 	and.w	r2, r2, #2
 8001eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 fb37 	bl	8005566 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d161      	bne.n	8001fc6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0210 	bic.w	r2, r2, #16
 8001f10:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 020f 	and.w	r2, r3, #15
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	3304      	adds	r3, #4
 8001f30:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	0c5b      	lsrs	r3, r3, #17
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d124      	bne.n	8001f88 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d035      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6a38      	ldr	r0, [r7, #32]
 8001f5e:	f003 f96e 	bl	800523e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6e:	441a      	add	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f80:	441a      	add	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e016      	b.n	8001fb6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	0c5b      	lsrs	r3, r3, #17
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d110      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6a38      	ldr	r0, [r7, #32]
 8001fa0:	f003 f94d 	bl	800523e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb0:	441a      	add	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0210 	orr.w	r2, r2, #16
 8001fc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 facb 	bl	8005566 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fda:	d16e      	bne.n	80020ba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fad1 	bl	800558c <USB_ReadDevAllOutEpInterrupt>
 8001fea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fec:	e062      	b.n	80020b4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d057      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 faf6 	bl	80055f4 <USB_ReadDevOutEPInterrupt>
 8002008:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002020:	461a      	mov	r2, r3
 8002022:	2301      	movs	r3, #1
 8002024:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 fdb1 	bl	8002b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00c      	beq.n	8002052 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002044:	461a      	mov	r2, r3
 8002046:	2308      	movs	r3, #8
 8002048:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800204a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 feab 	bl	8002da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	2310      	movs	r3, #16
 800206c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	4413      	add	r3, r2
 8002080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002084:	461a      	mov	r2, r3
 8002086:	2320      	movs	r3, #32
 8002088:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a0:	461a      	mov	r2, r3
 80020a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	3301      	adds	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d199      	bne.n	8001fee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fa51 	bl	8005566 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020ce:	f040 80c0 	bne.w	8002252 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fa72 	bl	80055c0 <USB_ReadDevAllInEpInterrupt>
 80020dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020e2:	e0b2      	b.n	800224a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80a7 	beq.w	800223e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fa98 	bl	8005630 <USB_ReadDevInEPInterrupt>
 8002100:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d057      	beq.n	80021bc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	69f9      	ldr	r1, [r7, #28]
 8002128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800212c:	4013      	ands	r3, r2
 800212e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213c:	461a      	mov	r2, r3
 800213e:	2301      	movs	r3, #1
 8002140:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d132      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4403      	add	r3, r0
 800216a:	3344      	adds	r3, #68	; 0x44
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4419      	add	r1, r3
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	1a9b      	subs	r3, r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4403      	add	r3, r0
 800217e:	3348      	adds	r3, #72	; 0x48
 8002180:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d113      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x31c>
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3350      	adds	r3, #80	; 0x50
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d108      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021a8:	461a      	mov	r2, r3
 80021aa:	2101      	movs	r1, #1
 80021ac:	f003 faa0 	bl	80056f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f007 ffa9 	bl	800a10e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d2:	461a      	mov	r2, r3
 80021d4:	2308      	movs	r3, #8
 80021d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	015a      	lsls	r2, r3, #5
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ee:	461a      	mov	r2, r3
 80021f0:	2310      	movs	r3, #16
 80021f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220a:	461a      	mov	r2, r3
 800220c:	2340      	movs	r3, #64	; 0x40
 800220e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002226:	461a      	mov	r2, r3
 8002228:	2302      	movs	r3, #2
 800222a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fc1b 	bl	8002a74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	3301      	adds	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	f47f af49 	bne.w	80020e4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f985 	bl	8005566 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002266:	d122      	bne.n	80022ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800228e:	2100      	movs	r1, #0
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fe27 	bl	8002ee4 <HAL_PCDEx_LPM_Callback>
 8002296:	e002      	b.n	800229e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f007 ffa5 	bl	800a1e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 f957 	bl	8005566 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c2:	d112      	bne.n	80022ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d102      	bne.n	80022da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f007 ff61 	bl	800a19c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022e8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 f939 	bl	8005566 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fe:	f040 80c7 	bne.w	8002490 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2110      	movs	r1, #16
 800231c:	4618      	mov	r0, r3
 800231e:	f002 f9d3 	bl	80046c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002326:	e056      	b.n	80023d6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002334:	461a      	mov	r2, r3
 8002336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800233a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234c:	0151      	lsls	r1, r2, #5
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	440a      	add	r2, r1
 8002352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800235a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236c:	0151      	lsls	r1, r2, #5
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	440a      	add	r2, r1
 8002372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800237a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800238e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c0:	0151      	lsls	r1, r2, #5
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	440a      	add	r2, r1
 80023c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	3301      	adds	r3, #1
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3a3      	bcc.n	8002328 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800240c:	f043 030b 	orr.w	r3, r3, #11
 8002410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002422:	f043 030b 	orr.w	r3, r3, #11
 8002426:	6453      	str	r3, [r2, #68]	; 0x44
 8002428:	e015      	b.n	8002456 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800243c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002440:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002450:	f043 030b 	orr.w	r3, r3, #11
 8002454:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002464:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002468:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800247a:	461a      	mov	r2, r3
 800247c:	f003 f938 	bl	80056f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 f866 	bl	8005566 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d124      	bne.n	80024f0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 f8fc 	bl	80056a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 f964 	bl	8004782 <USB_GetDevSpeed>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681c      	ldr	r4, [r3, #0]
 80024c6:	f001 f92d 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 80024ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	4620      	mov	r0, r4
 80024d6:	f001 fe83 	bl	80041e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f007 fe3f 	bl	800a15e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f836 	bl	8005566 <USB_ReadInterrupts>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b08      	cmp	r3, #8
 8002502:	d10a      	bne.n	800251a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f007 fe1c 	bl	800a142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	695a      	ldr	r2, [r3, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f002 0208 	and.w	r2, r2, #8
 8002518:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 f821 	bl	8005566 <USB_ReadInterrupts>
 8002524:	4603      	mov	r3, r0
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800252e:	d10f      	bne.n	8002550 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f007 fe74 	bl	800a228 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800254e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f003 f806 	bl	8005566 <USB_ReadInterrupts>
 800255a:	4603      	mov	r3, r0
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002564:	d10f      	bne.n	8002586 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f007 fe47 	bl	800a204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 ffeb 	bl	8005566 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259a:	d10a      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f007 fe55 	bl	800a24c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 ffd5 	bl	8005566 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d115      	bne.n	80025f2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f007 fe45 	bl	800a268 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	e000      	b.n	80025f2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80025f0:	bf00      	nop
    }
  }
}
 80025f2:	3734      	adds	r7, #52	; 0x34
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_PCD_SetAddress+0x1a>
 800260e:	2302      	movs	r3, #2
 8002610:	e013      	b.n	800263a <HAL_PCD_SetAddress+0x42>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f002 ff33 	bl	8005496 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	4608      	mov	r0, r1
 800264c:	4611      	mov	r1, r2
 800264e:	461a      	mov	r2, r3
 8002650:	4603      	mov	r3, r0
 8002652:	70fb      	strb	r3, [r7, #3]
 8002654:	460b      	mov	r3, r1
 8002656:	803b      	strh	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002664:	2b00      	cmp	r3, #0
 8002666:	da0f      	bge.n	8002688 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	3338      	adds	r3, #56	; 0x38
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	3304      	adds	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	705a      	strb	r2, [r3, #1]
 8002686:	e00f      	b.n	80026a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 020f 	and.w	r2, r3, #15
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026b4:	883a      	ldrh	r2, [r7, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	78ba      	ldrb	r2, [r7, #2]
 80026be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026d2:	78bb      	ldrb	r3, [r7, #2]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d102      	bne.n	80026de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_PCD_EP_Open+0xaa>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e00e      	b.n	800270a <HAL_PCD_EP_Open+0xc8>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68f9      	ldr	r1, [r7, #12]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 f866 	bl	80047cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002708:	7afb      	ldrb	r3, [r7, #11]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800271e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da0f      	bge.n	8002746 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	f003 020f 	and.w	r2, r3, #15
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	3338      	adds	r3, #56	; 0x38
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4413      	add	r3, r2
 800273a:	3304      	adds	r3, #4
 800273c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	705a      	strb	r2, [r3, #1]
 8002744:	e00f      	b.n	8002766 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	f003 020f 	and.w	r2, r3, #15
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	4413      	add	r3, r2
 800275c:	3304      	adds	r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	b2da      	uxtb	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_PCD_EP_Close+0x6e>
 800277c:	2302      	movs	r3, #2
 800277e:	e00e      	b.n	800279e <HAL_PCD_EP_Close+0x8c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	4618      	mov	r0, r3
 8002790:	f002 f8a4 	bl	80048dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	460b      	mov	r3, r1
 80027b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b6:	7afb      	ldrb	r3, [r7, #11]
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002802:	7afb      	ldrb	r3, [r7, #11]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	6979      	ldr	r1, [r7, #20]
 800281a:	f002 fb7f 	bl	8004f1c <USB_EP0StartXfer>
 800281e:	e008      	b.n	8002832 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	6979      	ldr	r1, [r7, #20]
 800282e:	f002 f931 	bl	8004a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	460b      	mov	r3, r1
 800287a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	3338      	adds	r3, #56	; 0x38
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	3304      	adds	r3, #4
 8002892:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2201      	movs	r2, #1
 80028aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c6:	7afb      	ldrb	r3, [r7, #11]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6979      	ldr	r1, [r7, #20]
 80028de:	f002 fb1d 	bl	8004f1c <USB_EP0StartXfer>
 80028e2:	e008      	b.n	80028f6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	f002 f8cf 	bl	8004a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	f003 020f 	and.w	r2, r3, #15
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d901      	bls.n	800291e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e050      	b.n	80029c0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800291e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da0f      	bge.n	8002946 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
 8002944:	e00d      	b.n	8002962 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	4413      	add	r3, r2
 8002958:	3304      	adds	r3, #4
 800295a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_PCD_EP_SetStall+0x82>
 800297e:	2302      	movs	r3, #2
 8002980:	e01e      	b.n	80029c0 <HAL_PCD_EP_SetStall+0xc0>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	4618      	mov	r0, r3
 8002992:	f002 fcac 	bl	80052ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	b2d9      	uxtb	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029b0:	461a      	mov	r2, r3
 80029b2:	f002 fe9d 	bl	80056f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 020f 	and.w	r2, r3, #15
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d901      	bls.n	80029e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e042      	b.n	8002a6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da0f      	bge.n	8002a0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	f003 020f 	and.w	r2, r3, #15
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3338      	adds	r3, #56	; 0x38
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	705a      	strb	r2, [r3, #1]
 8002a0c:	e00f      	b.n	8002a2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	1a9b      	subs	r3, r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	3304      	adds	r3, #4
 8002a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_PCD_EP_ClrStall+0x86>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e00e      	b.n	8002a6c <HAL_PCD_EP_ClrStall+0xa4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68f9      	ldr	r1, [r7, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fcb4 	bl	80053ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	3338      	adds	r3, #56	; 0x38
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	3304      	adds	r3, #4
 8002a9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d901      	bls.n	8002aac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e06c      	b.n	8002b86 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d902      	bls.n	8002ac8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3303      	adds	r3, #3
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad0:	e02b      	b.n	8002b2a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d902      	bls.n	8002aee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3303      	adds	r3, #3
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68d9      	ldr	r1, [r3, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f002 fb58 	bl	80051c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	441a      	add	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d809      	bhi.n	8002b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d203      	bcs.n	8002b54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1be      	bne.n	8002ad2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d811      	bhi.n	8002b84 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	2201      	movs	r2, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	6939      	ldr	r1, [r7, #16]
 8002b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b80:	4013      	ands	r3, r2
 8002b82:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	333c      	adds	r3, #60	; 0x3c
 8002ba8:	3304      	adds	r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	f040 80a0 	bne.w	8002d08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a72      	ldr	r2, [pc, #456]	; (8002da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	f240 80dd 	bls.w	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80d7 	beq.w	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bfa:	6093      	str	r3, [r2, #8]
 8002bfc:	e0cb      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d009      	beq.n	8002c1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c14:	461a      	mov	r2, r3
 8002c16:	2320      	movs	r3, #32
 8002c18:	6093      	str	r3, [r2, #8]
 8002c1a:	e0bc      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80b7 	bne.w	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a5d      	ldr	r2, [pc, #372]	; (8002da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d90f      	bls.n	8002c50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	461a      	mov	r2, r3
 8002c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4c:	6093      	str	r3, [r2, #8]
 8002c4e:	e0a2      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002c76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4403      	add	r3, r0
 8002c86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4403      	add	r3, r0
 8002cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4419      	add	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4403      	add	r3, r0
 8002cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cc8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d114      	bne.n	8002cfa <PCD_EP_OutXfrComplete_int+0x16a>
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	f002 fcfb 	bl	80056f0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f007 f9e9 	bl	800a0d8 <HAL_PCD_DataOutStageCallback>
 8002d06:	e046      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <PCD_EP_OutXfrComplete_int+0x214>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d124      	bne.n	8002d5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d26:	461a      	mov	r2, r3
 8002d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2c:	6093      	str	r3, [r2, #8]
 8002d2e:	e032      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	461a      	mov	r2, r3
 8002d48:	2320      	movs	r3, #32
 8002d4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f007 f9c0 	bl	800a0d8 <HAL_PCD_DataOutStageCallback>
 8002d58:	e01d      	b.n	8002d96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d114      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d82:	461a      	mov	r2, r3
 8002d84:	2100      	movs	r1, #0
 8002d86:	f002 fcb3 	bl	80056f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f007 f9a1 	bl	800a0d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	4f54300a 	.word	0x4f54300a
 8002da4:	4f54310a 	.word	0x4f54310a

08002da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	333c      	adds	r3, #60	; 0x3c
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d90e      	bls.n	8002dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df4:	461a      	mov	r2, r3
 8002df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f007 f959 	bl	800a0b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90c      	bls.n	8002e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d108      	bne.n	8002e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2101      	movs	r1, #1
 8002e20:	f002 fc66 	bl	80056f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	4f54300a 	.word	0x4f54300a

08002e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d107      	bne.n	8002e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e52:	883b      	ldrh	r3, [r7, #0]
 8002e54:	0419      	lsls	r1, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e60:	e028      	b.n	8002eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	0c1b      	lsrs	r3, r3, #16
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e00d      	b.n	8002e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3340      	adds	r3, #64	; 0x40
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d3ec      	bcc.n	8002e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e9c:	883b      	ldrh	r3, [r7, #0]
 8002e9e:	0418      	lsls	r0, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	4302      	orrs	r2, r0
 8002eac:	3340      	adds	r3, #64	; 0x40
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	887a      	ldrh	r2, [r7, #2]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e264      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d075      	beq.n	8003006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1a:	4ba3      	ldr	r3, [pc, #652]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e23f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x74>
 8002f62:	4b91      	ldr	r3, [pc, #580]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a90      	ldr	r2, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a8a      	ldr	r2, [pc, #552]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a87      	ldr	r2, [pc, #540]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a80      	ldr	r2, [pc, #512]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fa10 	bl	80013d8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fa0c 	bl	80013d8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e204      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f9fc 	bl	80013d8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f9f8 	bl	80013d8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1f0      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1c4      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4952      	ldr	r1, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <HAL_RCC_OscConfig+0x2b0>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f9b1 	bl	80013d8 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe f9ad 	bl	80013d8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1a5      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4940      	ldr	r1, [pc, #256]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCC_OscConfig+0x2b0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f990 	bl	80013d8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe f98c 	bl	80013d8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e184      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d030      	beq.n	8003148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x2b4>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe f970 	bl	80013d8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe f96c 	bl	80013d8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e164      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x200>
 800311a:	e015      	b.n	8003148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x2b4>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe f959 	bl	80013d8 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe f955 	bl	80013d8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e14d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a0 	beq.w	8003296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d121      	bne.n	80031d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe f91b 	bl	80013d8 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e011      	b.n	80031ca <HAL_RCC_OscConfig+0x2ce>
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
 80031b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fe f90e 	bl	80013d8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e106      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b85      	ldr	r3, [pc, #532]	; (80033e0 <HAL_RCC_OscConfig+0x4e4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x2f0>
 80031de:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a80      	ldr	r2, [pc, #512]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	e01c      	b.n	8003226 <HAL_RCC_OscConfig+0x32a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 80031f4:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003200:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0x32a>
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a74      	ldr	r2, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d015      	beq.n	800325a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe f8d3 	bl	80013d8 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe f8cf 	bl	80013d8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0c5      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ee      	beq.n	8003236 <HAL_RCC_OscConfig+0x33a>
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe f8bd 	bl	80013d8 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe f8b9 	bl	80013d8 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0af      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	4b5a      	ldr	r3, [pc, #360]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ee      	bne.n	8003262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b56      	ldr	r3, [pc, #344]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 809b 	beq.w	80033d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a0:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d05c      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d141      	bne.n	8003338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x4ec>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe f88d 	bl	80013d8 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe f889 	bl	80013d8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e081      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	4937      	ldr	r1, [pc, #220]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330a:	4b37      	ldr	r3, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x4ec>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe f862 	bl	80013d8 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe f85e 	bl	80013d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e056      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x41c>
 8003336:	e04e      	b.n	80033d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x4ec>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe f84b 	bl	80013d8 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fe f847 	bl	80013d8 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e03f      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x44a>
 8003364:	e037      	b.n	80033d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e032      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d028      	beq.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d121      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d11a      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40007000 	.word	0x40007000
 80033e4:	40023800 	.word	0x40023800
 80033e8:	42470060 	.word	0x42470060

080033ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003400:	4b68      	ldr	r3, [pc, #416]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90c      	bls.n	8003428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e067      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4934      	ldr	r1, [pc, #208]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7fd ff7c 	bl	80013d8 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fd ff78 	bl	80013d8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800350c:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d20c      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fe2c 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800a8f8 	.word	0x0800a8f8
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035be:	2100      	movs	r1, #0
 80035c0:	6079      	str	r1, [r7, #4]
 80035c2:	2100      	movs	r1, #0
 80035c4:	60f9      	str	r1, [r7, #12]
 80035c6:	2100      	movs	r1, #0
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035ca:	2100      	movs	r1, #0
 80035cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ce:	4952      	ldr	r1, [pc, #328]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 80035d0:	6889      	ldr	r1, [r1, #8]
 80035d2:	f001 010c 	and.w	r1, r1, #12
 80035d6:	2908      	cmp	r1, #8
 80035d8:	d00d      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80035da:	2908      	cmp	r1, #8
 80035dc:	f200 8094 	bhi.w	8003708 <HAL_RCC_GetSysClockFreq+0x150>
 80035e0:	2900      	cmp	r1, #0
 80035e2:	d002      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x32>
 80035e4:	2904      	cmp	r1, #4
 80035e6:	d003      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x38>
 80035e8:	e08e      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCC_GetSysClockFreq+0x164>)
 80035ec:	60bb      	str	r3, [r7, #8]
       break;
 80035ee:	e08e      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_GetSysClockFreq+0x168>)
 80035f2:	60bb      	str	r3, [r7, #8]
      break;
 80035f4:	e08b      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f6:	4948      	ldr	r1, [pc, #288]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 80035f8:	6849      	ldr	r1, [r1, #4]
 80035fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003600:	4945      	ldr	r1, [pc, #276]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 8003602:	6849      	ldr	r1, [r1, #4]
 8003604:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003608:	2900      	cmp	r1, #0
 800360a:	d024      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360c:	4942      	ldr	r1, [pc, #264]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 800360e:	6849      	ldr	r1, [r1, #4]
 8003610:	0989      	lsrs	r1, r1, #6
 8003612:	4608      	mov	r0, r1
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f240 14ff 	movw	r4, #511	; 0x1ff
 800361c:	f04f 0500 	mov.w	r5, #0
 8003620:	ea00 0204 	and.w	r2, r0, r4
 8003624:	ea01 0305 	and.w	r3, r1, r5
 8003628:	493d      	ldr	r1, [pc, #244]	; (8003720 <HAL_RCC_GetSysClockFreq+0x168>)
 800362a:	fb01 f003 	mul.w	r0, r1, r3
 800362e:	2100      	movs	r1, #0
 8003630:	fb01 f102 	mul.w	r1, r1, r2
 8003634:	1844      	adds	r4, r0, r1
 8003636:	493a      	ldr	r1, [pc, #232]	; (8003720 <HAL_RCC_GetSysClockFreq+0x168>)
 8003638:	fba2 0101 	umull	r0, r1, r2, r1
 800363c:	1863      	adds	r3, r4, r1
 800363e:	4619      	mov	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	461a      	mov	r2, r3
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	f7fc fdca 	bl	80001e0 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e04a      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	461a      	mov	r2, r3
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003666:	f04f 0100 	mov.w	r1, #0
 800366a:	ea02 0400 	and.w	r4, r2, r0
 800366e:	ea03 0501 	and.w	r5, r3, r1
 8003672:	4620      	mov	r0, r4
 8003674:	4629      	mov	r1, r5
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	014b      	lsls	r3, r1, #5
 8003680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003684:	0142      	lsls	r2, r0, #5
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	1b00      	subs	r0, r0, r4
 800368c:	eb61 0105 	sbc.w	r1, r1, r5
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	018b      	lsls	r3, r1, #6
 800369a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800369e:	0182      	lsls	r2, r0, #6
 80036a0:	1a12      	subs	r2, r2, r0
 80036a2:	eb63 0301 	sbc.w	r3, r3, r1
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	00d9      	lsls	r1, r3, #3
 80036b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036b4:	00d0      	lsls	r0, r2, #3
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	1912      	adds	r2, r2, r4
 80036bc:	eb45 0303 	adc.w	r3, r5, r3
 80036c0:	f04f 0000 	mov.w	r0, #0
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	0299      	lsls	r1, r3, #10
 80036ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036ce:	0290      	lsls	r0, r2, #10
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f7fc fd7e 	bl	80001e0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	3301      	adds	r3, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	60bb      	str	r3, [r7, #8]
      break;
 8003706:	e002      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCC_GetSysClockFreq+0x164>)
 800370a:	60bb      	str	r3, [r7, #8]
      break;
 800370c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370e:	68bb      	ldr	r3, [r7, #8]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bdb0      	pop	{r4, r5, r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	017d7840 	.word	0x017d7840

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000000 	.word	0x20000000

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003740:	f7ff fff0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	0800a908 	.word	0x0800a908

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003768:	f7ff ffdc 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0b5b      	lsrs	r3, r3, #13
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	0800a908 	.word	0x0800a908

0800378c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	220f      	movs	r2, #15
 800379a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	08db      	lsrs	r3, r3, #3
 80037c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RCC_GetClockConfig+0x60>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40023c00 	.word	0x40023c00

080037f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e041      	b.n	8003886 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f839 	bl	800388e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 f9ca 	bl	8003bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d001      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e044      	b.n	8003946 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_TIM_Base_Start_IT+0xb0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d018      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x6c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d013      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x6c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_TIM_Base_Start_IT+0xb4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x6c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <HAL_TIM_Base_Start_IT+0xb8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x6c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_TIM_Base_Start_IT+0xbc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d004      	beq.n	8003910 <HAL_TIM_Base_Start_IT+0x6c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a16      	ldr	r2, [pc, #88]	; (8003964 <HAL_TIM_Base_Start_IT+0xc0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d111      	bne.n	8003934 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b06      	cmp	r3, #6
 8003920:	d010      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	e007      	b.n	8003944 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010000 	.word	0x40010000
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40014000 	.word	0x40014000

08003968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d122      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b02      	cmp	r3, #2
 800398a:	d11b      	bne.n	80039c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0202 	mvn.w	r2, #2
 8003994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8ee 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8e0 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8f1 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d122      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d11b      	bne.n	8003a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f06f 0204 	mvn.w	r2, #4
 80039e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8c4 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003a04:	e005      	b.n	8003a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8b6 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8c7 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d122      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d11b      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0208 	mvn.w	r2, #8
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f89a 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f88c 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f89d 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0210 	mvn.w	r2, #16
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2208      	movs	r2, #8
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f870 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f862 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f873 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0201 	mvn.w	r2, #1
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd faae 	bl	8001048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b80      	cmp	r3, #128	; 0x80
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b80      	cmp	r3, #128	; 0x80
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8e2 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b40      	cmp	r3, #64	; 0x40
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f838 	bl	8003bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0220 	mvn.w	r2, #32
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8ac 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <TIM_Base_SetConfig+0xe4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_Base_SetConfig+0x38>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d00b      	beq.n	8003c00 <TIM_Base_SetConfig+0x38>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a31      	ldr	r2, [pc, #196]	; (8003cb0 <TIM_Base_SetConfig+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_Base_SetConfig+0x38>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a30      	ldr	r2, [pc, #192]	; (8003cb4 <TIM_Base_SetConfig+0xec>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_Base_SetConfig+0x38>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2f      	ldr	r2, [pc, #188]	; (8003cb8 <TIM_Base_SetConfig+0xf0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d108      	bne.n	8003c12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a25      	ldr	r2, [pc, #148]	; (8003cac <TIM_Base_SetConfig+0xe4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <TIM_Base_SetConfig+0xe8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <TIM_Base_SetConfig+0xec>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <TIM_Base_SetConfig+0xf0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <TIM_Base_SetConfig+0xf4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <TIM_Base_SetConfig+0xf8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x8a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <TIM_Base_SetConfig+0xfc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a08      	ldr	r2, [pc, #32]	; (8003cac <TIM_Base_SetConfig+0xe4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40014400 	.word	0x40014400
 8003cc4:	40014800 	.word	0x40014800

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e03f      	b.n	8003d82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fa22 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f829 	bl	8003d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d90:	b09f      	sub	sp, #124	; 0x7c
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da2:	68d9      	ldr	r1, [r3, #12]
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	ea40 0301 	orr.w	r3, r0, r1
 8003dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd0:	f021 010c 	bic.w	r1, r1, #12
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	6999      	ldr	r1, [r3, #24]
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	ea40 0301 	orr.w	r3, r0, r1
 8003df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4bc5      	ldr	r3, [pc, #788]	; (8004110 <UART_SetConfig+0x384>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d004      	beq.n	8003e0a <UART_SetConfig+0x7e>
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4bc3      	ldr	r3, [pc, #780]	; (8004114 <UART_SetConfig+0x388>)
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d103      	bne.n	8003e12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0a:	f7ff fcab 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8003e0e:	6778      	str	r0, [r7, #116]	; 0x74
 8003e10:	e002      	b.n	8003e18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e12:	f7ff fc93 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8003e16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e20:	f040 80b6 	bne.w	8003f90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e26:	461c      	mov	r4, r3
 8003e28:	f04f 0500 	mov.w	r5, #0
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	462b      	mov	r3, r5
 8003e30:	1891      	adds	r1, r2, r2
 8003e32:	6439      	str	r1, [r7, #64]	; 0x40
 8003e34:	415b      	adcs	r3, r3
 8003e36:	647b      	str	r3, [r7, #68]	; 0x44
 8003e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e3c:	1912      	adds	r2, r2, r4
 8003e3e:	eb45 0303 	adc.w	r3, r5, r3
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	00d9      	lsls	r1, r3, #3
 8003e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e50:	00d0      	lsls	r0, r2, #3
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	1911      	adds	r1, r2, r4
 8003e58:	6639      	str	r1, [r7, #96]	; 0x60
 8003e5a:	416b      	adcs	r3, r5
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e78:	f7fc f9b2 	bl	80001e0 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4ba5      	ldr	r3, [pc, #660]	; (8004118 <UART_SetConfig+0x38c>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011e      	lsls	r6, r3, #4
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	f04f 0500 	mov.w	r5, #0
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	6339      	str	r1, [r7, #48]	; 0x30
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ea2:	1912      	adds	r2, r2, r4
 8003ea4:	eb45 0303 	adc.w	r3, r5, r3
 8003ea8:	f04f 0000 	mov.w	r0, #0
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	00d9      	lsls	r1, r3, #3
 8003eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eb6:	00d0      	lsls	r0, r2, #3
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	1911      	adds	r1, r2, r4
 8003ebe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ec0:	416b      	adcs	r3, r5
 8003ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	1891      	adds	r1, r2, r2
 8003ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ede:	f7fc f97f 	bl	80001e0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <UART_SetConfig+0x38c>)
 8003ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2164      	movs	r1, #100	; 0x64
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a87      	ldr	r2, [pc, #540]	; (8004118 <UART_SetConfig+0x38c>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f08:	441e      	add	r6, r3
 8003f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	1894      	adds	r4, r2, r2
 8003f18:	623c      	str	r4, [r7, #32]
 8003f1a:	415b      	adcs	r3, r3
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f22:	1812      	adds	r2, r2, r0
 8003f24:	eb41 0303 	adc.w	r3, r1, r3
 8003f28:	f04f 0400 	mov.w	r4, #0
 8003f2c:	f04f 0500 	mov.w	r5, #0
 8003f30:	00dd      	lsls	r5, r3, #3
 8003f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f36:	00d4      	lsls	r4, r2, #3
 8003f38:	4622      	mov	r2, r4
 8003f3a:	462b      	mov	r3, r5
 8003f3c:	1814      	adds	r4, r2, r0
 8003f3e:	653c      	str	r4, [r7, #80]	; 0x50
 8003f40:	414b      	adcs	r3, r1
 8003f42:	657b      	str	r3, [r7, #84]	; 0x54
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	1891      	adds	r1, r2, r2
 8003f50:	61b9      	str	r1, [r7, #24]
 8003f52:	415b      	adcs	r3, r3
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f5e:	f7fc f93f 	bl	80001e0 <__aeabi_uldivmod>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <UART_SetConfig+0x38c>)
 8003f68:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	2164      	movs	r1, #100	; 0x64
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	3332      	adds	r3, #50	; 0x32
 8003f7a:	4a67      	ldr	r2, [pc, #412]	; (8004118 <UART_SetConfig+0x38c>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	f003 0207 	and.w	r2, r3, #7
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4432      	add	r2, r6
 8003f8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f8e:	e0b9      	b.n	8004104 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f92:	461c      	mov	r4, r3
 8003f94:	f04f 0500 	mov.w	r5, #0
 8003f98:	4622      	mov	r2, r4
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	6139      	str	r1, [r7, #16]
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fa8:	1912      	adds	r2, r2, r4
 8003faa:	eb45 0303 	adc.w	r3, r5, r3
 8003fae:	f04f 0000 	mov.w	r0, #0
 8003fb2:	f04f 0100 	mov.w	r1, #0
 8003fb6:	00d9      	lsls	r1, r3, #3
 8003fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fbc:	00d0      	lsls	r0, r2, #3
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	eb12 0804 	adds.w	r8, r2, r4
 8003fc6:	eb43 0905 	adc.w	r9, r3, r5
 8003fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	008b      	lsls	r3, r1, #2
 8003fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fe2:	0082      	lsls	r2, r0, #2
 8003fe4:	4640      	mov	r0, r8
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	f7fc f8fa 	bl	80001e0 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4b49      	ldr	r3, [pc, #292]	; (8004118 <UART_SetConfig+0x38c>)
 8003ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	011e      	lsls	r6, r3, #4
 8003ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	1894      	adds	r4, r2, r2
 8004008:	60bc      	str	r4, [r7, #8]
 800400a:	415b      	adcs	r3, r3
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004012:	1812      	adds	r2, r2, r0
 8004014:	eb41 0303 	adc.w	r3, r1, r3
 8004018:	f04f 0400 	mov.w	r4, #0
 800401c:	f04f 0500 	mov.w	r5, #0
 8004020:	00dd      	lsls	r5, r3, #3
 8004022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004026:	00d4      	lsls	r4, r2, #3
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	1814      	adds	r4, r2, r0
 800402e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004030:	414b      	adcs	r3, r1
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	008b      	lsls	r3, r1, #2
 8004048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800404c:	0082      	lsls	r2, r0, #2
 800404e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004052:	f7fc f8c5 	bl	80001e0 <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <UART_SetConfig+0x38c>)
 800405c:	fba3 1302 	umull	r1, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2164      	movs	r1, #100	; 0x64
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	3332      	adds	r3, #50	; 0x32
 800406e:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <UART_SetConfig+0x38c>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407a:	441e      	add	r6, r3
 800407c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407e:	4618      	mov	r0, r3
 8004080:	f04f 0100 	mov.w	r1, #0
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	1894      	adds	r4, r2, r2
 800408a:	603c      	str	r4, [r7, #0]
 800408c:	415b      	adcs	r3, r3
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004094:	1812      	adds	r2, r2, r0
 8004096:	eb41 0303 	adc.w	r3, r1, r3
 800409a:	f04f 0400 	mov.w	r4, #0
 800409e:	f04f 0500 	mov.w	r5, #0
 80040a2:	00dd      	lsls	r5, r3, #3
 80040a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040a8:	00d4      	lsls	r4, r2, #3
 80040aa:	4622      	mov	r2, r4
 80040ac:	462b      	mov	r3, r5
 80040ae:	eb12 0a00 	adds.w	sl, r2, r0
 80040b2:	eb43 0b01 	adc.w	fp, r3, r1
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040ce:	0082      	lsls	r2, r0, #2
 80040d0:	4650      	mov	r0, sl
 80040d2:	4659      	mov	r1, fp
 80040d4:	f7fc f884 	bl	80001e0 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <UART_SetConfig+0x38c>)
 80040de:	fba3 1302 	umull	r1, r3, r3, r2
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2164      	movs	r1, #100	; 0x64
 80040e6:	fb01 f303 	mul.w	r3, r1, r3
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	3332      	adds	r3, #50	; 0x32
 80040f0:	4a09      	ldr	r2, [pc, #36]	; (8004118 <UART_SetConfig+0x38c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	f003 020f 	and.w	r2, r3, #15
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4432      	add	r2, r6
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	377c      	adds	r7, #124	; 0x7c
 8004108:	46bd      	mov	sp, r7
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410e:	bf00      	nop
 8004110:	40011000 	.word	0x40011000
 8004114:	40011400 	.word	0x40011400
 8004118:	51eb851f 	.word	0x51eb851f

0800411c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800411c:	b084      	sub	sp, #16
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	f107 001c 	add.w	r0, r7, #28
 800412a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	2b01      	cmp	r3, #1
 8004132:	d122      	bne.n	800417a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fb1c 	bl	80057ac <USB_CoreReset>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e01a      	b.n	80041b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 fb10 	bl	80057ac <USB_CoreReset>
 800418c:	4603      	mov	r3, r0
 800418e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
 80041a2:	e005      	b.n	80041b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d10b      	bne.n	80041ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f043 0206 	orr.w	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f043 0220 	orr.w	r2, r3, #32
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041da:	b004      	add	sp, #16
 80041dc:	4770      	bx	lr
	...

080041e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d165      	bne.n	80042c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a41      	ldr	r2, [pc, #260]	; (80042fc <USB_SetTurnaroundTime+0x11c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d906      	bls.n	800420a <USB_SetTurnaroundTime+0x2a>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <USB_SetTurnaroundTime+0x120>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d202      	bcs.n	800420a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004204:	230f      	movs	r3, #15
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e062      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <USB_SetTurnaroundTime+0x120>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d306      	bcc.n	8004220 <USB_SetTurnaroundTime+0x40>
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <USB_SetTurnaroundTime+0x124>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d202      	bcs.n	8004220 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800421a:	230e      	movs	r3, #14
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e057      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a38      	ldr	r2, [pc, #224]	; (8004304 <USB_SetTurnaroundTime+0x124>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d306      	bcc.n	8004236 <USB_SetTurnaroundTime+0x56>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4a37      	ldr	r2, [pc, #220]	; (8004308 <USB_SetTurnaroundTime+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d202      	bcs.n	8004236 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004230:	230d      	movs	r3, #13
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	e04c      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4a33      	ldr	r2, [pc, #204]	; (8004308 <USB_SetTurnaroundTime+0x128>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d306      	bcc.n	800424c <USB_SetTurnaroundTime+0x6c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a32      	ldr	r2, [pc, #200]	; (800430c <USB_SetTurnaroundTime+0x12c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d802      	bhi.n	800424c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004246:	230c      	movs	r3, #12
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e041      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <USB_SetTurnaroundTime+0x12c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d906      	bls.n	8004262 <USB_SetTurnaroundTime+0x82>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4a2e      	ldr	r2, [pc, #184]	; (8004310 <USB_SetTurnaroundTime+0x130>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d802      	bhi.n	8004262 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800425c:	230b      	movs	r3, #11
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e036      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <USB_SetTurnaroundTime+0x130>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d906      	bls.n	8004278 <USB_SetTurnaroundTime+0x98>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	4a29      	ldr	r2, [pc, #164]	; (8004314 <USB_SetTurnaroundTime+0x134>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d802      	bhi.n	8004278 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004272:	230a      	movs	r3, #10
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e02b      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <USB_SetTurnaroundTime+0x134>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d906      	bls.n	800428e <USB_SetTurnaroundTime+0xae>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <USB_SetTurnaroundTime+0x138>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d202      	bcs.n	800428e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004288:	2309      	movs	r3, #9
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e020      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4a21      	ldr	r2, [pc, #132]	; (8004318 <USB_SetTurnaroundTime+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d306      	bcc.n	80042a4 <USB_SetTurnaroundTime+0xc4>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4a20      	ldr	r2, [pc, #128]	; (800431c <USB_SetTurnaroundTime+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d802      	bhi.n	80042a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800429e:	2308      	movs	r3, #8
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e015      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a1d      	ldr	r2, [pc, #116]	; (800431c <USB_SetTurnaroundTime+0x13c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d906      	bls.n	80042ba <USB_SetTurnaroundTime+0xda>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <USB_SetTurnaroundTime+0x140>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d202      	bcs.n	80042ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042b4:	2307      	movs	r3, #7
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e00a      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042ba:	2306      	movs	r3, #6
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e007      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042c6:	2309      	movs	r3, #9
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e001      	b.n	80042d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042cc:	2309      	movs	r3, #9
 80042ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	029b      	lsls	r3, r3, #10
 80042e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	00d8acbf 	.word	0x00d8acbf
 8004300:	00e4e1c0 	.word	0x00e4e1c0
 8004304:	00f42400 	.word	0x00f42400
 8004308:	01067380 	.word	0x01067380
 800430c:	011a499f 	.word	0x011a499f
 8004310:	01312cff 	.word	0x01312cff
 8004314:	014ca43f 	.word	0x014ca43f
 8004318:	016e3600 	.word	0x016e3600
 800431c:	01a6ab1f 	.word	0x01a6ab1f
 8004320:	01e84800 	.word	0x01e84800

08004324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d115      	bne.n	80043b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004396:	2001      	movs	r0, #1
 8004398:	f7fd f82a 	bl	80013f0 <HAL_Delay>
      ms++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 f972 	bl	800568c <USB_GetMode>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d01e      	beq.n	80043ec <USB_SetCurrentMode+0x84>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b31      	cmp	r3, #49	; 0x31
 80043b2:	d9f0      	bls.n	8004396 <USB_SetCurrentMode+0x2e>
 80043b4:	e01a      	b.n	80043ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d115      	bne.n	80043e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043c8:	2001      	movs	r0, #1
 80043ca:	f7fd f811 	bl	80013f0 <HAL_Delay>
      ms++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3301      	adds	r3, #1
 80043d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 f959 	bl	800568c <USB_GetMode>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <USB_SetCurrentMode+0x84>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b31      	cmp	r3, #49	; 0x31
 80043e4:	d9f0      	bls.n	80043c8 <USB_SetCurrentMode+0x60>
 80043e6:	e001      	b.n	80043ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e005      	b.n	80043f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b32      	cmp	r3, #50	; 0x32
 80043f0:	d101      	bne.n	80043f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004400:	b084      	sub	sp, #16
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800440e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	e009      	b.n	8004434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	3340      	adds	r3, #64	; 0x40
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	2200      	movs	r2, #0
 800442c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b0e      	cmp	r3, #14
 8004438:	d9f2      	bls.n	8004420 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11c      	bne.n	800447a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800444e:	f043 0302 	orr.w	r3, r3, #2
 8004452:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38
 8004478:	e00b      	b.n	8004492 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	4619      	mov	r1, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	461a      	mov	r2, r3
 80044ae:	680b      	ldr	r3, [r1, #0]
 80044b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d10c      	bne.n	80044d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044be:	2100      	movs	r1, #0
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f945 	bl	8004750 <USB_SetDevSpeed>
 80044c6:	e008      	b.n	80044da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044c8:	2101      	movs	r1, #1
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f940 	bl	8004750 <USB_SetDevSpeed>
 80044d0:	e003      	b.n	80044da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044d2:	2103      	movs	r1, #3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f93b 	bl	8004750 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044da:	2110      	movs	r1, #16
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8f3 	bl	80046c8 <USB_FlushTxFifo>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f90f 	bl	8004710 <USB_FlushRxFifo>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	461a      	mov	r2, r3
 8004504:	2300      	movs	r3, #0
 8004506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	461a      	mov	r2, r3
 8004510:	2300      	movs	r3, #0
 8004512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	461a      	mov	r2, r3
 800451c:	2300      	movs	r3, #0
 800451e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e043      	b.n	80045ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453c:	d118      	bne.n	8004570 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e013      	b.n	8004582 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	461a      	mov	r2, r3
 8004568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e008      	b.n	8004582 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	461a      	mov	r2, r3
 800457e:	2300      	movs	r3, #0
 8004580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	461a      	mov	r2, r3
 8004590:	2300      	movs	r3, #0
 8004592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	461a      	mov	r2, r3
 80045a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3301      	adds	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d3b7      	bcc.n	8004526 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e043      	b.n	8004644 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d2:	d118      	bne.n	8004606 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e013      	b.n	8004618 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e008      	b.n	8004618 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	461a      	mov	r2, r3
 8004626:	2300      	movs	r3, #0
 8004628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	461a      	mov	r2, r3
 8004638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800463c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3301      	adds	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	429a      	cmp	r2, r3
 800464a:	d3b7      	bcc.n	80045bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800466c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f043 0210 	orr.w	r2, r3, #16
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <USB_DevInit+0x2c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f043 0208 	orr.w	r2, r3, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800469e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d107      	bne.n	80046b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046c0:	b004      	add	sp, #16
 80046c2:	4770      	bx	lr
 80046c4:	803c3800 	.word	0x803c3800

080046c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	019b      	lsls	r3, r3, #6
 80046da:	f043 0220 	orr.w	r2, r3, #32
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	4a08      	ldr	r2, [pc, #32]	; (800470c <USB_FlushTxFifo+0x44>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e006      	b.n	8004700 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b20      	cmp	r3, #32
 80046fc:	d0f1      	beq.n	80046e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	00030d40 	.word	0x00030d40

08004710 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2210      	movs	r2, #16
 8004720:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3301      	adds	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <USB_FlushRxFifo+0x3c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e006      	b.n	8004740 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b10      	cmp	r3, #16
 800473c:	d0f1      	beq.n	8004722 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	00030d40 	.word	0x00030d40

08004750 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004770:	4313      	orrs	r3, r2
 8004772:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004782:	b480      	push	{r7}
 8004784:	b087      	sub	sp, #28
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0306 	and.w	r3, r3, #6
 800479a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047a2:	2300      	movs	r3, #0
 80047a4:	75fb      	strb	r3, [r7, #23]
 80047a6:	e00a      	b.n	80047be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d002      	beq.n	80047b4 <USB_GetDevSpeed+0x32>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d102      	bne.n	80047ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047b4:	2302      	movs	r3, #2
 80047b6:	75fb      	strb	r3, [r7, #23]
 80047b8:	e001      	b.n	80047be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047ba:	230f      	movs	r3, #15
 80047bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047be:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d13a      	bne.n	800485e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	2101      	movs	r1, #1
 80047fa:	fa01 f303 	lsl.w	r3, r1, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004806:	4313      	orrs	r3, r2
 8004808:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d155      	bne.n	80048cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	78db      	ldrb	r3, [r3, #3]
 800483a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800483c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004844:	4313      	orrs	r3, r2
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	0151      	lsls	r1, r2, #5
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	440a      	add	r2, r1
 800484e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e036      	b.n	80048cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4313      	orrs	r3, r2
 800487e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11a      	bne.n	80048cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	78db      	ldrb	r3, [r3, #3]
 80048b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048b2:	430b      	orrs	r3, r1
 80048b4:	4313      	orrs	r3, r2
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	0151      	lsls	r1, r2, #5
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	440a      	add	r2, r1
 80048be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d161      	bne.n	80049bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800490e:	d11f      	bne.n	8004950 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800492e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800494e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	2101      	movs	r1, #1
 8004962:	fa01 f303 	lsl.w	r3, r1, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	68f9      	ldr	r1, [r7, #12]
 800496c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004970:	4013      	ands	r3, r2
 8004972:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	b29b      	uxth	r3, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004994:	4013      	ands	r3, r2
 8004996:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	440b      	add	r3, r1
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	4619      	mov	r1, r3
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <USB_DeactivateEndpoint+0x1b0>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
 80049ba:	e060      	b.n	8004a7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049d2:	d11f      	bne.n	8004a14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a34:	4013      	ands	r3, r2
 8004a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	43db      	mvns	r3, r3
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	0159      	lsls	r1, r3, #5
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	440b      	add	r3, r1
 8004a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a76:	4619      	mov	r1, r3
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <USB_DeactivateEndpoint+0x1b4>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	ec337800 	.word	0xec337800
 8004a90:	eff37800 	.word	0xeff37800

08004a94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 815c 	bne.w	8004d6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d132      	bne.n	8004b24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004adc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	69fa      	ldr	r2, [r7, #28]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	0cdb      	lsrs	r3, r3, #19
 8004b1e:	04db      	lsls	r3, r3, #19
 8004b20:	6113      	str	r3, [r2, #16]
 8004b22:	e074      	b.n	8004c0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	0cdb      	lsrs	r3, r3, #19
 8004b40:	04db      	lsls	r3, r3, #19
 8004b42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6959      	ldr	r1, [r3, #20]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	440b      	add	r3, r1
 8004b80:	1e59      	subs	r1, r3, #1
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b8a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b8c:	4b9d      	ldr	r3, [pc, #628]	; (8004e04 <USB_EPStartXfer+0x370>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	0148      	lsls	r0, r1, #5
 8004b94:	69f9      	ldr	r1, [r7, #28]
 8004b96:	4401      	add	r1, r0
 8004b98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	69b9      	ldr	r1, [r7, #24]
 8004bb8:	0148      	lsls	r0, r1, #5
 8004bba:	69f9      	ldr	r1, [r7, #28]
 8004bbc:	4401      	add	r1, r0
 8004bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	78db      	ldrb	r3, [r3, #3]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d11f      	bne.n	8004c0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004bec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d14b      	bne.n	8004cac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	461a      	mov	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	78db      	ldrb	r3, [r3, #3]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d128      	bne.n	8004c8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d110      	bne.n	8004c6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e00f      	b.n	8004c8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e12f      	b.n	8004f0c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	78db      	ldrb	r3, [r3, #3]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d015      	beq.n	8004d00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8117 	beq.w	8004f0c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	69f9      	ldr	r1, [r7, #28]
 8004cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	634b      	str	r3, [r1, #52]	; 0x34
 8004cfe:	e105      	b.n	8004f0c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d110      	bne.n	8004d32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	e00f      	b.n	8004d52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	b298      	uxth	r0, r3
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4603      	mov	r3, r0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa2b 	bl	80051c2 <USB_WritePacket>
 8004d6c:	e0ce      	b.n	8004f0c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d88:	0cdb      	lsrs	r3, r3, #19
 8004d8a:	04db      	lsls	r3, r3, #19
 8004d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004db0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d126      	bne.n	8004e08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd0:	69b9      	ldr	r1, [r7, #24]
 8004dd2:	0148      	lsls	r0, r1, #5
 8004dd4:	69f9      	ldr	r1, [r7, #28]
 8004dd6:	4401      	add	r1, r0
 8004dd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dfe:	6113      	str	r3, [r2, #16]
 8004e00:	e036      	b.n	8004e70 <USB_EPStartXfer+0x3dc>
 8004e02:	bf00      	nop
 8004e04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	1e5a      	subs	r2, r3, #1
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	8afb      	ldrh	r3, [r7, #22]
 8004e2e:	04d9      	lsls	r1, r3, #19
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <USB_EPStartXfer+0x484>)
 8004e32:	400b      	ands	r3, r1
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	0148      	lsls	r0, r1, #5
 8004e38:	69f9      	ldr	r1, [r7, #28]
 8004e3a:	4401      	add	r1, r0
 8004e3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	8af9      	ldrh	r1, [r7, #22]
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	0148      	lsls	r0, r1, #5
 8004e64:	69f9      	ldr	r1, [r7, #28]
 8004e66:	4401      	add	r1, r0
 8004e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10d      	bne.n	8004e92 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	460a      	mov	r2, r1
 8004e90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	78db      	ldrb	r3, [r3, #3]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d128      	bne.n	8004eec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d110      	bne.n	8004ecc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	e00f      	b.n	8004eec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	1ff80000 	.word	0x1ff80000

08004f1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	f040 80cd 	bne.w	80050d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d132      	bne.n	8004fac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa4:	0cdb      	lsrs	r3, r3, #19
 8004fa6:	04db      	lsls	r3, r3, #19
 8004fa8:	6113      	str	r3, [r2, #16]
 8004faa:	e04e      	b.n	800504a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	0cdb      	lsrs	r3, r3, #19
 8004fc8:	04db      	lsls	r3, r3, #19
 8004fca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	695a      	ldr	r2, [r3, #20]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d903      	bls.n	8005004 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800501e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503a:	6939      	ldr	r1, [r7, #16]
 800503c:	0148      	lsls	r0, r1, #5
 800503e:	6979      	ldr	r1, [r7, #20]
 8005040:	4401      	add	r1, r0
 8005042:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d11e      	bne.n	800508e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	e092      	b.n	80051b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d07e      	beq.n	80051b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	2101      	movs	r1, #1
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	6979      	ldr	r1, [r7, #20]
 80050ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d2:	4313      	orrs	r3, r2
 80050d4:	634b      	str	r3, [r1, #52]	; 0x34
 80050d6:	e06d      	b.n	80051b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	0151      	lsls	r1, r2, #5
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	440a      	add	r2, r1
 80050ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f2:	0cdb      	lsrs	r3, r3, #19
 80050f4:	04db      	lsls	r3, r3, #19
 80050f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800511a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	0148      	lsls	r0, r1, #5
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	4401      	add	r1, r0
 800516a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10d      	bne.n	8005194 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	68d9      	ldr	r1, [r3, #12]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	460a      	mov	r2, r1
 8005192:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	0151      	lsls	r1, r2, #5
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	440a      	add	r2, r1
 80051aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b089      	sub	sp, #36	; 0x24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4611      	mov	r1, r2
 80051ce:	461a      	mov	r2, r3
 80051d0:	460b      	mov	r3, r1
 80051d2:	71fb      	strb	r3, [r7, #7]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d123      	bne.n	8005230 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051e8:	88bb      	ldrh	r3, [r7, #4]
 80051ea:	3303      	adds	r3, #3
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e018      	b.n	8005228 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	031a      	lsls	r2, r3, #12
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005202:	461a      	mov	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6013      	str	r3, [r2, #0]
      pSrc++;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3301      	adds	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	3301      	adds	r3, #1
 8005214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3301      	adds	r3, #1
 800521a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3301      	adds	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d3e2      	bcc.n	80051f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800523e:	b480      	push	{r7}
 8005240:	b08b      	sub	sp, #44	; 0x2c
 8005242:	af00      	add	r7, sp, #0
 8005244:	60f8      	str	r0, [r7, #12]
 8005246:	60b9      	str	r1, [r7, #8]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	089b      	lsrs	r3, r3, #2
 8005258:	b29b      	uxth	r3, r3
 800525a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005264:	2300      	movs	r3, #0
 8005266:	623b      	str	r3, [r7, #32]
 8005268:	e014      	b.n	8005294 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	601a      	str	r2, [r3, #0]
    pDest++;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	3301      	adds	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3301      	adds	r3, #1
 8005280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	3301      	adds	r3, #1
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3301      	adds	r3, #1
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	3301      	adds	r3, #1
 8005292:	623b      	str	r3, [r7, #32]
 8005294:	6a3a      	ldr	r2, [r7, #32]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3e6      	bcc.n	800526a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800529c:	8bfb      	ldrh	r3, [r7, #30]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01e      	beq.n	80052e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ac:	461a      	mov	r2, r3
 80052ae:	f107 0310 	add.w	r3, r7, #16
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	fa22 f303 	lsr.w	r3, r2, r3
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	701a      	strb	r2, [r3, #0]
      i++;
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3301      	adds	r3, #1
 80052cc:	623b      	str	r3, [r7, #32]
      pDest++;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	3301      	adds	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052d4:	8bfb      	ldrh	r3, [r7, #30]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1ea      	bne.n	80052b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	372c      	adds	r7, #44	; 0x2c
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d12c      	bne.n	8005364 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	db12      	blt.n	8005342 <USB_EPSetStall+0x54>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00f      	beq.n	8005342 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800533c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005340:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e02b      	b.n	80053bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	db12      	blt.n	800539c <USB_EPSetStall+0xae>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00f      	beq.n	800539c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800539a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d128      	bne.n	8005438 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005400:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005404:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d003      	beq.n	8005416 <USB_EPClearStall+0x4c>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d138      	bne.n	8005488 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e027      	b.n	8005488 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005456:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b03      	cmp	r3, #3
 800545e:	d003      	beq.n	8005468 <USB_EPClearStall+0x9e>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	78db      	ldrb	r3, [r3, #3]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d10f      	bne.n	8005488 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005486:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	460b      	mov	r3, r1
 80054a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054fc:	f023 0303 	bic.w	r3, r3, #3
 8005500:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005510:	f023 0302 	bic.w	r3, r3, #2
 8005514:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800553e:	f023 0303 	bic.w	r3, r3, #3
 8005542:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005552:	f043 0302 	orr.w	r3, r3, #2
 8005556:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	0c1b      	lsrs	r3, r3, #16
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	b29b      	uxth	r3, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005622:	68bb      	ldr	r3, [r7, #8]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
 8005660:	01db      	lsls	r3, r3, #7
 8005662:	b2db      	uxtb	r3, r3
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	015a      	lsls	r2, r3, #5
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4413      	add	r3, r2
 8005672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4013      	ands	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800567e:	68bb      	ldr	r3, [r7, #8]
}
 8005680:	4618      	mov	r0, r3
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0301 	and.w	r3, r3, #1
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056c6:	f023 0307 	bic.w	r3, r3, #7
 80056ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	460b      	mov	r3, r1
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	333c      	adds	r3, #60	; 0x3c
 8005706:	3304      	adds	r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <USB_EP0_OutStart+0xb8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d90a      	bls.n	800572a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005724:	d101      	bne.n	800572a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e037      	b.n	800579a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005730:	461a      	mov	r2, r3
 8005732:	2300      	movs	r3, #0
 8005734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005758:	f043 0318 	orr.w	r3, r3, #24
 800575c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800576c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005770:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10f      	bne.n	8005798 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005792:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	4f54300a 	.word	0x4f54300a

080057ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <USB_CoreReset+0x60>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e01a      	b.n	80057fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	daf3      	bge.n	80057b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3301      	adds	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <USB_CoreReset+0x60>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d0f1      	beq.n	80057e0 <USB_CoreReset+0x34>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	00030d40 	.word	0x00030d40

08005810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800581c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005820:	f004 feba 	bl	800a598 <USBD_static_malloc>
 8005824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005834:	2302      	movs	r3, #2
 8005836:	e066      	b.n	8005906 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7c1b      	ldrb	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d119      	bne.n	800587c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800584c:	2202      	movs	r2, #2
 800584e:	2181      	movs	r1, #129	; 0x81
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f004 fd7e 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800585c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005860:	2202      	movs	r2, #2
 8005862:	2101      	movs	r1, #1
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f004 fd74 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2210      	movs	r2, #16
 8005876:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800587a:	e016      	b.n	80058aa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	2202      	movs	r2, #2
 8005880:	2181      	movs	r1, #129	; 0x81
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f004 fd65 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	2202      	movs	r2, #2
 8005892:	2101      	movs	r1, #1
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f004 fd5c 	bl	800a352 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2210      	movs	r2, #16
 80058a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058aa:	2308      	movs	r3, #8
 80058ac:	2203      	movs	r2, #3
 80058ae:	2182      	movs	r1, #130	; 0x82
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f004 fd4e 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	7c1b      	ldrb	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ea:	2101      	movs	r1, #1
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f004 fe1f 	bl	800a530 <USBD_LL_PrepareReceive>
 80058f2:	e007      	b.n	8005904 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80058fa:	2340      	movs	r3, #64	; 0x40
 80058fc:	2101      	movs	r1, #1
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f004 fe16 	bl	800a530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800591a:	2181      	movs	r1, #129	; 0x81
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f004 fd3e 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005928:	2101      	movs	r1, #1
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f004 fd37 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005938:	2182      	movs	r1, #130	; 0x82
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f004 fd2f 	bl	800a39e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800596a:	4618      	mov	r0, r3
 800596c:	f004 fe22 	bl	800a5b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
	...

08005984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e0af      	b.n	8005b0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d03f      	beq.n	8005a38 <USBD_CDC_Setup+0xb4>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 809f 	bne.w	8005afc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	88db      	ldrh	r3, [r3, #6]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02e      	beq.n	8005a24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b25b      	sxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da16      	bge.n	80059fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80059dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	88d2      	ldrh	r2, [r2, #6]
 80059e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	2b07      	cmp	r3, #7
 80059ea:	bf28      	it	cs
 80059ec:	2307      	movcs	r3, #7
 80059ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	89fa      	ldrh	r2, [r7, #14]
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fae9 	bl	8006fce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80059fc:	e085      	b.n	8005b0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	785a      	ldrb	r2, [r3, #1]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	88db      	ldrh	r3, [r3, #6]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005a14:	6939      	ldr	r1, [r7, #16]
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	88db      	ldrh	r3, [r3, #6]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 fb02 	bl	8007026 <USBD_CtlPrepareRx>
      break;
 8005a22:	e072      	b.n	8005b0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	7850      	ldrb	r0, [r2, #1]
 8005a30:	2200      	movs	r2, #0
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	4798      	blx	r3
      break;
 8005a36:	e068      	b.n	8005b0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b0b      	cmp	r3, #11
 8005a3e:	d852      	bhi.n	8005ae6 <USBD_CDC_Setup+0x162>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <USBD_CDC_Setup+0xc4>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005af5 	.word	0x08005af5
 8005a50:	08005ae7 	.word	0x08005ae7
 8005a54:	08005ae7 	.word	0x08005ae7
 8005a58:	08005ae7 	.word	0x08005ae7
 8005a5c:	08005ae7 	.word	0x08005ae7
 8005a60:	08005ae7 	.word	0x08005ae7
 8005a64:	08005ae7 	.word	0x08005ae7
 8005a68:	08005ae7 	.word	0x08005ae7
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005aa3 	.word	0x08005aa3
 8005a74:	08005acd 	.word	0x08005acd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d107      	bne.n	8005a94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a84:	f107 030a 	add.w	r3, r7, #10
 8005a88:	2202      	movs	r2, #2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fa9e 	bl	8006fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a92:	e032      	b.n	8005afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fa28 	bl	8006eec <USBD_CtlError>
            ret = USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa0:	e02b      	b.n	8005afa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d107      	bne.n	8005abe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005aae:	f107 030d 	add.w	r3, r7, #13
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f001 fa89 	bl	8006fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005abc:	e01d      	b.n	8005afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fa13 	bl	8006eec <USBD_CtlError>
            ret = USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aca:	e016      	b.n	8005afa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d00f      	beq.n	8005af8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fa06 	bl	8006eec <USBD_CtlError>
            ret = USBD_FAIL;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ae4:	e008      	b.n	8005af8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f001 f9ff 	bl	8006eec <USBD_CtlError>
          ret = USBD_FAIL;
 8005aee:	2303      	movs	r3, #3
 8005af0:	75fb      	strb	r3, [r7, #23]
          break;
 8005af2:	e002      	b.n	8005afa <USBD_CDC_Setup+0x176>
          break;
 8005af4:	bf00      	nop
 8005af6:	e008      	b.n	8005b0a <USBD_CDC_Setup+0x186>
          break;
 8005af8:	bf00      	nop
      }
      break;
 8005afa:	e006      	b.n	8005b0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005afc:	6839      	ldr	r1, [r7, #0]
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 f9f4 	bl	8006eec <USBD_CtlError>
      ret = USBD_FAIL;
 8005b04:	2303      	movs	r3, #3
 8005b06:	75fb      	strb	r3, [r7, #23]
      break;
 8005b08:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005b26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e04f      	b.n	8005bd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d029      	beq.n	8005ba8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3318      	adds	r3, #24
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	78f9      	ldrb	r1, [r7, #3]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	1a5b      	subs	r3, r3, r1
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4403      	add	r3, r0
 8005b74:	3344      	adds	r3, #68	; 0x44
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b7c:	fb03 f301 	mul.w	r3, r3, r1
 8005b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d110      	bne.n	8005ba8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	3318      	adds	r3, #24
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b9a:	78f9      	ldrb	r1, [r7, #3]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f004 fca4 	bl	800a4ee <USBD_LL_Transmit>
 8005ba6:	e015      	b.n	8005bd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e015      	b.n	8005c2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f004 fcb4 	bl	800a572 <USBD_LL_GetRxDataSize>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c26:	4611      	mov	r1, r2
 8005c28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e01b      	b.n	8005c86 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d015      	beq.n	8005c84 <USBD_CDC_EP0_RxReady+0x50>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c5e:	2bff      	cmp	r3, #255	; 0xff
 8005c60:	d010      	beq.n	8005c84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005c70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005c78:	b292      	uxth	r2, r2
 8005c7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2243      	movs	r2, #67	; 0x43
 8005c9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c9e:	4b03      	ldr	r3, [pc, #12]	; (8005cac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	20000094 	.word	0x20000094

08005cb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2243      	movs	r2, #67	; 0x43
 8005cbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000050 	.word	0x20000050

08005cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2243      	movs	r2, #67	; 0x43
 8005cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	200000d8 	.word	0x200000d8

08005cf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	2000000c 	.word	0x2000000c

08005d10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e004      	b.n	8005d2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e008      	b.n	8005d6a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	371c      	adds	r7, #28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b085      	sub	sp, #20
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e004      	b.n	8005d9c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e016      	b.n	8005df4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	7c1b      	ldrb	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd8:	2101      	movs	r1, #1
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f004 fba8 	bl	800a530 <USBD_LL_PrepareReceive>
 8005de0:	e007      	b.n	8005df2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de8:	2340      	movs	r3, #64	; 0x40
 8005dea:	2101      	movs	r1, #1
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f004 fb9f 	bl	800a530 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e01f      	b.n	8005e54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	79fa      	ldrb	r2, [r7, #7]
 8005e46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f004 fa1b 	bl	800a284 <USBD_LL_Init>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e016      	b.n	8005ea2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00b      	beq.n	8005ea0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f107 020e 	add.w	r2, r7, #14
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	4602      	mov	r2, r0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f004 fa32 	bl	800a31c <USBD_LL_Start>
 8005eb8:	4603      	mov	r3, r0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	4611      	mov	r1, r2
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	4611      	mov	r1, r2
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
  }

  return USBD_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 ff90 	bl	8006e78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d01a      	beq.n	8005fb2 <USBD_LL_SetupStage+0x72>
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d822      	bhi.n	8005fc6 <USBD_LL_SetupStage+0x86>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <USBD_LL_SetupStage+0x4a>
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d00a      	beq.n	8005f9e <USBD_LL_SetupStage+0x5e>
 8005f88:	e01d      	b.n	8005fc6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa62 	bl	800645c <USBD_StdDevReq>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e020      	b.n	8005fe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fac6 	bl	8006538 <USBD_StdItfReq>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb0:	e016      	b.n	8005fe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fb05 	bl	80065ca <USBD_StdEPReq>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e00c      	b.n	8005fe0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f004 fa01 	bl	800a3dc <USBD_LL_StallEP>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fde:	bf00      	nop
  }

  return ret;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	60f8      	str	r0, [r7, #12]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	607a      	str	r2, [r7, #4]
 8005ff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ff8:	7afb      	ldrb	r3, [r7, #11]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d138      	bne.n	8006070 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006004:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800600c:	2b03      	cmp	r3, #3
 800600e:	d14a      	bne.n	80060a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	429a      	cmp	r2, r3
 800601a:	d913      	bls.n	8006044 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	1ad2      	subs	r2, r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	4293      	cmp	r3, r2
 8006034:	bf28      	it	cs
 8006036:	4613      	movcs	r3, r2
 8006038:	461a      	mov	r2, r3
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f001 f80f 	bl	8007060 <USBD_CtlContinueRx>
 8006042:	e030      	b.n	80060a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d10b      	bne.n	8006068 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f001 f80a 	bl	8007082 <USBD_CtlSendStatus>
 800606e:	e01a      	b.n	80060a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d114      	bne.n	80060a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00e      	beq.n	80060a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	7afa      	ldrb	r2, [r7, #11]
 8006092:	4611      	mov	r1, r2
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	e000      	b.n	80060a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	460b      	mov	r3, r1
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80060be:	7afb      	ldrb	r3, [r7, #11]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d16b      	bne.n	800619c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3314      	adds	r3, #20
 80060c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d156      	bne.n	8006182 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d914      	bls.n	800610a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	1ad2      	subs	r2, r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 ff84 	bl	8007004 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060fc:	2300      	movs	r3, #0
 80060fe:	2200      	movs	r2, #0
 8006100:	2100      	movs	r1, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f004 fa14 	bl	800a530 <USBD_LL_PrepareReceive>
 8006108:	e03b      	b.n	8006182 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	d11c      	bne.n	8006150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800611e:	429a      	cmp	r2, r3
 8006120:	d316      	bcc.n	8006150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800612c:	429a      	cmp	r2, r3
 800612e:	d20f      	bcs.n	8006150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006130:	2200      	movs	r2, #0
 8006132:	2100      	movs	r1, #0
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 ff65 	bl	8007004 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006142:	2300      	movs	r3, #0
 8006144:	2200      	movs	r2, #0
 8006146:	2100      	movs	r1, #0
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f004 f9f1 	bl	800a530 <USBD_LL_PrepareReceive>
 800614e:	e018      	b.n	8006182 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b03      	cmp	r3, #3
 800615a:	d10b      	bne.n	8006174 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006174:	2180      	movs	r1, #128	; 0x80
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f004 f930 	bl	800a3dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 ff93 	bl	80070a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006188:	2b01      	cmp	r3, #1
 800618a:	d122      	bne.n	80061d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff fe98 	bl	8005ec2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800619a:	e01a      	b.n	80061d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d114      	bne.n	80061d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	7afa      	ldrb	r2, [r7, #11]
 80061be:	4611      	mov	r1, r2
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	4798      	blx	r3
 80061c4:	4603      	mov	r3, r0
 80061c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	e000      	b.n	80061d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e02f      	b.n	8006270 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00f      	beq.n	800623a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6852      	ldr	r2, [r2, #4]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	4611      	mov	r1, r2
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800623a:	2340      	movs	r3, #64	; 0x40
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f004 f886 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2240      	movs	r2, #64	; 0x40
 8006252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	2200      	movs	r2, #0
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f004 f878 	bl	800a352 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2240      	movs	r2, #64	; 0x40
 800626c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2204      	movs	r2, #4
 80062b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d106      	bne.n	80062e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	e012      	b.n	8006330 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d10b      	bne.n	800632e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800634e:	2303      	movs	r3, #3
 8006350:	e014      	b.n	800637c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b03      	cmp	r3, #3
 800635c:	d10d      	bne.n	800637a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	4611      	mov	r1, r2
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800639a:	2303      	movs	r3, #3
 800639c:	e014      	b.n	80063c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d10d      	bne.n	80063c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d007      	beq.n	80063c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6852      	ldr	r2, [r2, #4]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	4611      	mov	r1, r2
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
  }

  return USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	3301      	adds	r3, #1
 8006434:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800643c:	8a3b      	ldrh	r3, [r7, #16]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	b21a      	sxth	r2, r3
 8006442:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006446:	4313      	orrs	r3, r2
 8006448:	b21b      	sxth	r3, r3
 800644a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800644c:	89fb      	ldrh	r3, [r7, #14]
}
 800644e:	4618      	mov	r0, r3
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d005      	beq.n	8006482 <USBD_StdDevReq+0x26>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d853      	bhi.n	8006522 <USBD_StdDevReq+0xc6>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <USBD_StdDevReq+0x3a>
 800647e:	2b20      	cmp	r3, #32
 8006480:	d14f      	bne.n	8006522 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	4798      	blx	r3
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e04a      	b.n	800652c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b09      	cmp	r3, #9
 800649c:	d83b      	bhi.n	8006516 <USBD_StdDevReq+0xba>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <USBD_StdDevReq+0x48>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064f9 	.word	0x080064f9
 80064a8:	0800650d 	.word	0x0800650d
 80064ac:	08006517 	.word	0x08006517
 80064b0:	08006503 	.word	0x08006503
 80064b4:	08006517 	.word	0x08006517
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064cd 	.word	0x080064cd
 80064c0:	08006517 	.word	0x08006517
 80064c4:	080064ef 	.word	0x080064ef
 80064c8:	080064e1 	.word	0x080064e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9de 	bl	8006890 <USBD_GetDescriptor>
          break;
 80064d4:	e024      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fb43 	bl	8006b64 <USBD_SetAddress>
          break;
 80064de:	e01f      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb82 	bl	8006bec <USBD_SetConfig>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]
          break;
 80064ec:	e018      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc21 	bl	8006d38 <USBD_GetConfig>
          break;
 80064f6:	e013      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fc52 	bl	8006da4 <USBD_GetStatus>
          break;
 8006500:	e00e      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fc81 	bl	8006e0c <USBD_SetFeature>
          break;
 800650a:	e009      	b.n	8006520 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fc90 	bl	8006e34 <USBD_ClrFeature>
          break;
 8006514:	e004      	b.n	8006520 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fce7 	bl	8006eec <USBD_CtlError>
          break;
 800651e:	bf00      	nop
      }
      break;
 8006520:	e004      	b.n	800652c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fce1 	bl	8006eec <USBD_CtlError>
      break;
 800652a:	bf00      	nop
  }

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop

08006538 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d005      	beq.n	800655e <USBD_StdItfReq+0x26>
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d82f      	bhi.n	80065b6 <USBD_StdItfReq+0x7e>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <USBD_StdItfReq+0x26>
 800655a:	2b20      	cmp	r3, #32
 800655c:	d12b      	bne.n	80065b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2db      	uxtb	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	2b02      	cmp	r3, #2
 800656a:	d81d      	bhi.n	80065a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	889b      	ldrh	r3, [r3, #4]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d813      	bhi.n	800659e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	4798      	blx	r3
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	88db      	ldrh	r3, [r3, #6]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d110      	bne.n	80065b2 <USBD_StdItfReq+0x7a>
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fd73 	bl	8007082 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800659c:	e009      	b.n	80065b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fca3 	bl	8006eec <USBD_CtlError>
          break;
 80065a6:	e004      	b.n	80065b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc9e 	bl	8006eec <USBD_CtlError>
          break;
 80065b0:	e000      	b.n	80065b4 <USBD_StdItfReq+0x7c>
          break;
 80065b2:	bf00      	nop
      }
      break;
 80065b4:	e004      	b.n	80065c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc97 	bl	8006eec <USBD_CtlError>
      break;
 80065be:	bf00      	nop
  }

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	889b      	ldrh	r3, [r3, #4]
 80065dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d007      	beq.n	80065fa <USBD_StdEPReq+0x30>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	f200 8145 	bhi.w	800687a <USBD_StdEPReq+0x2b0>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00c      	beq.n	800660e <USBD_StdEPReq+0x44>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	f040 8140 	bne.w	800687a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e13a      	b.n	8006884 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b03      	cmp	r3, #3
 8006614:	d007      	beq.n	8006626 <USBD_StdEPReq+0x5c>
 8006616:	2b03      	cmp	r3, #3
 8006618:	f300 8129 	bgt.w	800686e <USBD_StdEPReq+0x2a4>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d07f      	beq.n	8006720 <USBD_StdEPReq+0x156>
 8006620:	2b01      	cmp	r3, #1
 8006622:	d03c      	beq.n	800669e <USBD_StdEPReq+0xd4>
 8006624:	e123      	b.n	800686e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d002      	beq.n	8006638 <USBD_StdEPReq+0x6e>
 8006632:	2b03      	cmp	r3, #3
 8006634:	d016      	beq.n	8006664 <USBD_StdEPReq+0x9a>
 8006636:	e02c      	b.n	8006692 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00d      	beq.n	800665a <USBD_StdEPReq+0x90>
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d00a      	beq.n	800665a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f003 fec7 	bl	800a3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f003 fec3 	bl	800a3dc <USBD_LL_StallEP>
 8006656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006658:	e020      	b.n	800669c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc45 	bl	8006eec <USBD_CtlError>
              break;
 8006662:	e01b      	b.n	800669c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10e      	bne.n	800668a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <USBD_StdEPReq+0xc0>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d008      	beq.n	800668a <USBD_StdEPReq+0xc0>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f003 fea9 	bl	800a3dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fcf9 	bl	8007082 <USBD_CtlSendStatus>

              break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fc29 	bl	8006eec <USBD_CtlError>
              break;
 800669a:	bf00      	nop
          }
          break;
 800669c:	e0ec      	b.n	8006878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d002      	beq.n	80066b0 <USBD_StdEPReq+0xe6>
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d016      	beq.n	80066dc <USBD_StdEPReq+0x112>
 80066ae:	e030      	b.n	8006712 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <USBD_StdEPReq+0x108>
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b80      	cmp	r3, #128	; 0x80
 80066ba:	d00a      	beq.n	80066d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f003 fe8b 	bl	800a3dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c6:	2180      	movs	r1, #128	; 0x80
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f003 fe87 	bl	800a3dc <USBD_LL_StallEP>
 80066ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066d0:	e025      	b.n	800671e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fc09 	bl	8006eec <USBD_CtlError>
              break;
 80066da:	e020      	b.n	800671e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11b      	bne.n	800671c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f003 fe91 	bl	800a41a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fcc2 	bl	8007082 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	6839      	ldr	r1, [r7, #0]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006710:	e004      	b.n	800671c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fbe9 	bl	8006eec <USBD_CtlError>
              break;
 800671a:	e000      	b.n	800671e <USBD_StdEPReq+0x154>
              break;
 800671c:	bf00      	nop
          }
          break;
 800671e:	e0ab      	b.n	8006878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d002      	beq.n	8006732 <USBD_StdEPReq+0x168>
 800672c:	2b03      	cmp	r3, #3
 800672e:	d032      	beq.n	8006796 <USBD_StdEPReq+0x1cc>
 8006730:	e097      	b.n	8006862 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <USBD_StdEPReq+0x17e>
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d004      	beq.n	8006748 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fbd3 	bl	8006eec <USBD_CtlError>
                break;
 8006746:	e091      	b.n	800686c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800674c:	2b00      	cmp	r3, #0
 800674e:	da0b      	bge.n	8006768 <USBD_StdEPReq+0x19e>
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	3310      	adds	r3, #16
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	4413      	add	r3, r2
 8006764:	3304      	adds	r3, #4
 8006766:	e00b      	b.n	8006780 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	3304      	adds	r3, #4
 8006780:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2202      	movs	r2, #2
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fc1d 	bl	8006fce <USBD_CtlSendData>
              break;
 8006794:	e06a      	b.n	800686c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800679a:	2b00      	cmp	r3, #0
 800679c:	da11      	bge.n	80067c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	3324      	adds	r3, #36	; 0x24
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d117      	bne.n	80067e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80067b8:	6839      	ldr	r1, [r7, #0]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fb96 	bl	8006eec <USBD_CtlError>
                  break;
 80067c0:	e054      	b.n	800686c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	6879      	ldr	r1, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	440b      	add	r3, r1
 80067d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80067de:	6839      	ldr	r1, [r7, #0]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fb83 	bl	8006eec <USBD_CtlError>
                  break;
 80067e6:	e041      	b.n	800686c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	da0b      	bge.n	8006808 <USBD_StdEPReq+0x23e>
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	3310      	adds	r3, #16
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	e00b      	b.n	8006820 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	3304      	adds	r3, #4
 8006820:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <USBD_StdEPReq+0x264>
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d103      	bne.n	8006836 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e00e      	b.n	8006854 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f003 fe0c 	bl	800a458 <USBD_LL_IsStallEP>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2201      	movs	r2, #1
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	e002      	b.n	8006854 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2202      	movs	r2, #2
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fbb7 	bl	8006fce <USBD_CtlSendData>
              break;
 8006860:	e004      	b.n	800686c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb41 	bl	8006eec <USBD_CtlError>
              break;
 800686a:	bf00      	nop
          }
          break;
 800686c:	e004      	b.n	8006878 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fb3b 	bl	8006eec <USBD_CtlError>
          break;
 8006876:	bf00      	nop
      }
      break;
 8006878:	e004      	b.n	8006884 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb35 	bl	8006eec <USBD_CtlError>
      break;
 8006882:	bf00      	nop
  }

  return ret;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	f200 8128 	bhi.w	8006b06 <USBD_GetDescriptor+0x276>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USBD_GetDescriptor+0x2c>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006b07 	.word	0x08006b07
 80068cc:	08006b07 	.word	0x08006b07
 80068d0:	08006aa7 	.word	0x08006aa7
 80068d4:	08006ad3 	.word	0x08006ad3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7c12      	ldrb	r2, [r2, #16]
 80068e4:	f107 0108 	add.w	r1, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
      break;
 80068ee:	e112      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7c1b      	ldrb	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f107 0208 	add.w	r2, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	2202      	movs	r2, #2
 8006910:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006912:	e100      	b.n	8006b16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	f107 0208 	add.w	r2, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	2202      	movs	r2, #2
 800692c:	701a      	strb	r2, [r3, #0]
      break;
 800692e:	e0f2      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b05      	cmp	r3, #5
 8006938:	f200 80ac 	bhi.w	8006a94 <USBD_GetDescriptor+0x204>
 800693c:	a201      	add	r2, pc, #4	; (adr r2, 8006944 <USBD_GetDescriptor+0xb4>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006991 	.word	0x08006991
 800694c:	080069c5 	.word	0x080069c5
 8006950:	080069f9 	.word	0x080069f9
 8006954:	08006a2d 	.word	0x08006a2d
 8006958:	08006a61 	.word	0x08006a61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697e:	e091      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fab2 	bl	8006eec <USBD_CtlError>
            err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
          break;
 800698e:	e089      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b2:	e077      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa98 	bl	8006eec <USBD_CtlError>
            err++;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	3301      	adds	r3, #1
 80069c0:	72fb      	strb	r3, [r7, #11]
          break;
 80069c2:	e06f      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e6:	e05d      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa7e 	bl	8006eec <USBD_CtlError>
            err++;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	3301      	adds	r3, #1
 80069f4:	72fb      	strb	r3, [r7, #11]
          break;
 80069f6:	e055      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	f107 0108 	add.w	r1, r7, #8
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1a:	e043      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa64 	bl	8006eec <USBD_CtlError>
            err++;
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	3301      	adds	r3, #1
 8006a28:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2a:	e03b      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4e:	e029      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa4a 	bl	8006eec <USBD_CtlError>
            err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5e:	e021      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7c12      	ldrb	r2, [r2, #16]
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a82:	e00f      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa30 	bl	8006eec <USBD_CtlError>
            err++;
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	72fb      	strb	r3, [r7, #11]
          break;
 8006a92:	e007      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa28 	bl	8006eec <USBD_CtlError>
          err++;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006aa2:	bf00      	nop
      }
      break;
 8006aa4:	e037      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7c1b      	ldrb	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	f107 0208 	add.w	r2, r7, #8
 8006aba:	4610      	mov	r0, r2
 8006abc:	4798      	blx	r3
 8006abe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac0:	e029      	b.n	8006b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa11 	bl	8006eec <USBD_CtlError>
        err++;
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	3301      	adds	r3, #1
 8006ace:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad0:	e021      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7c1b      	ldrb	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10d      	bne.n	8006af6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	f107 0208 	add.w	r2, r7, #8
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4798      	blx	r3
 8006aea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	2207      	movs	r2, #7
 8006af2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af4:	e00f      	b.n	8006b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9f7 	bl	8006eec <USBD_CtlError>
        err++;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	3301      	adds	r3, #1
 8006b02:	72fb      	strb	r3, [r7, #11]
      break;
 8006b04:	e007      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f9ef 	bl	8006eec <USBD_CtlError>
      err++;
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	3301      	adds	r3, #1
 8006b12:	72fb      	strb	r3, [r7, #11]
      break;
 8006b14:	bf00      	nop
  }

  if (err != 0U)
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11e      	bne.n	8006b5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b24:	893b      	ldrh	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00e      	beq.n	8006b48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	88da      	ldrh	r2, [r3, #6]
 8006b2e:	893b      	ldrh	r3, [r7, #8]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	bf28      	it	cs
 8006b34:	4613      	movcs	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b3a:	893b      	ldrh	r3, [r7, #8]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa44 	bl	8006fce <USBD_CtlSendData>
 8006b46:	e009      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9ce 	bl	8006eec <USBD_CtlError>
 8006b50:	e004      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa95 	bl	8007082 <USBD_CtlSendStatus>
 8006b58:	e000      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    return;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop

08006b64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	889b      	ldrh	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d131      	bne.n	8006bda <USBD_SetAddress+0x76>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	88db      	ldrh	r3, [r3, #6]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d12d      	bne.n	8006bda <USBD_SetAddress+0x76>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	2b7f      	cmp	r3, #127	; 0x7f
 8006b84:	d829      	bhi.n	8006bda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d104      	bne.n	8006ba8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9a3 	bl	8006eec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	e01d      	b.n	8006be4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
 8006bac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f003 fc7b 	bl	800a4b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa61 	bl	8007082 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	e009      	b.n	8006be4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd8:	e004      	b.n	8006be4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f985 	bl	8006eec <USBD_CtlError>
  }
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	885b      	ldrh	r3, [r3, #2]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	4b4c      	ldr	r3, [pc, #304]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c04:	4b4b      	ldr	r3, [pc, #300]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d905      	bls.n	8006c18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f96c 	bl	8006eec <USBD_CtlError>
    return USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e088      	b.n	8006d2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d002      	beq.n	8006c2a <USBD_SetConfig+0x3e>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d025      	beq.n	8006c74 <USBD_SetConfig+0x88>
 8006c28:	e071      	b.n	8006d0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01c      	beq.n	8006c6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006c32:	4b40      	ldr	r3, [pc, #256]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c3c:	4b3d      	ldr	r3, [pc, #244]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff f948 	bl	8005ed8 <USBD_SetClassConfig>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f949 	bl	8006eec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c5a:	e065      	b.n	8006d28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa10 	bl	8007082 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2203      	movs	r2, #3
 8006c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c6a:	e05d      	b.n	8006d28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fa08 	bl	8007082 <USBD_CtlSendStatus>
      break;
 8006c72:	e059      	b.n	8006d28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c74:	4b2f      	ldr	r3, [pc, #188]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d112      	bne.n	8006ca2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c84:	4b2b      	ldr	r3, [pc, #172]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c8e:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <USBD_SetConfig+0x148>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff f93b 	bl	8005f10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9f1 	bl	8007082 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ca0:	e042      	b.n	8006d28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006ca2:	4b24      	ldr	r3, [pc, #144]	; (8006d34 <USBD_SetConfig+0x148>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d02a      	beq.n	8006d06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff f929 	bl	8005f10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	; (8006d34 <USBD_SetConfig+0x148>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <USBD_SetConfig+0x148>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff f902 	bl	8005ed8 <USBD_SetClassConfig>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00f      	beq.n	8006cfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f903 	bl	8006eec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff f90e 	bl	8005f10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006cfc:	e014      	b.n	8006d28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f9bf 	bl	8007082 <USBD_CtlSendStatus>
      break;
 8006d04:	e010      	b.n	8006d28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9bb 	bl	8007082 <USBD_CtlSendStatus>
      break;
 8006d0c:	e00c      	b.n	8006d28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f8eb 	bl	8006eec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d16:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <USBD_SetConfig+0x148>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff f8f7 	bl	8005f10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	bf00      	nop
  }

  return ret;
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000204 	.word	0x20000204

08006d38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	88db      	ldrh	r3, [r3, #6]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d004      	beq.n	8006d54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8cd 	bl	8006eec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d52:	e023      	b.n	8006d9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	dc02      	bgt.n	8006d66 <USBD_GetConfig+0x2e>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc03      	bgt.n	8006d6c <USBD_GetConfig+0x34>
 8006d64:	e015      	b.n	8006d92 <USBD_GetConfig+0x5a>
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d00b      	beq.n	8006d82 <USBD_GetConfig+0x4a>
 8006d6a:	e012      	b.n	8006d92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3308      	adds	r3, #8
 8006d76:	2201      	movs	r2, #1
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f927 	bl	8006fce <USBD_CtlSendData>
        break;
 8006d80:	e00c      	b.n	8006d9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3304      	adds	r3, #4
 8006d86:	2201      	movs	r2, #1
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f91f 	bl	8006fce <USBD_CtlSendData>
        break;
 8006d90:	e004      	b.n	8006d9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 f8a9 	bl	8006eec <USBD_CtlError>
        break;
 8006d9a:	bf00      	nop
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d81e      	bhi.n	8006dfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	88db      	ldrh	r3, [r3, #6]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d004      	beq.n	8006dce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f890 	bl	8006eec <USBD_CtlError>
        break;
 8006dcc:	e01a      	b.n	8006e04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f043 0202 	orr.w	r2, r3, #2
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	330c      	adds	r3, #12
 8006dee:	2202      	movs	r2, #2
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8eb 	bl	8006fce <USBD_CtlSendData>
      break;
 8006df8:	e004      	b.n	8006e04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f875 	bl	8006eec <USBD_CtlError>
      break;
 8006e02:	bf00      	nop
  }
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d106      	bne.n	8006e2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f92b 	bl	8007082 <USBD_CtlSendStatus>
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d80b      	bhi.n	8006e64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	885b      	ldrh	r3, [r3, #2]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10c      	bne.n	8006e6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f910 	bl	8007082 <USBD_CtlSendStatus>
      }
      break;
 8006e62:	e004      	b.n	8006e6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f840 	bl	8006eec <USBD_CtlError>
      break;
 8006e6c:	e000      	b.n	8006e70 <USBD_ClrFeature+0x3c>
      break;
 8006e6e:	bf00      	nop
  }
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fabb 	bl	800641e <SWAPBYTE>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f7ff faae 	bl	800641e <SWAPBYTE>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7ff faa1 	bl	800641e <SWAPBYTE>
 8006edc:	4603      	mov	r3, r0
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	80da      	strh	r2, [r3, #6]
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ef6:	2180      	movs	r1, #128	; 0x80
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f003 fa6f 	bl	800a3dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006efe:	2100      	movs	r1, #0
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f003 fa6b 	bl	800a3dc <USBD_LL_StallEP>
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d036      	beq.n	8006f92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f28:	6938      	ldr	r0, [r7, #16]
 8006f2a:	f000 f836 	bl	8006f9a <USBD_GetLen>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	3301      	adds	r3, #1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4413      	add	r3, r2
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	7812      	ldrb	r2, [r2, #0]
 8006f46:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	4413      	add	r3, r2
 8006f54:	2203      	movs	r2, #3
 8006f56:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f5e:	e013      	b.n	8006f88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	7812      	ldrb	r2, [r2, #0]
 8006f6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
    idx++;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	3301      	adds	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	3301      	adds	r3, #1
 8006f86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e7      	bne.n	8006f60 <USBD_GetString+0x52>
 8006f90:	e000      	b.n	8006f94 <USBD_GetString+0x86>
    return;
 8006f92:	bf00      	nop
  }
}
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006faa:	e005      	b.n	8006fb8 <USBD_GetLen+0x1e>
  {
    len++;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f5      	bne.n	8006fac <USBD_GetLen+0x12>
  }

  return len;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f003 fa7a 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	2100      	movs	r1, #0
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f003 fa69 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2203      	movs	r2, #3
 8007036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	2100      	movs	r1, #0
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f003 fa6d 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	2100      	movs	r1, #0
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f003 fa5c 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2204      	movs	r2, #4
 800708e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007092:	2300      	movs	r3, #0
 8007094:	2200      	movs	r2, #0
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f003 fa28 	bl	800a4ee <USBD_LL_Transmit>

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2205      	movs	r2, #5
 80070b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070b8:	2300      	movs	r3, #0
 80070ba:	2200      	movs	r2, #0
 80070bc:	2100      	movs	r1, #0
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f003 fa36 	bl	800a530 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	; (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <SysTick_Handler+0x1c>)
 800712a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800712c:	f001 fd28 	bl	8008b80 <xTaskGetSchedulerState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007136:	f002 fb0f 	bl	8009758 <xPortSysTickHandler>
  }
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010

08007144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007148:	2100      	movs	r1, #0
 800714a:	f06f 0004 	mvn.w	r0, #4
 800714e:	f7ff ffbf 	bl	80070d0 <__NVIC_SetPriority>
#endif
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	603b      	str	r3, [r7, #0]
  return(result);
 8007164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800716a:	f06f 0305 	mvn.w	r3, #5
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e00c      	b.n	800718c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <osKernelInitialize+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <osKernelInitialize+0x44>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007180:	2300      	movs	r3, #0
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e002      	b.n	800718c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	20000208 	.word	0x20000208

080071a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e010      	b.n	80071dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <osKernelStart+0x48>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071c2:	f7ff ffbf 	bl	8007144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <osKernelStart+0x48>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071cc:	f001 f87c 	bl	80082c8 <vTaskStartScheduler>
      stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e002      	b.n	80071dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071dc:	687b      	ldr	r3, [r7, #4]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000208 	.word	0x20000208

080071ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	; 0x38
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	617b      	str	r3, [r7, #20]
  return(result);
 8007202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	d17e      	bne.n	8007306 <osThreadNew+0x11a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d07b      	beq.n	8007306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800720e:	2380      	movs	r3, #128	; 0x80
 8007210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007212:	2318      	movs	r3, #24
 8007214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d045      	beq.n	80072b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <osThreadNew+0x48>
        name = attr->name;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <osThreadNew+0x6e>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b38      	cmp	r3, #56	; 0x38
 800724c:	d805      	bhi.n	800725a <osThreadNew+0x6e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <osThreadNew+0x72>
        return (NULL);
 800725a:	2300      	movs	r3, #0
 800725c:	e054      	b.n	8007308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <osThreadNew+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2bbb      	cmp	r3, #187	; 0xbb
 800727c:	d90a      	bls.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <osThreadNew+0xa8>
        mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e010      	b.n	80072b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <osThreadNew+0xca>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <osThreadNew+0xca>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <osThreadNew+0xca>
          mem = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e001      	b.n	80072b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d110      	bne.n	80072de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fe0c 	bl	8007ef0 <xTaskCreateStatic>
 80072d8:	4603      	mov	r3, r0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	e013      	b.n	8007306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fe57 	bl	8007faa <xTaskCreate>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d001      	beq.n	8007306 <osThreadNew+0x11a>
            hTask = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007306:	693b      	ldr	r3, [r7, #16]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007318:	f3ef 8305 	mrs	r3, IPSR
 800731c:	60bb      	str	r3, [r7, #8]
  return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osDelay+0x1c>
    stat = osErrorISR;
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e007      	b.n	800733c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ff92 	bl	8008260 <vTaskDelay>
    }
  }

  return (stat);
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a07      	ldr	r2, [pc, #28]	; (8007374 <vApplicationGetIdleTaskMemory+0x2c>)
 8007358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4a06      	ldr	r2, [pc, #24]	; (8007378 <vApplicationGetIdleTaskMemory+0x30>)
 800735e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2280      	movs	r2, #128	; 0x80
 8007364:	601a      	str	r2, [r3, #0]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	2000020c 	.word	0x2000020c
 8007378:	200002c8 	.word	0x200002c8

0800737c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800738c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4a06      	ldr	r2, [pc, #24]	; (80073ac <vApplicationGetTimerTaskMemory+0x30>)
 8007392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800739a:	601a      	str	r2, [r3, #0]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	200004c8 	.word	0x200004c8
 80073ac:	20000584 	.word	0x20000584

080073b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f103 0208 	add.w	r2, r3, #8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f103 0208 	add.w	r2, r3, #8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0208 	add.w	r2, r3, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e00c      	b.n	800748c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3308      	adds	r3, #8
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e002      	b.n	8007480 <vListInsert+0x2e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d2f6      	bcs.n	800747a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d103      	bne.n	80074f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007542:	f002 f877 	bl	8009634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	68f9      	ldr	r1, [r7, #12]
 8007550:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007552:	fb01 f303 	mul.w	r3, r1, r3
 8007556:	441a      	add	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	3b01      	subs	r3, #1
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	22ff      	movs	r2, #255	; 0xff
 8007586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d114      	bne.n	80075c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01a      	beq.n	80075d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3310      	adds	r3, #16
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 f929 	bl	80087fc <xTaskRemoveFromEventList>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d012      	beq.n	80075d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <xQueueGenericReset+0xcc>)
 80075b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	e009      	b.n	80075d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3310      	adds	r3, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff fef2 	bl	80073b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3324      	adds	r3, #36	; 0x24
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff feed 	bl	80073b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075d6:	f002 f85d 	bl	8009694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075da:	2301      	movs	r3, #1
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	e000ed04 	.word	0xe000ed04

080075e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08e      	sub	sp, #56	; 0x38
 80075ec:	af02      	add	r7, sp, #8
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10a      	bne.n	800762e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <xQueueGenericCreateStatic+0x52>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <xQueueGenericCreateStatic+0x56>
 800763a:	2301      	movs	r3, #1
 800763c:	e000      	b.n	8007640 <xQueueGenericCreateStatic+0x58>
 800763e:	2300      	movs	r3, #0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	623b      	str	r3, [r7, #32]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <xQueueGenericCreateStatic+0x7e>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <xQueueGenericCreateStatic+0x82>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <xQueueGenericCreateStatic+0x84>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	61fb      	str	r3, [r7, #28]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007686:	2350      	movs	r3, #80	; 0x50
 8007688:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b50      	cmp	r3, #80	; 0x50
 800768e:	d00a      	beq.n	80076a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	61bb      	str	r3, [r7, #24]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 f805 	bl	80076d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3730      	adds	r7, #48	; 0x30
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e002      	b.n	80076fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007706:	2101      	movs	r1, #1
 8007708:	69b8      	ldr	r0, [r7, #24]
 800770a:	f7ff ff05 	bl	8007518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	78fa      	ldrb	r2, [r7, #3]
 8007712:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08e      	sub	sp, #56	; 0x38
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <xQueueGenericSend+0x32>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d103      	bne.n	8007760 <xQueueGenericSend+0x40>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <xQueueGenericSend+0x44>
 8007760:	2301      	movs	r3, #1
 8007762:	e000      	b.n	8007766 <xQueueGenericSend+0x46>
 8007764:	2300      	movs	r3, #0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10a      	bne.n	8007780 <xQueueGenericSend+0x60>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x6e>
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <xQueueGenericSend+0x72>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSend+0x74>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <xQueueGenericSend+0x8e>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ae:	f001 f9e7 	bl	8008b80 <xTaskGetSchedulerState>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <xQueueGenericSend+0x9e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <xQueueGenericSend+0xa2>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <xQueueGenericSend+0xa4>
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xQueueGenericSend+0xbe>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	61fb      	str	r3, [r7, #28]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077de:	f001 ff29 	bl	8009634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <xQueueGenericSend+0xd4>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d129      	bne.n	8007848 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077fa:	f000 fa0b 	bl	8007c14 <prvCopyDataToQueue>
 80077fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d010      	beq.n	800782a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	3324      	adds	r3, #36	; 0x24
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fff5 	bl	80087fc <xTaskRemoveFromEventList>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d013      	beq.n	8007840 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007818:	4b3f      	ldr	r3, [pc, #252]	; (8007918 <xQueueGenericSend+0x1f8>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e00a      	b.n	8007840 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007830:	4b39      	ldr	r3, [pc, #228]	; (8007918 <xQueueGenericSend+0x1f8>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007840:	f001 ff28 	bl	8009694 <vPortExitCritical>
				return pdPASS;
 8007844:	2301      	movs	r3, #1
 8007846:	e063      	b.n	8007910 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800784e:	f001 ff21 	bl	8009694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007852:	2300      	movs	r3, #0
 8007854:	e05c      	b.n	8007910 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800785c:	f107 0314 	add.w	r3, r7, #20
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f82f 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007866:	2301      	movs	r3, #1
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786a:	f001 ff13 	bl	8009694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800786e:	f000 fd9b 	bl	80083a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007872:	f001 fedf 	bl	8009634 <vPortEnterCritical>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800787c:	b25b      	sxtb	r3, r3
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d103      	bne.n	800788c <xQueueGenericSend+0x16c>
 8007884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d103      	bne.n	80078a2 <xQueueGenericSend+0x182>
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a2:	f001 fef7 	bl	8009694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a6:	1d3a      	adds	r2, r7, #4
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 f81e 	bl	80088f0 <xTaskCheckForTimeOut>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d124      	bne.n	8007904 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078bc:	f000 faa2 	bl	8007e04 <prvIsQueueFull>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	3310      	adds	r3, #16
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 ff44 	bl	800875c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d6:	f000 fa2d 	bl	8007d34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078da:	f000 fd73 	bl	80083c4 <xTaskResumeAll>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f af7c 	bne.w	80077de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80078e6:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <xQueueGenericSend+0x1f8>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	e772      	b.n	80077de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078fa:	f000 fa1b 	bl	8007d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fe:	f000 fd61 	bl	80083c4 <xTaskResumeAll>
 8007902:	e76c      	b.n	80077de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007906:	f000 fa15 	bl	8007d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790a:	f000 fd5b 	bl	80083c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800790e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007910:	4618      	mov	r0, r3
 8007912:	3738      	adds	r7, #56	; 0x38
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b090      	sub	sp, #64	; 0x40
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800792e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d103      	bne.n	8007958 <xQueueGenericSendFromISR+0x3c>
 8007950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <xQueueGenericSendFromISR+0x40>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <xQueueGenericSendFromISR+0x42>
 800795c:	2300      	movs	r3, #0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d103      	bne.n	8007986 <xQueueGenericSendFromISR+0x6a>
 800797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <xQueueGenericSendFromISR+0x6e>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <xQueueGenericSendFromISR+0x70>
 800798a:	2300      	movs	r3, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d10a      	bne.n	80079a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	623b      	str	r3, [r7, #32]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079a6:	f001 ff27 	bl	80097f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079aa:	f3ef 8211 	mrs	r2, BASEPRI
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	61fa      	str	r2, [r7, #28]
 80079c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d302      	bcc.n	80079d8 <xQueueGenericSendFromISR+0xbc>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d12f      	bne.n	8007a38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079ee:	f000 f911 	bl	8007c14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d112      	bne.n	8007a22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d016      	beq.n	8007a32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a06:	3324      	adds	r3, #36	; 0x24
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fef7 	bl	80087fc <xTaskRemoveFromEventList>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00e      	beq.n	8007a32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00b      	beq.n	8007a32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e007      	b.n	8007a32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a26:	3301      	adds	r3, #1
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	b25a      	sxtb	r2, r3
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a32:	2301      	movs	r3, #1
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a36:	e001      	b.n	8007a3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3740      	adds	r7, #64	; 0x40
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08c      	sub	sp, #48	; 0x30
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a60:	2300      	movs	r3, #0
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <xQueueReceive+0x30>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	623b      	str	r3, [r7, #32]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <xQueueReceive+0x3e>
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xQueueReceive+0x42>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueReceive+0x44>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <xQueueReceive+0x5e>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61fb      	str	r3, [r7, #28]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab2:	f001 f865 	bl	8008b80 <xTaskGetSchedulerState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <xQueueReceive+0x6e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <xQueueReceive+0x72>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <xQueueReceive+0x74>
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xQueueReceive+0x8e>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	61bb      	str	r3, [r7, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ae2:	f001 fda7 	bl	8009634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01f      	beq.n	8007b32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af6:	f000 f8f7 	bl	8007ce8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00f      	beq.n	8007b2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fe74 	bl	80087fc <xTaskRemoveFromEventList>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b1a:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <xQueueReceive+0x1bc>)
 8007b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b2a:	f001 fdb3 	bl	8009694 <vPortExitCritical>
				return pdPASS;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e069      	b.n	8007c06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b38:	f001 fdac 	bl	8009694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e062      	b.n	8007c06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b46:	f107 0310 	add.w	r3, r7, #16
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 feba 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b54:	f001 fd9e 	bl	8009694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b58:	f000 fc26 	bl	80083a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b5c:	f001 fd6a 	bl	8009634 <vPortEnterCritical>
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d103      	bne.n	8007b76 <xQueueReceive+0x122>
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d103      	bne.n	8007b8c <xQueueReceive+0x138>
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b8c:	f001 fd82 	bl	8009694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b90:	1d3a      	adds	r2, r7, #4
 8007b92:	f107 0310 	add.w	r3, r7, #16
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fea9 	bl	80088f0 <xTaskCheckForTimeOut>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d123      	bne.n	8007bec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba6:	f000 f917 	bl	8007dd8 <prvIsQueueEmpty>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d017      	beq.n	8007be0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	3324      	adds	r3, #36	; 0x24
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fdcf 	bl	800875c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc0:	f000 f8b8 	bl	8007d34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bc4:	f000 fbfe 	bl	80083c4 <xTaskResumeAll>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d189      	bne.n	8007ae2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007bce:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <xQueueReceive+0x1bc>)
 8007bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	e780      	b.n	8007ae2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be2:	f000 f8a7 	bl	8007d34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007be6:	f000 fbed 	bl	80083c4 <xTaskResumeAll>
 8007bea:	e77a      	b.n	8007ae2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bee:	f000 f8a1 	bl	8007d34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bf2:	f000 fbe7 	bl	80083c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf8:	f000 f8ee 	bl	8007dd8 <prvIsQueueEmpty>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f43f af6f 	beq.w	8007ae2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3730      	adds	r7, #48	; 0x30
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10d      	bne.n	8007c4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d14d      	bne.n	8007cd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 ffbc 	bl	8008bbc <xTaskPriorityDisinherit>
 8007c44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	609a      	str	r2, [r3, #8]
 8007c4c:	e043      	b.n	8007cd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d119      	bne.n	8007c88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6858      	ldr	r0, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	f002 fd04 	bl	800a66c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	441a      	add	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d32b      	bcc.n	8007cd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	605a      	str	r2, [r3, #4]
 8007c86:	e026      	b.n	8007cd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68d8      	ldr	r0, [r3, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	461a      	mov	r2, r3
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	f002 fcea 	bl	800a66c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	425b      	negs	r3, r3
 8007ca2:	441a      	add	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d207      	bcs.n	8007cc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	441a      	add	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d105      	bne.n	8007cd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d002      	beq.n	8007cd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007cde:	697b      	ldr	r3, [r7, #20]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d018      	beq.n	8007d2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	441a      	add	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d303      	bcc.n	8007d1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68d9      	ldr	r1, [r3, #12]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	461a      	mov	r2, r3
 8007d26:	6838      	ldr	r0, [r7, #0]
 8007d28:	f002 fca0 	bl	800a66c <memcpy>
	}
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d3c:	f001 fc7a 	bl	8009634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d48:	e011      	b.n	8007d6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3324      	adds	r3, #36	; 0x24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fd50 	bl	80087fc <xTaskRemoveFromEventList>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d62:	f000 fe27 	bl	80089b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	dce9      	bgt.n	8007d4a <prvUnlockQueue+0x16>
 8007d76:	e000      	b.n	8007d7a <prvUnlockQueue+0x46>
					break;
 8007d78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	22ff      	movs	r2, #255	; 0xff
 8007d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d82:	f001 fc87 	bl	8009694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d86:	f001 fc55 	bl	8009634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d92:	e011      	b.n	8007db8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d012      	beq.n	8007dc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3310      	adds	r3, #16
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fd2b 	bl	80087fc <xTaskRemoveFromEventList>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dac:	f000 fe02 	bl	80089b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dce9      	bgt.n	8007d94 <prvUnlockQueue+0x60>
 8007dc0:	e000      	b.n	8007dc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	22ff      	movs	r2, #255	; 0xff
 8007dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007dcc:	f001 fc62 	bl	8009694 <vPortExitCritical>
}
 8007dd0:	bf00      	nop
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007de0:	f001 fc28 	bl	8009634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e001      	b.n	8007df6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007df6:	f001 fc4d 	bl	8009694 <vPortExitCritical>

	return xReturn;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e0c:	f001 fc12 	bl	8009634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d102      	bne.n	8007e22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	e001      	b.n	8007e26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e26:	f001 fc35 	bl	8009694 <vPortExitCritical>

	return xReturn;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e014      	b.n	8007e6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e44:	4a0f      	ldr	r2, [pc, #60]	; (8007e84 <vQueueAddToRegistry+0x50>)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e50:	490c      	ldr	r1, [pc, #48]	; (8007e84 <vQueueAddToRegistry+0x50>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <vQueueAddToRegistry+0x50>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e66:	e006      	b.n	8007e76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b07      	cmp	r3, #7
 8007e72:	d9e7      	bls.n	8007e44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20004f34 	.word	0x20004f34

08007e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e98:	f001 fbcc 	bl	8009634 <vPortEnterCritical>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d103      	bne.n	8007eb2 <vQueueWaitForMessageRestricted+0x2a>
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d103      	bne.n	8007ec8 <vQueueWaitForMessageRestricted+0x40>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ec8:	f001 fbe4 	bl	8009694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	3324      	adds	r3, #36	; 0x24
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fc61 	bl	80087a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ee2:	6978      	ldr	r0, [r7, #20]
 8007ee4:	f7ff ff26 	bl	8007d34 <prvUnlockQueue>
	}
 8007ee8:	bf00      	nop
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08e      	sub	sp, #56	; 0x38
 8007ef4:	af04      	add	r7, sp, #16
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	623b      	str	r3, [r7, #32]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	61fb      	str	r3, [r7, #28]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f36:	23bc      	movs	r3, #188	; 0xbc
 8007f38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2bbc      	cmp	r3, #188	; 0xbc
 8007f3e:	d00a      	beq.n	8007f56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	61bb      	str	r3, [r7, #24]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01e      	beq.n	8007f9c <xTaskCreateStatic+0xac>
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01b      	beq.n	8007f9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f76:	2300      	movs	r3, #0
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	9302      	str	r3, [sp, #8]
 8007f7e:	f107 0314 	add.w	r3, r7, #20
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f850 	bl	8008034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f96:	f000 f8f3 	bl	8008180 <prvAddNewTaskToReadyList>
 8007f9a:	e001      	b.n	8007fa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fa0:	697b      	ldr	r3, [r7, #20]
	}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3728      	adds	r7, #40	; 0x28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b08c      	sub	sp, #48	; 0x30
 8007fae:	af04      	add	r7, sp, #16
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	60b9      	str	r1, [r7, #8]
 8007fb4:	603b      	str	r3, [r7, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fc5a 	bl	8009878 <pvPortMalloc>
 8007fc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00e      	beq.n	8007fea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fcc:	20bc      	movs	r0, #188	; 0xbc
 8007fce:	f001 fc53 	bl	8009878 <pvPortMalloc>
 8007fd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
 8007fe0:	e005      	b.n	8007fee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fe2:	6978      	ldr	r0, [r7, #20]
 8007fe4:	f001 fd14 	bl	8009a10 <vPortFree>
 8007fe8:	e001      	b.n	8007fee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	2300      	movs	r3, #0
 8008000:	9303      	str	r3, [sp, #12]
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	9302      	str	r3, [sp, #8]
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f80e 	bl	8008034 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008018:	69f8      	ldr	r0, [r7, #28]
 800801a:	f000 f8b1 	bl	8008180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800801e:	2301      	movs	r3, #1
 8008020:	61bb      	str	r3, [r7, #24]
 8008022:	e002      	b.n	800802a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800802a:	69bb      	ldr	r3, [r7, #24]
	}
 800802c:	4618      	mov	r0, r3
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	461a      	mov	r2, r3
 800804c:	21a5      	movs	r1, #165	; 0xa5
 800804e:	f002 fb1b 	bl	800a688 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800805c:	3b01      	subs	r3, #1
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	f003 0307 	and.w	r3, r3, #7
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	617b      	str	r3, [r7, #20]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01f      	beq.n	80080d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
 8008096:	e012      	b.n	80080be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	7819      	ldrb	r1, [r3, #0]
 80080a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	3334      	adds	r3, #52	; 0x34
 80080a8:	460a      	mov	r2, r1
 80080aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d006      	beq.n	80080c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	3301      	adds	r3, #1
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2b0f      	cmp	r3, #15
 80080c2:	d9e9      	bls.n	8008098 <prvInitialiseNewTask+0x64>
 80080c4:	e000      	b.n	80080c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80080c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080d0:	e003      	b.n	80080da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	2b37      	cmp	r3, #55	; 0x37
 80080de:	d901      	bls.n	80080e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080e0:	2337      	movs	r3, #55	; 0x37
 80080e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	2200      	movs	r2, #0
 80080f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7ff f978 	bl	80073f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	3318      	adds	r3, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff f973 	bl	80073f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800811e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	2200      	movs	r2, #0
 8008124:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2200      	movs	r2, #0
 800812c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	3354      	adds	r3, #84	; 0x54
 8008134:	2260      	movs	r2, #96	; 0x60
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f002 faa5 	bl	800a688 <memset>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <prvInitialiseNewTask+0x140>)
 8008142:	659a      	str	r2, [r3, #88]	; 0x58
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <prvInitialiseNewTask+0x144>)
 8008148:	65da      	str	r2, [r3, #92]	; 0x5c
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	4a0b      	ldr	r2, [pc, #44]	; (800817c <prvInitialiseNewTask+0x148>)
 800814e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	68f9      	ldr	r1, [r7, #12]
 8008154:	69b8      	ldr	r0, [r7, #24]
 8008156:	f001 f941 	bl	80093dc <pxPortInitialiseStack>
 800815a:	4602      	mov	r2, r0
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800816c:	bf00      	nop
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	0800a930 	.word	0x0800a930
 8008178:	0800a950 	.word	0x0800a950
 800817c:	0800a910 	.word	0x0800a910

08008180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008188:	f001 fa54 	bl	8009634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800818c:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3301      	adds	r3, #1
 8008192:	4a2c      	ldr	r2, [pc, #176]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 8008194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008196:	4b2c      	ldr	r3, [pc, #176]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d109      	bne.n	80081b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800819e:	4a2a      	ldr	r2, [pc, #168]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081a4:	4b27      	ldr	r3, [pc, #156]	; (8008244 <prvAddNewTaskToReadyList+0xc4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d110      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081ac:	f000 fc26 	bl	80089fc <prvInitialiseTaskLists>
 80081b0:	e00d      	b.n	80081ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081b2:	4b26      	ldr	r3, [pc, #152]	; (800824c <prvAddNewTaskToReadyList+0xcc>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ba:	4b23      	ldr	r3, [pc, #140]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d802      	bhi.n	80081ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ce:	4b20      	ldr	r3, [pc, #128]	; (8008250 <prvAddNewTaskToReadyList+0xd0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	4a1e      	ldr	r2, [pc, #120]	; (8008250 <prvAddNewTaskToReadyList+0xd0>)
 80081d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081d8:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <prvAddNewTaskToReadyList+0xd0>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <prvAddNewTaskToReadyList+0xd4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d903      	bls.n	80081f4 <prvAddNewTaskToReadyList+0x74>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	4a18      	ldr	r2, [pc, #96]	; (8008254 <prvAddNewTaskToReadyList+0xd4>)
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4a15      	ldr	r2, [pc, #84]	; (8008258 <prvAddNewTaskToReadyList+0xd8>)
 8008202:	441a      	add	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3304      	adds	r3, #4
 8008208:	4619      	mov	r1, r3
 800820a:	4610      	mov	r0, r2
 800820c:	f7ff f8fd 	bl	800740a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008210:	f001 fa40 	bl	8009694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008214:	4b0d      	ldr	r3, [pc, #52]	; (800824c <prvAddNewTaskToReadyList+0xcc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00e      	beq.n	800823a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <prvAddNewTaskToReadyList+0xc8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	429a      	cmp	r2, r3
 8008228:	d207      	bcs.n	800823a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <prvAddNewTaskToReadyList+0xdc>)
 800822c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000e58 	.word	0x20000e58
 8008248:	20000984 	.word	0x20000984
 800824c:	20000e64 	.word	0x20000e64
 8008250:	20000e74 	.word	0x20000e74
 8008254:	20000e60 	.word	0x20000e60
 8008258:	20000988 	.word	0x20000988
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d017      	beq.n	80082a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <vTaskDelay+0x60>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <vTaskDelay+0x30>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008290:	f000 f88a 	bl	80083a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fcfe 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800829c:	f000 f892 	bl	80083c4 <xTaskResumeAll>
 80082a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d107      	bne.n	80082b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <vTaskDelay+0x64>)
 80082aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000e80 	.word	0x20000e80
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082d6:	463a      	mov	r2, r7
 80082d8:	1d39      	adds	r1, r7, #4
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff f832 	bl	8007348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	9202      	str	r2, [sp, #8]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	460a      	mov	r2, r1
 80082f6:	4924      	ldr	r1, [pc, #144]	; (8008388 <vTaskStartScheduler+0xc0>)
 80082f8:	4824      	ldr	r0, [pc, #144]	; (800838c <vTaskStartScheduler+0xc4>)
 80082fa:	f7ff fdf9 	bl	8007ef0 <xTaskCreateStatic>
 80082fe:	4603      	mov	r3, r0
 8008300:	4a23      	ldr	r2, [pc, #140]	; (8008390 <vTaskStartScheduler+0xc8>)
 8008302:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008304:	4b22      	ldr	r3, [pc, #136]	; (8008390 <vTaskStartScheduler+0xc8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	e001      	b.n	8008316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d102      	bne.n	8008322 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800831c:	f000 fd10 	bl	8008d40 <xTimerCreateTimerTask>
 8008320:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11b      	bne.n	8008360 <vTaskStartScheduler+0x98>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800833c:	4b15      	ldr	r3, [pc, #84]	; (8008394 <vTaskStartScheduler+0xcc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3354      	adds	r3, #84	; 0x54
 8008342:	4a15      	ldr	r2, [pc, #84]	; (8008398 <vTaskStartScheduler+0xd0>)
 8008344:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <vTaskStartScheduler+0xd4>)
 8008348:	f04f 32ff 	mov.w	r2, #4294967295
 800834c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <vTaskStartScheduler+0xd8>)
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008354:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <vTaskStartScheduler+0xdc>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800835a:	f001 f8c9 	bl	80094f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800835e:	e00e      	b.n	800837e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d10a      	bne.n	800837e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <vTaskStartScheduler+0xb4>
}
 800837e:	bf00      	nop
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	0800a850 	.word	0x0800a850
 800838c:	080089cd 	.word	0x080089cd
 8008390:	20000e7c 	.word	0x20000e7c
 8008394:	20000984 	.word	0x20000984
 8008398:	20000184 	.word	0x20000184
 800839c:	20000e78 	.word	0x20000e78
 80083a0:	20000e64 	.word	0x20000e64
 80083a4:	20000e5c 	.word	0x20000e5c

080083a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083ac:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <vTaskSuspendAll+0x18>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a03      	ldr	r2, [pc, #12]	; (80083c0 <vTaskSuspendAll+0x18>)
 80083b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083b6:	bf00      	nop
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000e80 	.word	0x20000e80

080083c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083d2:	4b42      	ldr	r3, [pc, #264]	; (80084dc <xTaskResumeAll+0x118>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	603b      	str	r3, [r7, #0]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083f0:	f001 f920 	bl	8009634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083f4:	4b39      	ldr	r3, [pc, #228]	; (80084dc <xTaskResumeAll+0x118>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	4a38      	ldr	r2, [pc, #224]	; (80084dc <xTaskResumeAll+0x118>)
 80083fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fe:	4b37      	ldr	r3, [pc, #220]	; (80084dc <xTaskResumeAll+0x118>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d162      	bne.n	80084cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008406:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <xTaskResumeAll+0x11c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d05e      	beq.n	80084cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800840e:	e02f      	b.n	8008470 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008410:	4b34      	ldr	r3, [pc, #208]	; (80084e4 <xTaskResumeAll+0x120>)
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3318      	adds	r3, #24
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff f851 	bl	80074c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3304      	adds	r3, #4
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f84c 	bl	80074c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008430:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <xTaskResumeAll+0x124>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d903      	bls.n	8008440 <xTaskResumeAll+0x7c>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <xTaskResumeAll+0x124>)
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4613      	mov	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4a27      	ldr	r2, [pc, #156]	; (80084ec <xTaskResumeAll+0x128>)
 800844e:	441a      	add	r2, r3
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7fe ffd7 	bl	800740a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4b23      	ldr	r3, [pc, #140]	; (80084f0 <xTaskResumeAll+0x12c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	429a      	cmp	r2, r3
 8008468:	d302      	bcc.n	8008470 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <xTaskResumeAll+0x130>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008470:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <xTaskResumeAll+0x120>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1cb      	bne.n	8008410 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800847e:	f000 fb5f 	bl	8008b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008482:	4b1d      	ldr	r3, [pc, #116]	; (80084f8 <xTaskResumeAll+0x134>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d010      	beq.n	80084b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800848e:	f000 f847 	bl	8008520 <xTaskIncrementTick>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008498:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <xTaskResumeAll+0x130>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f1      	bne.n	800848e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <xTaskResumeAll+0x134>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084b0:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <xTaskResumeAll+0x130>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084bc:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <xTaskResumeAll+0x138>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084cc:	f001 f8e2 	bl	8009694 <vPortExitCritical>

	return xAlreadyYielded;
 80084d0:	68bb      	ldr	r3, [r7, #8]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000e80 	.word	0x20000e80
 80084e0:	20000e58 	.word	0x20000e58
 80084e4:	20000e18 	.word	0x20000e18
 80084e8:	20000e60 	.word	0x20000e60
 80084ec:	20000988 	.word	0x20000988
 80084f0:	20000984 	.word	0x20000984
 80084f4:	20000e6c 	.word	0x20000e6c
 80084f8:	20000e68 	.word	0x20000e68
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <xTaskGetTickCount+0x1c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800850c:	687b      	ldr	r3, [r7, #4]
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000e5c 	.word	0x20000e5c

08008520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852a:	4b4f      	ldr	r3, [pc, #316]	; (8008668 <xTaskIncrementTick+0x148>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 808f 	bne.w	8008652 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008534:	4b4d      	ldr	r3, [pc, #308]	; (800866c <xTaskIncrementTick+0x14c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800853c:	4a4b      	ldr	r2, [pc, #300]	; (800866c <xTaskIncrementTick+0x14c>)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d120      	bne.n	800858a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008548:	4b49      	ldr	r3, [pc, #292]	; (8008670 <xTaskIncrementTick+0x150>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <xTaskIncrementTick+0x48>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	603b      	str	r3, [r7, #0]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <xTaskIncrementTick+0x46>
 8008568:	4b41      	ldr	r3, [pc, #260]	; (8008670 <xTaskIncrementTick+0x150>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	4b41      	ldr	r3, [pc, #260]	; (8008674 <xTaskIncrementTick+0x154>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <xTaskIncrementTick+0x150>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	4a3f      	ldr	r2, [pc, #252]	; (8008674 <xTaskIncrementTick+0x154>)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	4b3e      	ldr	r3, [pc, #248]	; (8008678 <xTaskIncrementTick+0x158>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3301      	adds	r3, #1
 8008582:	4a3d      	ldr	r2, [pc, #244]	; (8008678 <xTaskIncrementTick+0x158>)
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	f000 fadb 	bl	8008b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800858a:	4b3c      	ldr	r3, [pc, #240]	; (800867c <xTaskIncrementTick+0x15c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	429a      	cmp	r2, r3
 8008592:	d349      	bcc.n	8008628 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008594:	4b36      	ldr	r3, [pc, #216]	; (8008670 <xTaskIncrementTick+0x150>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <xTaskIncrementTick+0x15c>)
 80085a0:	f04f 32ff 	mov.w	r2, #4294967295
 80085a4:	601a      	str	r2, [r3, #0]
					break;
 80085a6:	e03f      	b.n	8008628 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a8:	4b31      	ldr	r3, [pc, #196]	; (8008670 <xTaskIncrementTick+0x150>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d203      	bcs.n	80085c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085c0:	4a2e      	ldr	r2, [pc, #184]	; (800867c <xTaskIncrementTick+0x15c>)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085c6:	e02f      	b.n	8008628 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe ff79 	bl	80074c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d004      	beq.n	80085e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	3318      	adds	r3, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe ff70 	bl	80074c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <xTaskIncrementTick+0x160>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d903      	bls.n	80085f8 <xTaskIncrementTick+0xd8>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a22      	ldr	r2, [pc, #136]	; (8008680 <xTaskIncrementTick+0x160>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a1f      	ldr	r2, [pc, #124]	; (8008684 <xTaskIncrementTick+0x164>)
 8008606:	441a      	add	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe fefb 	bl	800740a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4b1b      	ldr	r3, [pc, #108]	; (8008688 <xTaskIncrementTick+0x168>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861e:	429a      	cmp	r2, r3
 8008620:	d3b8      	bcc.n	8008594 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008622:	2301      	movs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008626:	e7b5      	b.n	8008594 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008628:	4b17      	ldr	r3, [pc, #92]	; (8008688 <xTaskIncrementTick+0x168>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	4915      	ldr	r1, [pc, #84]	; (8008684 <xTaskIncrementTick+0x164>)
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	440b      	add	r3, r1
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d901      	bls.n	8008644 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008644:	4b11      	ldr	r3, [pc, #68]	; (800868c <xTaskIncrementTick+0x16c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800864c:	2301      	movs	r3, #1
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	e004      	b.n	800865c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008652:	4b0f      	ldr	r3, [pc, #60]	; (8008690 <xTaskIncrementTick+0x170>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3301      	adds	r3, #1
 8008658:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <xTaskIncrementTick+0x170>)
 800865a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800865c:	697b      	ldr	r3, [r7, #20]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000e80 	.word	0x20000e80
 800866c:	20000e5c 	.word	0x20000e5c
 8008670:	20000e10 	.word	0x20000e10
 8008674:	20000e14 	.word	0x20000e14
 8008678:	20000e70 	.word	0x20000e70
 800867c:	20000e78 	.word	0x20000e78
 8008680:	20000e60 	.word	0x20000e60
 8008684:	20000988 	.word	0x20000988
 8008688:	20000984 	.word	0x20000984
 800868c:	20000e6c 	.word	0x20000e6c
 8008690:	20000e68 	.word	0x20000e68

08008694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800869a:	4b2a      	ldr	r3, [pc, #168]	; (8008744 <vTaskSwitchContext+0xb0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086a2:	4b29      	ldr	r3, [pc, #164]	; (8008748 <vTaskSwitchContext+0xb4>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086a8:	e046      	b.n	8008738 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80086aa:	4b27      	ldr	r3, [pc, #156]	; (8008748 <vTaskSwitchContext+0xb4>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b0:	4b26      	ldr	r3, [pc, #152]	; (800874c <vTaskSwitchContext+0xb8>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e010      	b.n	80086da <vTaskSwitchContext+0x46>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vTaskSwitchContext+0x3e>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	491d      	ldr	r1, [pc, #116]	; (8008750 <vTaskSwitchContext+0xbc>)
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0e4      	beq.n	80086b8 <vTaskSwitchContext+0x24>
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4a15      	ldr	r2, [pc, #84]	; (8008750 <vTaskSwitchContext+0xbc>)
 80086fa:	4413      	add	r3, r2
 80086fc:	60bb      	str	r3, [r7, #8]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	605a      	str	r2, [r3, #4]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3308      	adds	r3, #8
 8008710:	429a      	cmp	r2, r3
 8008712:	d104      	bne.n	800871e <vTaskSwitchContext+0x8a>
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	605a      	str	r2, [r3, #4]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	4a0b      	ldr	r2, [pc, #44]	; (8008754 <vTaskSwitchContext+0xc0>)
 8008726:	6013      	str	r3, [r2, #0]
 8008728:	4a08      	ldr	r2, [pc, #32]	; (800874c <vTaskSwitchContext+0xb8>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <vTaskSwitchContext+0xc0>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3354      	adds	r3, #84	; 0x54
 8008734:	4a08      	ldr	r2, [pc, #32]	; (8008758 <vTaskSwitchContext+0xc4>)
 8008736:	6013      	str	r3, [r2, #0]
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000e80 	.word	0x20000e80
 8008748:	20000e6c 	.word	0x20000e6c
 800874c:	20000e60 	.word	0x20000e60
 8008750:	20000988 	.word	0x20000988
 8008754:	20000984 	.word	0x20000984
 8008758:	20000184 	.word	0x20000184

0800875c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008782:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <vTaskPlaceOnEventList+0x44>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3318      	adds	r3, #24
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7fe fe61 	bl	8007452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008790:	2101      	movs	r1, #1
 8008792:	6838      	ldr	r0, [r7, #0]
 8008794:	f000 fa80 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
}
 8008798:	bf00      	nop
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20000984 	.word	0x20000984

080087a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	617b      	str	r3, [r7, #20]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3318      	adds	r3, #24
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7fe fe18 	bl	800740a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	68b8      	ldr	r0, [r7, #8]
 80087ea:	f000 fa55 	bl	8008c98 <prvAddCurrentTaskToDelayedList>
	}
 80087ee:	bf00      	nop
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000984 	.word	0x20000984

080087fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	60fb      	str	r3, [r7, #12]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	3318      	adds	r3, #24
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fe49 	bl	80074c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008832:	4b1e      	ldr	r3, [pc, #120]	; (80088ac <xTaskRemoveFromEventList+0xb0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d11d      	bne.n	8008876 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	3304      	adds	r3, #4
 800883e:	4618      	mov	r0, r3
 8008840:	f7fe fe40 	bl	80074c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008848:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <xTaskRemoveFromEventList+0xb4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d903      	bls.n	8008858 <xTaskRemoveFromEventList+0x5c>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <xTaskRemoveFromEventList+0xb4>)
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <xTaskRemoveFromEventList+0xb8>)
 8008866:	441a      	add	r2, r3
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	3304      	adds	r3, #4
 800886c:	4619      	mov	r1, r3
 800886e:	4610      	mov	r0, r2
 8008870:	f7fe fdcb 	bl	800740a <vListInsertEnd>
 8008874:	e005      	b.n	8008882 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	3318      	adds	r3, #24
 800887a:	4619      	mov	r1, r3
 800887c:	480e      	ldr	r0, [pc, #56]	; (80088b8 <xTaskRemoveFromEventList+0xbc>)
 800887e:	f7fe fdc4 	bl	800740a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008886:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <xTaskRemoveFromEventList+0xc0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888c:	429a      	cmp	r2, r3
 800888e:	d905      	bls.n	800889c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <xTaskRemoveFromEventList+0xc4>)
 8008896:	2201      	movs	r2, #1
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e001      	b.n	80088a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088a0:	697b      	ldr	r3, [r7, #20]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000e80 	.word	0x20000e80
 80088b0:	20000e60 	.word	0x20000e60
 80088b4:	20000988 	.word	0x20000988
 80088b8:	20000e18 	.word	0x20000e18
 80088bc:	20000984 	.word	0x20000984
 80088c0:	20000e6c 	.word	0x20000e6c

080088c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <vTaskInternalSetTimeOutState+0x24>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <vTaskInternalSetTimeOutState+0x28>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000e70 	.word	0x20000e70
 80088ec:	20000e5c 	.word	0x20000e5c

080088f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	60fb      	str	r3, [r7, #12]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008932:	f000 fe7f 	bl	8009634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008936:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <xTaskCheckForTimeOut+0xbc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894e:	d102      	bne.n	8008956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	e023      	b.n	800899e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b15      	ldr	r3, [pc, #84]	; (80089b0 <xTaskCheckForTimeOut+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d007      	beq.n	8008972 <xTaskCheckForTimeOut+0x82>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	429a      	cmp	r2, r3
 800896a:	d302      	bcc.n	8008972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e015      	b.n	800899e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	429a      	cmp	r2, r3
 800897a:	d20b      	bcs.n	8008994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	1ad2      	subs	r2, r2, r3
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff ff9b 	bl	80088c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e004      	b.n	800899e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800899a:	2301      	movs	r3, #1
 800899c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800899e:	f000 fe79 	bl	8009694 <vPortExitCritical>

	return xReturn;
 80089a2:	69fb      	ldr	r3, [r7, #28]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000e5c 	.word	0x20000e5c
 80089b0:	20000e70 	.word	0x20000e70

080089b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089b8:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <vTaskMissedYield+0x14>)
 80089ba:	2201      	movs	r2, #1
 80089bc:	601a      	str	r2, [r3, #0]
}
 80089be:	bf00      	nop
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20000e6c 	.word	0x20000e6c

080089cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089d4:	f000 f852 	bl	8008a7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <prvIdleTask+0x28>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d9f9      	bls.n	80089d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089e0:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <prvIdleTask+0x2c>)
 80089e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e6:	601a      	str	r2, [r3, #0]
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089f0:	e7f0      	b.n	80089d4 <prvIdleTask+0x8>
 80089f2:	bf00      	nop
 80089f4:	20000988 	.word	0x20000988
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
 8008a06:	e00c      	b.n	8008a22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <prvInitialiseTaskLists+0x60>)
 8008a14:	4413      	add	r3, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe fcca 	bl	80073b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b37      	cmp	r3, #55	; 0x37
 8008a26:	d9ef      	bls.n	8008a08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a28:	480d      	ldr	r0, [pc, #52]	; (8008a60 <prvInitialiseTaskLists+0x64>)
 8008a2a:	f7fe fcc1 	bl	80073b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a2e:	480d      	ldr	r0, [pc, #52]	; (8008a64 <prvInitialiseTaskLists+0x68>)
 8008a30:	f7fe fcbe 	bl	80073b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a34:	480c      	ldr	r0, [pc, #48]	; (8008a68 <prvInitialiseTaskLists+0x6c>)
 8008a36:	f7fe fcbb 	bl	80073b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a3a:	480c      	ldr	r0, [pc, #48]	; (8008a6c <prvInitialiseTaskLists+0x70>)
 8008a3c:	f7fe fcb8 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a40:	480b      	ldr	r0, [pc, #44]	; (8008a70 <prvInitialiseTaskLists+0x74>)
 8008a42:	f7fe fcb5 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a46:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <prvInitialiseTaskLists+0x78>)
 8008a48:	4a05      	ldr	r2, [pc, #20]	; (8008a60 <prvInitialiseTaskLists+0x64>)
 8008a4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <prvInitialiseTaskLists+0x7c>)
 8008a4e:	4a05      	ldr	r2, [pc, #20]	; (8008a64 <prvInitialiseTaskLists+0x68>)
 8008a50:	601a      	str	r2, [r3, #0]
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000988 	.word	0x20000988
 8008a60:	20000de8 	.word	0x20000de8
 8008a64:	20000dfc 	.word	0x20000dfc
 8008a68:	20000e18 	.word	0x20000e18
 8008a6c:	20000e2c 	.word	0x20000e2c
 8008a70:	20000e44 	.word	0x20000e44
 8008a74:	20000e10 	.word	0x20000e10
 8008a78:	20000e14 	.word	0x20000e14

08008a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a82:	e019      	b.n	8008ab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a84:	f000 fdd6 	bl	8009634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a88:	4b10      	ldr	r3, [pc, #64]	; (8008acc <prvCheckTasksWaitingTermination+0x50>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fd15 	bl	80074c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <prvCheckTasksWaitingTermination+0x54>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	4a0b      	ldr	r2, [pc, #44]	; (8008ad0 <prvCheckTasksWaitingTermination+0x54>)
 8008aa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <prvCheckTasksWaitingTermination+0x58>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <prvCheckTasksWaitingTermination+0x58>)
 8008aac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008aae:	f000 fdf1 	bl	8009694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f810 	bl	8008ad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <prvCheckTasksWaitingTermination+0x58>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e1      	bne.n	8008a84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000e2c 	.word	0x20000e2c
 8008ad0:	20000e58 	.word	0x20000e58
 8008ad4:	20000e40 	.word	0x20000e40

08008ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3354      	adds	r3, #84	; 0x54
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 fde5 	bl	800a6b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d108      	bne.n	8008b06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 ff89 	bl	8009a10 <vPortFree>
				vPortFree( pxTCB );
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 ff86 	bl	8009a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b04:	e018      	b.n	8008b38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d103      	bne.n	8008b18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 ff7d 	bl	8009a10 <vPortFree>
	}
 8008b16:	e00f      	b.n	8008b38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d00a      	beq.n	8008b38 <prvDeleteTCB+0x60>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60fb      	str	r3, [r7, #12]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <prvDeleteTCB+0x5e>
	}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <prvResetNextTaskUnblockTime+0x38>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <prvResetNextTaskUnblockTime+0x3c>)
 8008b52:	f04f 32ff 	mov.w	r2, #4294967295
 8008b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b58:	e008      	b.n	8008b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvResetNextTaskUnblockTime+0x38>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	4a04      	ldr	r2, [pc, #16]	; (8008b7c <prvResetNextTaskUnblockTime+0x3c>)
 8008b6a:	6013      	str	r3, [r2, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20000e10 	.word	0x20000e10
 8008b7c:	20000e78 	.word	0x20000e78

08008b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <xTaskGetSchedulerState+0x34>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	607b      	str	r3, [r7, #4]
 8008b92:	e008      	b.n	8008ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b94:	4b08      	ldr	r3, [pc, #32]	; (8008bb8 <xTaskGetSchedulerState+0x38>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	607b      	str	r3, [r7, #4]
 8008ba0:	e001      	b.n	8008ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ba6:	687b      	ldr	r3, [r7, #4]
	}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	20000e64 	.word	0x20000e64
 8008bb8:	20000e80 	.word	0x20000e80

08008bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d056      	beq.n	8008c80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <xTaskPriorityDisinherit+0xd0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d00a      	beq.n	8008bf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	60fb      	str	r3, [r7, #12]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	60bb      	str	r3, [r7, #8]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d02c      	beq.n	8008c80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d128      	bne.n	8008c80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fc46 	bl	80074c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <xTaskPriorityDisinherit+0xd4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <xTaskPriorityDisinherit+0xa4>
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <xTaskPriorityDisinherit+0xd4>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a09      	ldr	r2, [pc, #36]	; (8008c94 <xTaskPriorityDisinherit+0xd8>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe fbc7 	bl	800740a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c80:	697b      	ldr	r3, [r7, #20]
	}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	20000984 	.word	0x20000984
 8008c90:	20000e60 	.word	0x20000e60
 8008c94:	20000988 	.word	0x20000988

08008c98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ca2:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ca8:	4b20      	ldr	r3, [pc, #128]	; (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fe fc08 	bl	80074c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d10a      	bne.n	8008cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc2:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4819      	ldr	r0, [pc, #100]	; (8008d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ccc:	f7fe fb9d 	bl	800740a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd0:	e026      	b.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cda:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d209      	bcs.n	8008cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cea:	4b12      	ldr	r3, [pc, #72]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	f7fe fbab 	bl	8007452 <vListInsert>
}
 8008cfc:	e010      	b.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cfe:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	f7fe fba1 	bl	8007452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d202      	bcs.n	8008d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d1a:	4a08      	ldr	r2, [pc, #32]	; (8008d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	6013      	str	r3, [r2, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000e5c 	.word	0x20000e5c
 8008d2c:	20000984 	.word	0x20000984
 8008d30:	20000e44 	.word	0x20000e44
 8008d34:	20000e14 	.word	0x20000e14
 8008d38:	20000e10 	.word	0x20000e10
 8008d3c:	20000e78 	.word	0x20000e78

08008d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08a      	sub	sp, #40	; 0x28
 8008d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d4a:	f000 fb07 	bl	800935c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d4e:	4b1c      	ldr	r3, [pc, #112]	; (8008dc0 <xTimerCreateTimerTask+0x80>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d021      	beq.n	8008d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d5e:	1d3a      	adds	r2, r7, #4
 8008d60:	f107 0108 	add.w	r1, r7, #8
 8008d64:	f107 030c 	add.w	r3, r7, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fe fb07 	bl	800737c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	9202      	str	r2, [sp, #8]
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	2302      	movs	r3, #2
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	460a      	mov	r2, r1
 8008d80:	4910      	ldr	r1, [pc, #64]	; (8008dc4 <xTimerCreateTimerTask+0x84>)
 8008d82:	4811      	ldr	r0, [pc, #68]	; (8008dc8 <xTimerCreateTimerTask+0x88>)
 8008d84:	f7ff f8b4 	bl	8007ef0 <xTaskCreateStatic>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <xTimerCreateTimerTask+0x8c>)
 8008d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <xTimerCreateTimerTask+0x8c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	613b      	str	r3, [r7, #16]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008db6:	697b      	ldr	r3, [r7, #20]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20000eb4 	.word	0x20000eb4
 8008dc4:	0800a858 	.word	0x0800a858
 8008dc8:	08008f05 	.word	0x08008f05
 8008dcc:	20000eb8 	.word	0x20000eb8

08008dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
 8008ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	623b      	str	r3, [r7, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008dfe:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <xTimerGenericCommand+0x98>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d02a      	beq.n	8008e5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b05      	cmp	r3, #5
 8008e16:	dc18      	bgt.n	8008e4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e18:	f7ff feb2 	bl	8008b80 <xTaskGetSchedulerState>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d109      	bne.n	8008e36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e22:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <xTimerGenericCommand+0x98>)
 8008e24:	6818      	ldr	r0, [r3, #0]
 8008e26:	f107 0110 	add.w	r1, r7, #16
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2e:	f7fe fc77 	bl	8007720 <xQueueGenericSend>
 8008e32:	6278      	str	r0, [r7, #36]	; 0x24
 8008e34:	e012      	b.n	8008e5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <xTimerGenericCommand+0x98>)
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f107 0110 	add.w	r1, r7, #16
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2200      	movs	r2, #0
 8008e42:	f7fe fc6d 	bl	8007720 <xQueueGenericSend>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24
 8008e48:	e008      	b.n	8008e5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <xTimerGenericCommand+0x98>)
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f107 0110 	add.w	r1, r7, #16
 8008e52:	2300      	movs	r3, #0
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	f7fe fd61 	bl	800791c <xQueueGenericSendFromISR>
 8008e5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3728      	adds	r7, #40	; 0x28
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000eb4 	.word	0x20000eb4

08008e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e76:	4b22      	ldr	r3, [pc, #136]	; (8008f00 <prvProcessExpiredTimer+0x94>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fe fb1d 	bl	80074c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d022      	beq.n	8008ede <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	18d1      	adds	r1, r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	6978      	ldr	r0, [r7, #20]
 8008ea6:	f000 f8d1 	bl	800904c <prvInsertTimerInActiveList>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d01f      	beq.n	8008ef0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	2100      	movs	r1, #0
 8008eba:	6978      	ldr	r0, [r7, #20]
 8008ebc:	f7ff ff88 	bl	8008dd0 <xTimerGenericCommand>
 8008ec0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d113      	bne.n	8008ef0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	60fb      	str	r3, [r7, #12]
}
 8008eda:	bf00      	nop
 8008edc:	e7fe      	b.n	8008edc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ee4:	f023 0301 	bic.w	r3, r3, #1
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	6978      	ldr	r0, [r7, #20]
 8008ef6:	4798      	blx	r3
}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000eac 	.word	0x20000eac

08008f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f0c:	f107 0308 	add.w	r3, r7, #8
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 f857 	bl	8008fc4 <prvGetNextExpireTime>
 8008f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f803 	bl	8008f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f22:	f000 f8d5 	bl	80090d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f26:	e7f1      	b.n	8008f0c <prvTimerTask+0x8>

08008f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f32:	f7ff fa39 	bl	80083a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f36:	f107 0308 	add.w	r3, r7, #8
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 f866 	bl	800900c <prvSampleTimeNow>
 8008f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d130      	bne.n	8008faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <prvProcessTimerOrBlockTask+0x3c>
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d806      	bhi.n	8008f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f56:	f7ff fa35 	bl	80083c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f5a:	68f9      	ldr	r1, [r7, #12]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff ff85 	bl	8008e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f62:	e024      	b.n	8008fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f6a:	4b13      	ldr	r3, [pc, #76]	; (8008fb8 <prvProcessTimerOrBlockTask+0x90>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <prvProcessTimerOrBlockTask+0x50>
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <prvProcessTimerOrBlockTask+0x52>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <prvProcessTimerOrBlockTask+0x94>)
 8008f7e:	6818      	ldr	r0, [r3, #0]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f7fe ff7d 	bl	8007e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f8e:	f7ff fa19 	bl	80083c4 <xTaskResumeAll>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <prvProcessTimerOrBlockTask+0x98>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
}
 8008fa8:	e001      	b.n	8008fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008faa:	f7ff fa0b 	bl	80083c4 <xTaskResumeAll>
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000eb0 	.word	0x20000eb0
 8008fbc:	20000eb4 	.word	0x20000eb4
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <prvGetNextExpireTime+0x44>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <prvGetNextExpireTime+0x16>
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	e000      	b.n	8008fdc <prvGetNextExpireTime+0x18>
 8008fda:	2200      	movs	r2, #0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <prvGetNextExpireTime+0x44>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	e001      	b.n	8008ff8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000eac 	.word	0x20000eac

0800900c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009014:	f7ff fa74 	bl	8008500 <xTaskGetTickCount>
 8009018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800901a:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <prvSampleTimeNow+0x3c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	429a      	cmp	r2, r3
 8009022:	d205      	bcs.n	8009030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009024:	f000 f936 	bl	8009294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	e002      	b.n	8009036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009036:	4a04      	ldr	r2, [pc, #16]	; (8009048 <prvSampleTimeNow+0x3c>)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800903c:	68fb      	ldr	r3, [r7, #12]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000ebc 	.word	0x20000ebc

0800904c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	429a      	cmp	r2, r3
 8009070:	d812      	bhi.n	8009098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	1ad2      	subs	r2, r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	429a      	cmp	r2, r3
 800907e:	d302      	bcc.n	8009086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009080:	2301      	movs	r3, #1
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	e01b      	b.n	80090be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009086:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <prvInsertTimerInActiveList+0x7c>)
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3304      	adds	r3, #4
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f7fe f9de 	bl	8007452 <vListInsert>
 8009096:	e012      	b.n	80090be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	d206      	bcs.n	80090ae <prvInsertTimerInActiveList+0x62>
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d302      	bcc.n	80090ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e007      	b.n	80090be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ae:	4b07      	ldr	r3, [pc, #28]	; (80090cc <prvInsertTimerInActiveList+0x80>)
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fe f9ca 	bl	8007452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090be:	697b      	ldr	r3, [r7, #20]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000eb0 	.word	0x20000eb0
 80090cc:	20000eac 	.word	0x20000eac

080090d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08e      	sub	sp, #56	; 0x38
 80090d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090d6:	e0ca      	b.n	800926e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	da18      	bge.n	8009110 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090de:	1d3b      	adds	r3, r7, #4
 80090e0:	3304      	adds	r3, #4
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	61fb      	str	r3, [r7, #28]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009106:	6850      	ldr	r0, [r2, #4]
 8009108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910a:	6892      	ldr	r2, [r2, #8]
 800910c:	4611      	mov	r1, r2
 800910e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f2c0 80aa 	blt.w	800926c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d004      	beq.n	800912e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	3304      	adds	r3, #4
 8009128:	4618      	mov	r0, r3
 800912a:	f7fe f9cb 	bl	80074c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800912e:	463b      	mov	r3, r7
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff6b 	bl	800900c <prvSampleTimeNow>
 8009136:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b09      	cmp	r3, #9
 800913c:	f200 8097 	bhi.w	800926e <prvProcessReceivedCommands+0x19e>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <prvProcessReceivedCommands+0x78>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009171 	.word	0x08009171
 800914c:	08009171 	.word	0x08009171
 8009150:	08009171 	.word	0x08009171
 8009154:	080091e5 	.word	0x080091e5
 8009158:	080091f9 	.word	0x080091f9
 800915c:	08009243 	.word	0x08009243
 8009160:	08009171 	.word	0x08009171
 8009164:	08009171 	.word	0x08009171
 8009168:	080091e5 	.word	0x080091e5
 800916c:	080091f9 	.word	0x080091f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009176:	f043 0301 	orr.w	r3, r3, #1
 800917a:	b2da      	uxtb	r2, r3
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	18d1      	adds	r1, r2, r3
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009190:	f7ff ff5c 	bl	800904c <prvInsertTimerInActiveList>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d069      	beq.n	800926e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091a8:	f003 0304 	and.w	r3, r3, #4
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d05e      	beq.n	800926e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	441a      	add	r2, r3
 80091b8:	2300      	movs	r3, #0
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c2:	f7ff fe05 	bl	8008dd0 <xTimerGenericCommand>
 80091c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d14f      	bne.n	800926e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61bb      	str	r3, [r7, #24]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091ea:	f023 0301 	bic.w	r3, r3, #1
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80091f6:	e03a      	b.n	800926e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	b2da      	uxtb	r2, r3
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	617b      	str	r3, [r7, #20]
}
 800922a:	bf00      	nop
 800922c:	e7fe      	b.n	800922c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	699a      	ldr	r2, [r3, #24]
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	18d1      	adds	r1, r2, r3
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800923c:	f7ff ff06 	bl	800904c <prvInsertTimerInActiveList>
					break;
 8009240:	e015      	b.n	800926e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009252:	f000 fbdd 	bl	8009a10 <vPortFree>
 8009256:	e00a      	b.n	800926e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800925e:	f023 0301 	bic.w	r3, r3, #1
 8009262:	b2da      	uxtb	r2, r3
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800926a:	e000      	b.n	800926e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800926c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800926e:	4b08      	ldr	r3, [pc, #32]	; (8009290 <prvProcessReceivedCommands+0x1c0>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	1d39      	adds	r1, r7, #4
 8009274:	2200      	movs	r2, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f7fe fbec 	bl	8007a54 <xQueueReceive>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	f47f af2a 	bne.w	80090d8 <prvProcessReceivedCommands+0x8>
	}
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	3730      	adds	r7, #48	; 0x30
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000eb4 	.word	0x20000eb4

08009294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800929a:	e048      	b.n	800932e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800929c:	4b2d      	ldr	r3, [pc, #180]	; (8009354 <prvSwitchTimerLists+0xc0>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092a6:	4b2b      	ldr	r3, [pc, #172]	; (8009354 <prvSwitchTimerLists+0xc0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3304      	adds	r3, #4
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe f905 	bl	80074c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d02e      	beq.n	800932e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4413      	add	r3, r2
 80092d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d90e      	bls.n	8009300 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ee:	4b19      	ldr	r3, [pc, #100]	; (8009354 <prvSwitchTimerLists+0xc0>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fe f8aa 	bl	8007452 <vListInsert>
 80092fe:	e016      	b.n	800932e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009300:	2300      	movs	r3, #0
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2300      	movs	r3, #0
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff fd60 	bl	8008dd0 <xTimerGenericCommand>
 8009310:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	603b      	str	r3, [r7, #0]
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <prvSwitchTimerLists+0xc0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1b1      	bne.n	800929c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <prvSwitchTimerLists+0xc0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800933e:	4b06      	ldr	r3, [pc, #24]	; (8009358 <prvSwitchTimerLists+0xc4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a04      	ldr	r2, [pc, #16]	; (8009354 <prvSwitchTimerLists+0xc0>)
 8009344:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009346:	4a04      	ldr	r2, [pc, #16]	; (8009358 <prvSwitchTimerLists+0xc4>)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	6013      	str	r3, [r2, #0]
}
 800934c:	bf00      	nop
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000eac 	.word	0x20000eac
 8009358:	20000eb0 	.word	0x20000eb0

0800935c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009362:	f000 f967 	bl	8009634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009366:	4b15      	ldr	r3, [pc, #84]	; (80093bc <prvCheckForValidListAndQueue+0x60>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d120      	bne.n	80093b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800936e:	4814      	ldr	r0, [pc, #80]	; (80093c0 <prvCheckForValidListAndQueue+0x64>)
 8009370:	f7fe f81e 	bl	80073b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009374:	4813      	ldr	r0, [pc, #76]	; (80093c4 <prvCheckForValidListAndQueue+0x68>)
 8009376:	f7fe f81b 	bl	80073b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800937a:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <prvCheckForValidListAndQueue+0x6c>)
 800937c:	4a10      	ldr	r2, [pc, #64]	; (80093c0 <prvCheckForValidListAndQueue+0x64>)
 800937e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <prvCheckForValidListAndQueue+0x70>)
 8009382:	4a10      	ldr	r2, [pc, #64]	; (80093c4 <prvCheckForValidListAndQueue+0x68>)
 8009384:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009386:	2300      	movs	r3, #0
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	4b11      	ldr	r3, [pc, #68]	; (80093d0 <prvCheckForValidListAndQueue+0x74>)
 800938c:	4a11      	ldr	r2, [pc, #68]	; (80093d4 <prvCheckForValidListAndQueue+0x78>)
 800938e:	2110      	movs	r1, #16
 8009390:	200a      	movs	r0, #10
 8009392:	f7fe f929 	bl	80075e8 <xQueueGenericCreateStatic>
 8009396:	4603      	mov	r3, r0
 8009398:	4a08      	ldr	r2, [pc, #32]	; (80093bc <prvCheckForValidListAndQueue+0x60>)
 800939a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800939c:	4b07      	ldr	r3, [pc, #28]	; (80093bc <prvCheckForValidListAndQueue+0x60>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <prvCheckForValidListAndQueue+0x60>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	490b      	ldr	r1, [pc, #44]	; (80093d8 <prvCheckForValidListAndQueue+0x7c>)
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fd42 	bl	8007e34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093b0:	f000 f970 	bl	8009694 <vPortExitCritical>
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000eb4 	.word	0x20000eb4
 80093c0:	20000e84 	.word	0x20000e84
 80093c4:	20000e98 	.word	0x20000e98
 80093c8:	20000eac 	.word	0x20000eac
 80093cc:	20000eb0 	.word	0x20000eb0
 80093d0:	20000f60 	.word	0x20000f60
 80093d4:	20000ec0 	.word	0x20000ec0
 80093d8:	0800a860 	.word	0x0800a860

080093dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3b04      	subs	r3, #4
 80093ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3b04      	subs	r3, #4
 80093fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f023 0201 	bic.w	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3b04      	subs	r3, #4
 800940a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800940c:	4a0c      	ldr	r2, [pc, #48]	; (8009440 <pxPortInitialiseStack+0x64>)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3b14      	subs	r3, #20
 8009416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3b04      	subs	r3, #4
 8009422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f06f 0202 	mvn.w	r2, #2
 800942a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3b20      	subs	r3, #32
 8009430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009432:	68fb      	ldr	r3, [r7, #12]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	08009445 	.word	0x08009445

08009444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <prvTaskExitError+0x54>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d00a      	beq.n	800946e <prvTaskExitError+0x2a>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <prvTaskExitError+0x28>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	60bb      	str	r3, [r7, #8]
}
 8009480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009482:	bf00      	nop
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0fc      	beq.n	8009484 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	2000011c 	.word	0x2000011c
 800949c:	00000000 	.word	0x00000000

080094a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <pxCurrentTCBConst2>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	6808      	ldr	r0, [r1, #0]
 80094a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	f380 8809 	msr	PSP, r0
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f04f 0000 	mov.w	r0, #0
 80094b6:	f380 8811 	msr	BASEPRI, r0
 80094ba:	4770      	bx	lr
 80094bc:	f3af 8000 	nop.w

080094c0 <pxCurrentTCBConst2>:
 80094c0:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094c8:	4808      	ldr	r0, [pc, #32]	; (80094ec <prvPortStartFirstTask+0x24>)
 80094ca:	6800      	ldr	r0, [r0, #0]
 80094cc:	6800      	ldr	r0, [r0, #0]
 80094ce:	f380 8808 	msr	MSP, r0
 80094d2:	f04f 0000 	mov.w	r0, #0
 80094d6:	f380 8814 	msr	CONTROL, r0
 80094da:	b662      	cpsie	i
 80094dc:	b661      	cpsie	f
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	df00      	svc	0
 80094e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ea:	bf00      	nop
 80094ec:	e000ed08 	.word	0xe000ed08

080094f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80094f6:	4b46      	ldr	r3, [pc, #280]	; (8009610 <xPortStartScheduler+0x120>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a46      	ldr	r2, [pc, #280]	; (8009614 <xPortStartScheduler+0x124>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d10a      	bne.n	8009516 <xPortStartScheduler+0x26>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	613b      	str	r3, [r7, #16]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009516:	4b3e      	ldr	r3, [pc, #248]	; (8009610 <xPortStartScheduler+0x120>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a3f      	ldr	r2, [pc, #252]	; (8009618 <xPortStartScheduler+0x128>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d10a      	bne.n	8009536 <xPortStartScheduler+0x46>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	60fb      	str	r3, [r7, #12]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009536:	4b39      	ldr	r3, [pc, #228]	; (800961c <xPortStartScheduler+0x12c>)
 8009538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009558:	b2da      	uxtb	r2, r3
 800955a:	4b31      	ldr	r3, [pc, #196]	; (8009620 <xPortStartScheduler+0x130>)
 800955c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800955e:	4b31      	ldr	r3, [pc, #196]	; (8009624 <xPortStartScheduler+0x134>)
 8009560:	2207      	movs	r2, #7
 8009562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009564:	e009      	b.n	800957a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009566:	4b2f      	ldr	r3, [pc, #188]	; (8009624 <xPortStartScheduler+0x134>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3b01      	subs	r3, #1
 800956c:	4a2d      	ldr	r2, [pc, #180]	; (8009624 <xPortStartScheduler+0x134>)
 800956e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	b2db      	uxtb	r3, r3
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	b2db      	uxtb	r3, r3
 8009578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d0ef      	beq.n	8009566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009586:	4b27      	ldr	r3, [pc, #156]	; (8009624 <xPortStartScheduler+0x134>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f1c3 0307 	rsb	r3, r3, #7
 800958e:	2b04      	cmp	r3, #4
 8009590:	d00a      	beq.n	80095a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	60bb      	str	r3, [r7, #8]
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <xPortStartScheduler+0x134>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	4a1d      	ldr	r2, [pc, #116]	; (8009624 <xPortStartScheduler+0x134>)
 80095b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <xPortStartScheduler+0x134>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ba:	4a1a      	ldr	r2, [pc, #104]	; (8009624 <xPortStartScheduler+0x134>)
 80095bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095c6:	4b18      	ldr	r3, [pc, #96]	; (8009628 <xPortStartScheduler+0x138>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a17      	ldr	r2, [pc, #92]	; (8009628 <xPortStartScheduler+0x138>)
 80095cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095d2:	4b15      	ldr	r3, [pc, #84]	; (8009628 <xPortStartScheduler+0x138>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a14      	ldr	r2, [pc, #80]	; (8009628 <xPortStartScheduler+0x138>)
 80095d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095de:	f000 f8dd 	bl	800979c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <xPortStartScheduler+0x13c>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095e8:	f000 f8fc 	bl	80097e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <xPortStartScheduler+0x140>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0f      	ldr	r2, [pc, #60]	; (8009630 <xPortStartScheduler+0x140>)
 80095f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095f8:	f7ff ff66 	bl	80094c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095fc:	f7ff f84a 	bl	8008694 <vTaskSwitchContext>
	prvTaskExitError();
 8009600:	f7ff ff20 	bl	8009444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	e000ed00 	.word	0xe000ed00
 8009614:	410fc271 	.word	0x410fc271
 8009618:	410fc270 	.word	0x410fc270
 800961c:	e000e400 	.word	0xe000e400
 8009620:	20000fb0 	.word	0x20000fb0
 8009624:	20000fb4 	.word	0x20000fb4
 8009628:	e000ed20 	.word	0xe000ed20
 800962c:	2000011c 	.word	0x2000011c
 8009630:	e000ef34 	.word	0xe000ef34

08009634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	607b      	str	r3, [r7, #4]
}
 800964c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <vPortEnterCritical+0x58>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <vPortEnterCritical+0x58>)
 8009656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <vPortEnterCritical+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d10f      	bne.n	8009680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <vPortEnterCritical+0x5c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	b2db      	uxtb	r3, r3
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <vPortEnterCritical+0x4c>
	__asm volatile
 800966a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	603b      	str	r3, [r7, #0]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <vPortEnterCritical+0x4a>
	}
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	2000011c 	.word	0x2000011c
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <vPortExitCritical+0x50>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <vPortExitCritical+0x24>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <vPortExitCritical+0x50>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3b01      	subs	r3, #1
 80096be:	4a09      	ldr	r2, [pc, #36]	; (80096e4 <vPortExitCritical+0x50>)
 80096c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096c2:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <vPortExitCritical+0x50>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <vPortExitCritical+0x42>
 80096ca:	2300      	movs	r3, #0
 80096cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	f383 8811 	msr	BASEPRI, r3
}
 80096d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	2000011c 	.word	0x2000011c
	...

080096f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096f0:	f3ef 8009 	mrs	r0, PSP
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	4b15      	ldr	r3, [pc, #84]	; (8009750 <pxCurrentTCBConst>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	f01e 0f10 	tst.w	lr, #16
 8009700:	bf08      	it	eq
 8009702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009714:	f380 8811 	msr	BASEPRI, r0
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f7fe ffb8 	bl	8008694 <vTaskSwitchContext>
 8009724:	f04f 0000 	mov.w	r0, #0
 8009728:	f380 8811 	msr	BASEPRI, r0
 800972c:	bc09      	pop	{r0, r3}
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	6808      	ldr	r0, [r1, #0]
 8009732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009736:	f01e 0f10 	tst.w	lr, #16
 800973a:	bf08      	it	eq
 800973c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009740:	f380 8809 	msr	PSP, r0
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w

08009750 <pxCurrentTCBConst>:
 8009750:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
}
 8009770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009772:	f7fe fed5 	bl	8008520 <xTaskIncrementTick>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <xPortSysTickHandler+0x40>)
 800977e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097a0:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a6:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <vPortSetupTimerInterrupt+0x38>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ac:	4b0a      	ldr	r3, [pc, #40]	; (80097d8 <vPortSetupTimerInterrupt+0x3c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <vPortSetupTimerInterrupt+0x40>)
 80097b2:	fba2 2303 	umull	r2, r3, r2, r3
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <vPortSetupTimerInterrupt+0x44>)
 80097ba:	3b01      	subs	r3, #1
 80097bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097be:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <vPortSetupTimerInterrupt+0x34>)
 80097c0:	2207      	movs	r2, #7
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	e000e010 	.word	0xe000e010
 80097d4:	e000e018 	.word	0xe000e018
 80097d8:	20000000 	.word	0x20000000
 80097dc:	10624dd3 	.word	0x10624dd3
 80097e0:	e000e014 	.word	0xe000e014

080097e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097f4 <vPortEnableVFP+0x10>
 80097e8:	6801      	ldr	r1, [r0, #0]
 80097ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ee:	6001      	str	r1, [r0, #0]
 80097f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097f2:	bf00      	nop
 80097f4:	e000ed88 	.word	0xe000ed88

080097f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097fe:	f3ef 8305 	mrs	r3, IPSR
 8009802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b0f      	cmp	r3, #15
 8009808:	d914      	bls.n	8009834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800980a:	4a17      	ldr	r2, [pc, #92]	; (8009868 <vPortValidateInterruptPriority+0x70>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009814:	4b15      	ldr	r3, [pc, #84]	; (800986c <vPortValidateInterruptPriority+0x74>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	7afa      	ldrb	r2, [r7, #11]
 800981a:	429a      	cmp	r2, r3
 800981c:	d20a      	bcs.n	8009834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	607b      	str	r3, [r7, #4]
}
 8009830:	bf00      	nop
 8009832:	e7fe      	b.n	8009832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009834:	4b0e      	ldr	r3, [pc, #56]	; (8009870 <vPortValidateInterruptPriority+0x78>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <vPortValidateInterruptPriority+0x7c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d90a      	bls.n	800985a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	603b      	str	r3, [r7, #0]
}
 8009856:	bf00      	nop
 8009858:	e7fe      	b.n	8009858 <vPortValidateInterruptPriority+0x60>
	}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	e000e3f0 	.word	0xe000e3f0
 800986c:	20000fb0 	.word	0x20000fb0
 8009870:	e000ed0c 	.word	0xe000ed0c
 8009874:	20000fb4 	.word	0x20000fb4

08009878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009884:	f7fe fd90 	bl	80083a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009888:	4b5b      	ldr	r3, [pc, #364]	; (80099f8 <pvPortMalloc+0x180>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009890:	f000 f920 	bl	8009ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009894:	4b59      	ldr	r3, [pc, #356]	; (80099fc <pvPortMalloc+0x184>)
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8093 	bne.w	80099c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01d      	beq.n	80098e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098a8:	2208      	movs	r2, #8
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4413      	add	r3, r2
 80098ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d014      	beq.n	80098e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f023 0307 	bic.w	r3, r3, #7
 80098c0:	3308      	adds	r3, #8
 80098c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f003 0307 	and.w	r3, r3, #7
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00a      	beq.n	80098e4 <pvPortMalloc+0x6c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	617b      	str	r3, [r7, #20]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d06e      	beq.n	80099c8 <pvPortMalloc+0x150>
 80098ea:	4b45      	ldr	r3, [pc, #276]	; (8009a00 <pvPortMalloc+0x188>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d869      	bhi.n	80099c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098f4:	4b43      	ldr	r3, [pc, #268]	; (8009a04 <pvPortMalloc+0x18c>)
 80098f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098f8:	4b42      	ldr	r3, [pc, #264]	; (8009a04 <pvPortMalloc+0x18c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098fe:	e004      	b.n	800990a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <pvPortMalloc+0xa4>
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1f1      	bne.n	8009900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800991c:	4b36      	ldr	r3, [pc, #216]	; (80099f8 <pvPortMalloc+0x180>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009922:	429a      	cmp	r2, r3
 8009924:	d050      	beq.n	80099c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2208      	movs	r2, #8
 800992c:	4413      	add	r3, r2
 800992e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	1ad2      	subs	r2, r2, r3
 8009940:	2308      	movs	r3, #8
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	429a      	cmp	r2, r3
 8009946:	d91f      	bls.n	8009988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	f003 0307 	and.w	r3, r3, #7
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <pvPortMalloc+0xf8>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	613b      	str	r3, [r7, #16]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	1ad2      	subs	r2, r2, r3
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009982:	69b8      	ldr	r0, [r7, #24]
 8009984:	f000 f908 	bl	8009b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009988:	4b1d      	ldr	r3, [pc, #116]	; (8009a00 <pvPortMalloc+0x188>)
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	4a1b      	ldr	r2, [pc, #108]	; (8009a00 <pvPortMalloc+0x188>)
 8009994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009996:	4b1a      	ldr	r3, [pc, #104]	; (8009a00 <pvPortMalloc+0x188>)
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4b1b      	ldr	r3, [pc, #108]	; (8009a08 <pvPortMalloc+0x190>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d203      	bcs.n	80099aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099a2:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <pvPortMalloc+0x188>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a18      	ldr	r2, [pc, #96]	; (8009a08 <pvPortMalloc+0x190>)
 80099a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	4b13      	ldr	r3, [pc, #76]	; (80099fc <pvPortMalloc+0x184>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	431a      	orrs	r2, r3
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <pvPortMalloc+0x194>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a11      	ldr	r2, [pc, #68]	; (8009a0c <pvPortMalloc+0x194>)
 80099c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099c8:	f7fe fcfc 	bl	80083c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	f003 0307 	and.w	r3, r3, #7
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00a      	beq.n	80099ec <pvPortMalloc+0x174>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60fb      	str	r3, [r7, #12]
}
 80099e8:	bf00      	nop
 80099ea:	e7fe      	b.n	80099ea <pvPortMalloc+0x172>
	return pvReturn;
 80099ec:	69fb      	ldr	r3, [r7, #28]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3728      	adds	r7, #40	; 0x28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20004bc0 	.word	0x20004bc0
 80099fc:	20004bd4 	.word	0x20004bd4
 8009a00:	20004bc4 	.word	0x20004bc4
 8009a04:	20004bb8 	.word	0x20004bb8
 8009a08:	20004bc8 	.word	0x20004bc8
 8009a0c:	20004bcc 	.word	0x20004bcc

08009a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d04d      	beq.n	8009abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a22:	2308      	movs	r3, #8
 8009a24:	425b      	negs	r3, r3
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4413      	add	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <vPortFree+0xb8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4013      	ands	r3, r2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10a      	bne.n	8009a54 <vPortFree+0x44>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60fb      	str	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00a      	beq.n	8009a72 <vPortFree+0x62>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	60bb      	str	r3, [r7, #8]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	685a      	ldr	r2, [r3, #4]
 8009a76:	4b14      	ldr	r3, [pc, #80]	; (8009ac8 <vPortFree+0xb8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4013      	ands	r3, r2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01e      	beq.n	8009abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d11a      	bne.n	8009abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <vPortFree+0xb8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	43db      	mvns	r3, r3
 8009a92:	401a      	ands	r2, r3
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a98:	f7fe fc86 	bl	80083a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <vPortFree+0xbc>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	4a09      	ldr	r2, [pc, #36]	; (8009acc <vPortFree+0xbc>)
 8009aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f000 f874 	bl	8009b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <vPortFree+0xc0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	4a06      	ldr	r2, [pc, #24]	; (8009ad0 <vPortFree+0xc0>)
 8009ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009aba:	f7fe fc83 	bl	80083c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009abe:	bf00      	nop
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20004bd4 	.word	0x20004bd4
 8009acc:	20004bc4 	.word	0x20004bc4
 8009ad0:	20004bd0 	.word	0x20004bd0

08009ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ae0:	4b27      	ldr	r3, [pc, #156]	; (8009b80 <prvHeapInit+0xac>)
 8009ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00c      	beq.n	8009b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	3307      	adds	r3, #7
 8009af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f023 0307 	bic.w	r3, r3, #7
 8009afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	4a1f      	ldr	r2, [pc, #124]	; (8009b80 <prvHeapInit+0xac>)
 8009b04:	4413      	add	r3, r2
 8009b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b0c:	4a1d      	ldr	r2, [pc, #116]	; (8009b84 <prvHeapInit+0xb0>)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b12:	4b1c      	ldr	r3, [pc, #112]	; (8009b84 <prvHeapInit+0xb0>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b20:	2208      	movs	r2, #8
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	1a9b      	subs	r3, r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0307 	bic.w	r3, r3, #7
 8009b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4a15      	ldr	r2, [pc, #84]	; (8009b88 <prvHeapInit+0xb4>)
 8009b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <prvHeapInit+0xb4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b3e:	4b12      	ldr	r3, [pc, #72]	; (8009b88 <prvHeapInit+0xb4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b54:	4b0c      	ldr	r3, [pc, #48]	; (8009b88 <prvHeapInit+0xb4>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <prvHeapInit+0xb8>)
 8009b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <prvHeapInit+0xbc>)
 8009b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b6c:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <prvHeapInit+0xc0>)
 8009b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	20000fb8 	.word	0x20000fb8
 8009b84:	20004bb8 	.word	0x20004bb8
 8009b88:	20004bc0 	.word	0x20004bc0
 8009b8c:	20004bc8 	.word	0x20004bc8
 8009b90:	20004bc4 	.word	0x20004bc4
 8009b94:	20004bd4 	.word	0x20004bd4

08009b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ba0:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <prvInsertBlockIntoFreeList+0xac>)
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e002      	b.n	8009bac <prvInsertBlockIntoFreeList+0x14>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d8f7      	bhi.n	8009ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d108      	bne.n	8009bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	441a      	add	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	441a      	add	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d118      	bne.n	8009c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <prvInsertBlockIntoFreeList+0xb0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d00d      	beq.n	8009c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	e008      	b.n	8009c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c16:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <prvInsertBlockIntoFreeList+0xb0>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e003      	b.n	8009c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d002      	beq.n	8009c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c36:	bf00      	nop
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20004bb8 	.word	0x20004bb8
 8009c48:	20004bc0 	.word	0x20004bc0

08009c4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c50:	2200      	movs	r2, #0
 8009c52:	4912      	ldr	r1, [pc, #72]	; (8009c9c <MX_USB_DEVICE_Init+0x50>)
 8009c54:	4812      	ldr	r0, [pc, #72]	; (8009ca0 <MX_USB_DEVICE_Init+0x54>)
 8009c56:	f7fc f8d1 	bl	8005dfc <USBD_Init>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c60:	f7f7 fa04 	bl	800106c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c64:	490f      	ldr	r1, [pc, #60]	; (8009ca4 <MX_USB_DEVICE_Init+0x58>)
 8009c66:	480e      	ldr	r0, [pc, #56]	; (8009ca0 <MX_USB_DEVICE_Init+0x54>)
 8009c68:	f7fc f8f8 	bl	8005e5c <USBD_RegisterClass>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c72:	f7f7 f9fb 	bl	800106c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c76:	490c      	ldr	r1, [pc, #48]	; (8009ca8 <MX_USB_DEVICE_Init+0x5c>)
 8009c78:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <MX_USB_DEVICE_Init+0x54>)
 8009c7a:	f7fc f849 	bl	8005d10 <USBD_CDC_RegisterInterface>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c84:	f7f7 f9f2 	bl	800106c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c88:	4805      	ldr	r0, [pc, #20]	; (8009ca0 <MX_USB_DEVICE_Init+0x54>)
 8009c8a:	f7fc f90e 	bl	8005eaa <USBD_Start>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c94:	f7f7 f9ea 	bl	800106c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c98:	bf00      	nop
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20000134 	.word	0x20000134
 8009ca0:	20004f74 	.word	0x20004f74
 8009ca4:	20000018 	.word	0x20000018
 8009ca8:	20000120 	.word	0x20000120

08009cac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	4905      	ldr	r1, [pc, #20]	; (8009cc8 <CDC_Init_FS+0x1c>)
 8009cb4:	4805      	ldr	r0, [pc, #20]	; (8009ccc <CDC_Init_FS+0x20>)
 8009cb6:	f7fc f840 	bl	8005d3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009cba:	4905      	ldr	r1, [pc, #20]	; (8009cd0 <CDC_Init_FS+0x24>)
 8009cbc:	4803      	ldr	r0, [pc, #12]	; (8009ccc <CDC_Init_FS+0x20>)
 8009cbe:	f7fc f85a 	bl	8005d76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009cc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20005a44 	.word	0x20005a44
 8009ccc:	20004f74 	.word	0x20004f74
 8009cd0:	20005244 	.word	0x20005244

08009cd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009cd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	71fb      	strb	r3, [r7, #7]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	2b23      	cmp	r3, #35	; 0x23
 8009cf8:	d84a      	bhi.n	8009d90 <CDC_Control_FS+0xac>
 8009cfa:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <CDC_Control_FS+0x1c>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d91 	.word	0x08009d91
 8009d04:	08009d91 	.word	0x08009d91
 8009d08:	08009d91 	.word	0x08009d91
 8009d0c:	08009d91 	.word	0x08009d91
 8009d10:	08009d91 	.word	0x08009d91
 8009d14:	08009d91 	.word	0x08009d91
 8009d18:	08009d91 	.word	0x08009d91
 8009d1c:	08009d91 	.word	0x08009d91
 8009d20:	08009d91 	.word	0x08009d91
 8009d24:	08009d91 	.word	0x08009d91
 8009d28:	08009d91 	.word	0x08009d91
 8009d2c:	08009d91 	.word	0x08009d91
 8009d30:	08009d91 	.word	0x08009d91
 8009d34:	08009d91 	.word	0x08009d91
 8009d38:	08009d91 	.word	0x08009d91
 8009d3c:	08009d91 	.word	0x08009d91
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	08009d91 	.word	0x08009d91
 8009d48:	08009d91 	.word	0x08009d91
 8009d4c:	08009d91 	.word	0x08009d91
 8009d50:	08009d91 	.word	0x08009d91
 8009d54:	08009d91 	.word	0x08009d91
 8009d58:	08009d91 	.word	0x08009d91
 8009d5c:	08009d91 	.word	0x08009d91
 8009d60:	08009d91 	.word	0x08009d91
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	08009d91 	.word	0x08009d91
 8009d6c:	08009d91 	.word	0x08009d91
 8009d70:	08009d91 	.word	0x08009d91
 8009d74:	08009d91 	.word	0x08009d91
 8009d78:	08009d91 	.word	0x08009d91
 8009d7c:	08009d91 	.word	0x08009d91
 8009d80:	08009d91 	.word	0x08009d91
 8009d84:	08009d91 	.word	0x08009d91
 8009d88:	08009d91 	.word	0x08009d91
 8009d8c:	08009d91 	.word	0x08009d91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d90:	bf00      	nop
  }

  return (USBD_OK);
 8009d92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4805      	ldr	r0, [pc, #20]	; (8009dc4 <CDC_Receive_FS+0x24>)
 8009dae:	f7fb ffe2 	bl	8005d76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009db2:	4804      	ldr	r0, [pc, #16]	; (8009dc4 <CDC_Receive_FS+0x24>)
 8009db4:	f7fb fff8 	bl	8005da8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009db8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20004f74 	.word	0x20004f74

08009dc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009dda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
	...

08009dec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	6039      	str	r1, [r7, #0]
 8009df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2212      	movs	r2, #18
 8009dfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009dfe:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20000150 	.word	0x20000150

08009e10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	6039      	str	r1, [r7, #0]
 8009e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2204      	movs	r2, #4
 8009e20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e22:	4b03      	ldr	r3, [pc, #12]	; (8009e30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20000164 	.word	0x20000164

08009e34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	6039      	str	r1, [r7, #0]
 8009e3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d105      	bne.n	8009e52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	4907      	ldr	r1, [pc, #28]	; (8009e68 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e4a:	4808      	ldr	r0, [pc, #32]	; (8009e6c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e4c:	f7fd f85f 	bl	8006f0e <USBD_GetString>
 8009e50:	e004      	b.n	8009e5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	4904      	ldr	r1, [pc, #16]	; (8009e68 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e56:	4805      	ldr	r0, [pc, #20]	; (8009e6c <USBD_FS_ProductStrDescriptor+0x38>)
 8009e58:	f7fd f859 	bl	8006f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e5c:	4b02      	ldr	r3, [pc, #8]	; (8009e68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20006244 	.word	0x20006244
 8009e6c:	0800a868 	.word	0x0800a868

08009e70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	4603      	mov	r3, r0
 8009e78:	6039      	str	r1, [r7, #0]
 8009e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	4904      	ldr	r1, [pc, #16]	; (8009e90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e80:	4804      	ldr	r0, [pc, #16]	; (8009e94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e82:	f7fd f844 	bl	8006f0e <USBD_GetString>
  return USBD_StrDesc;
 8009e86:	4b02      	ldr	r3, [pc, #8]	; (8009e90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20006244 	.word	0x20006244
 8009e94:	0800a880 	.word	0x0800a880

08009e98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	221a      	movs	r2, #26
 8009ea8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009eaa:	f000 f843 	bl	8009f34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009eae:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	20000168 	.word	0x20000168

08009ebc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6039      	str	r1, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d105      	bne.n	8009eda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	4907      	ldr	r1, [pc, #28]	; (8009ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ed2:	4808      	ldr	r0, [pc, #32]	; (8009ef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ed4:	f7fd f81b 	bl	8006f0e <USBD_GetString>
 8009ed8:	e004      	b.n	8009ee4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4904      	ldr	r1, [pc, #16]	; (8009ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ede:	4805      	ldr	r0, [pc, #20]	; (8009ef4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ee0:	f7fd f815 	bl	8006f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20006244 	.word	0x20006244
 8009ef4:	0800a894 	.word	0x0800a894

08009ef8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f04:	79fb      	ldrb	r3, [r7, #7]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d105      	bne.n	8009f16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	4907      	ldr	r1, [pc, #28]	; (8009f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f0e:	4808      	ldr	r0, [pc, #32]	; (8009f30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f10:	f7fc fffd 	bl	8006f0e <USBD_GetString>
 8009f14:	e004      	b.n	8009f20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	4904      	ldr	r1, [pc, #16]	; (8009f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f1a:	4805      	ldr	r0, [pc, #20]	; (8009f30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f1c:	f7fc fff7 	bl	8006f0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f20:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20006244 	.word	0x20006244
 8009f30:	0800a8a0 	.word	0x0800a8a0

08009f34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f3a:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <Get_SerialNum+0x44>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f40:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <Get_SerialNum+0x48>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f46:	4b0e      	ldr	r3, [pc, #56]	; (8009f80 <Get_SerialNum+0x4c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4413      	add	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	4909      	ldr	r1, [pc, #36]	; (8009f84 <Get_SerialNum+0x50>)
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 f814 	bl	8009f8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f64:	2204      	movs	r2, #4
 8009f66:	4908      	ldr	r1, [pc, #32]	; (8009f88 <Get_SerialNum+0x54>)
 8009f68:	68b8      	ldr	r0, [r7, #8]
 8009f6a:	f000 f80f 	bl	8009f8c <IntToUnicode>
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	1fff7a10 	.word	0x1fff7a10
 8009f7c:	1fff7a14 	.word	0x1fff7a14
 8009f80:	1fff7a18 	.word	0x1fff7a18
 8009f84:	2000016a 	.word	0x2000016a
 8009f88:	2000017a 	.word	0x2000017a

08009f8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	4613      	mov	r3, r2
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]
 8009fa2:	e027      	b.n	8009ff4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	0f1b      	lsrs	r3, r3, #28
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d80b      	bhi.n	8009fc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	0f1b      	lsrs	r3, r3, #28
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	440b      	add	r3, r1
 8009fbc:	3230      	adds	r2, #48	; 0x30
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	e00a      	b.n	8009fda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	0f1b      	lsrs	r3, r3, #28
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	440b      	add	r3, r1
 8009fd4:	3237      	adds	r2, #55	; 0x37
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	75fb      	strb	r3, [r7, #23]
 8009ff4:	7dfa      	ldrb	r2, [r7, #23]
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d3d3      	bcc.n	8009fa4 <IntToUnicode+0x18>
  }
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
	...

0800a00c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08a      	sub	sp, #40	; 0x28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a014:	f107 0314 	add.w	r3, r7, #20
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	605a      	str	r2, [r3, #4]
 800a01e:	609a      	str	r2, [r3, #8]
 800a020:	60da      	str	r2, [r3, #12]
 800a022:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a02c:	d13a      	bne.n	800a0a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a02e:	2300      	movs	r3, #0
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a038:	f043 0301 	orr.w	r3, r3, #1
 800a03c:	6313      	str	r3, [r2, #48]	; 0x30
 800a03e:	4b1b      	ldr	r3, [pc, #108]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	613b      	str	r3, [r7, #16]
 800a048:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a04a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a04e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a050:	2302      	movs	r3, #2
 800a052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a054:	2300      	movs	r3, #0
 800a056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a058:	2303      	movs	r3, #3
 800a05a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a05c:	230a      	movs	r3, #10
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4619      	mov	r1, r3
 800a066:	4812      	ldr	r0, [pc, #72]	; (800a0b0 <HAL_PCD_MspInit+0xa4>)
 800a068:	f7f7 fac8 	bl	80015fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a06c:	4b0f      	ldr	r3, [pc, #60]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	4a0e      	ldr	r2, [pc, #56]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a076:	6353      	str	r3, [r2, #52]	; 0x34
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a086:	6453      	str	r3, [r2, #68]	; 0x44
 800a088:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <HAL_PCD_MspInit+0xa0>)
 800a08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a094:	2200      	movs	r2, #0
 800a096:	2105      	movs	r1, #5
 800a098:	2043      	movs	r0, #67	; 0x43
 800a09a:	f7f7 fa85 	bl	80015a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a09e:	2043      	movs	r0, #67	; 0x43
 800a0a0:	f7f7 fa9e 	bl	80015e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3728      	adds	r7, #40	; 0x28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	40020000 	.word	0x40020000

0800a0b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	f7fb ff38 	bl	8005f40 <USBD_LL_SetupStage>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	1a9b      	subs	r3, r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	78fb      	ldrb	r3, [r7, #3]
 800a100:	4619      	mov	r1, r3
 800a102:	f7fb ff72 	bl	8005fea <USBD_LL_DataOutStage>
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4613      	mov	r3, r2
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	3348      	adds	r3, #72	; 0x48
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	4619      	mov	r1, r3
 800a136:	f7fb ffbb 	bl	80060b0 <USBD_LL_DataInStage>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b082      	sub	sp, #8
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a150:	4618      	mov	r0, r3
 800a152:	f7fc f8cf 	bl	80062f4 <USBD_LL_SOF>
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d001      	beq.n	800a176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a172:	f7f6 ff7b 	bl	800106c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a17c:	7bfa      	ldrb	r2, [r7, #15]
 800a17e:	4611      	mov	r1, r2
 800a180:	4618      	mov	r0, r3
 800a182:	f7fc f879 	bl	8006278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fc f825 	bl	80061dc <USBD_LL_Reset>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
	...

0800a19c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fc f874 	bl	8006298 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	6812      	ldr	r2, [r2, #0]
 800a1be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1c2:	f043 0301 	orr.w	r3, r3, #1
 800a1c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d005      	beq.n	800a1dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <HAL_PCD_SuspendCallback+0x48>)
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	4a03      	ldr	r2, [pc, #12]	; (800a1e4 <HAL_PCD_SuspendCallback+0x48>)
 800a1d6:	f043 0306 	orr.w	r3, r3, #6
 800a1da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fc f864 	bl	80062c4 <USBD_LL_Resume>
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fc f8b2 	bl	8006384 <USBD_LL_IsoOUTIncomplete>
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a23a:	78fa      	ldrb	r2, [r7, #3]
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fc f87a 	bl	8006338 <USBD_LL_IsoINIncomplete>
}
 800a244:	bf00      	nop
 800a246:	3708      	adds	r7, #8
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fc f8b8 	bl	80063d0 <USBD_LL_DevConnected>
}
 800a260:	bf00      	nop
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a276:	4618      	mov	r0, r3
 800a278:	f7fc f8b5 	bl	80063e6 <USBD_LL_DevDisconnected>
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d13c      	bne.n	800a30e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a294:	4a20      	ldr	r2, [pc, #128]	; (800a318 <USBD_LL_Init+0x94>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a1e      	ldr	r2, [pc, #120]	; (800a318 <USBD_LL_Init+0x94>)
 800a2a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <USBD_LL_Init+0x94>)
 800a2a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <USBD_LL_Init+0x94>)
 800a2ae:	2204      	movs	r2, #4
 800a2b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2b2:	4b19      	ldr	r3, [pc, #100]	; (800a318 <USBD_LL_Init+0x94>)
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2b8:	4b17      	ldr	r3, [pc, #92]	; (800a318 <USBD_LL_Init+0x94>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2be:	4b16      	ldr	r3, [pc, #88]	; (800a318 <USBD_LL_Init+0x94>)
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2c4:	4b14      	ldr	r3, [pc, #80]	; (800a318 <USBD_LL_Init+0x94>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2ca:	4b13      	ldr	r3, [pc, #76]	; (800a318 <USBD_LL_Init+0x94>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <USBD_LL_Init+0x94>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <USBD_LL_Init+0x94>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <USBD_LL_Init+0x94>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2e2:	480d      	ldr	r0, [pc, #52]	; (800a318 <USBD_LL_Init+0x94>)
 800a2e4:	f7f7 fc86 	bl	8001bf4 <HAL_PCD_Init>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d001      	beq.n	800a2f2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2ee:	f7f6 febd 	bl	800106c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2f2:	2180      	movs	r1, #128	; 0x80
 800a2f4:	4808      	ldr	r0, [pc, #32]	; (800a318 <USBD_LL_Init+0x94>)
 800a2f6:	f7f8 fde4 	bl	8002ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2fa:	2240      	movs	r2, #64	; 0x40
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4806      	ldr	r0, [pc, #24]	; (800a318 <USBD_LL_Init+0x94>)
 800a300:	f7f8 fd98 	bl	8002e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a304:	2280      	movs	r2, #128	; 0x80
 800a306:	2101      	movs	r1, #1
 800a308:	4803      	ldr	r0, [pc, #12]	; (800a318 <USBD_LL_Init+0x94>)
 800a30a:	f7f8 fd93 	bl	8002e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20006444 	.word	0x20006444

0800a31c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a332:	4618      	mov	r0, r3
 800a334:	f7f7 fd7b 	bl	8001e2e <HAL_PCD_Start>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f942 	bl	800a5c8 <USBD_Get_USB_Status>
 800a344:	4603      	mov	r3, r0
 800a346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a348:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	4608      	mov	r0, r1
 800a35c:	4611      	mov	r1, r2
 800a35e:	461a      	mov	r2, r3
 800a360:	4603      	mov	r3, r0
 800a362:	70fb      	strb	r3, [r7, #3]
 800a364:	460b      	mov	r3, r1
 800a366:	70bb      	strb	r3, [r7, #2]
 800a368:	4613      	mov	r3, r2
 800a36a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a37a:	78bb      	ldrb	r3, [r7, #2]
 800a37c:	883a      	ldrh	r2, [r7, #0]
 800a37e:	78f9      	ldrb	r1, [r7, #3]
 800a380:	f7f8 f95f 	bl	8002642 <HAL_PCD_EP_Open>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f91c 	bl	800a5c8 <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b084      	sub	sp, #16
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	4611      	mov	r1, r2
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f8 f9a8 	bl	8002712 <HAL_PCD_EP_Close>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f8fd 	bl	800a5c8 <USBD_Get_USB_Status>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f8 fa80 	bl	8002900 <HAL_PCD_EP_SetStall>
 800a400:	4603      	mov	r3, r0
 800a402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a404:	7bfb      	ldrb	r3, [r7, #15]
 800a406:	4618      	mov	r0, r3
 800a408:	f000 f8de 	bl	800a5c8 <USBD_Get_USB_Status>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a410:	7bbb      	ldrb	r3, [r7, #14]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f8 fac5 	bl	80029c8 <HAL_PCD_EP_ClrStall>
 800a43e:	4603      	mov	r3, r0
 800a440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a442:	7bfb      	ldrb	r3, [r7, #15]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 f8bf 	bl	800a5c8 <USBD_Get_USB_Status>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a46a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a46c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a470:	2b00      	cmp	r3, #0
 800a472:	da0b      	bge.n	800a48c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a47a:	68f9      	ldr	r1, [r7, #12]
 800a47c:	4613      	mov	r3, r2
 800a47e:	00db      	lsls	r3, r3, #3
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	333e      	adds	r3, #62	; 0x3e
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	e00b      	b.n	800a4a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	4613      	mov	r3, r2
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	1a9b      	subs	r3, r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a4ca:	78fa      	ldrb	r2, [r7, #3]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f8 f892 	bl	80025f8 <HAL_PCD_SetAddress>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f874 	bl	800a5c8 <USBD_Get_USB_Status>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b086      	sub	sp, #24
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	603b      	str	r3, [r7, #0]
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a50c:	7af9      	ldrb	r1, [r7, #11]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	f7f8 f9ab 	bl	800286c <HAL_PCD_EP_Transmit>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 f853 	bl	800a5c8 <USBD_Get_USB_Status>
 800a522:	4603      	mov	r3, r0
 800a524:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a526:	7dbb      	ldrb	r3, [r7, #22]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	460b      	mov	r3, r1
 800a53e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a54e:	7af9      	ldrb	r1, [r7, #11]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	f7f8 f927 	bl	80027a6 <HAL_PCD_EP_Receive>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 f832 	bl	800a5c8 <USBD_Get_USB_Status>
 800a564:	4603      	mov	r3, r0
 800a566:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a568:	7dbb      	ldrb	r3, [r7, #22]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	4611      	mov	r1, r2
 800a588:	4618      	mov	r0, r3
 800a58a:	f7f8 f957 	bl	800283c <HAL_PCD_EP_GetRxCount>
 800a58e:	4603      	mov	r3, r0
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5a0:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <USBD_static_malloc+0x18>)
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20004bd8 	.word	0x20004bd8

0800a5b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]

}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d817      	bhi.n	800a60c <USBD_Get_USB_Status+0x44>
 800a5dc:	a201      	add	r2, pc, #4	; (adr r2, 800a5e4 <USBD_Get_USB_Status+0x1c>)
 800a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e2:	bf00      	nop
 800a5e4:	0800a5f5 	.word	0x0800a5f5
 800a5e8:	0800a5fb 	.word	0x0800a5fb
 800a5ec:	0800a601 	.word	0x0800a601
 800a5f0:	0800a607 	.word	0x0800a607
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5f8:	e00b      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a5fe:	e008      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
    break;
 800a604:	e005      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a606:	2303      	movs	r3, #3
 800a608:	73fb      	strb	r3, [r7, #15]
    break;
 800a60a:	e002      	b.n	800a612 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a60c:	2303      	movs	r3, #3
 800a60e:	73fb      	strb	r3, [r7, #15]
    break;
 800a610:	bf00      	nop
  }
  return usb_status;
 800a612:	7bfb      	ldrb	r3, [r7, #15]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <__libc_init_array>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	4d0d      	ldr	r5, [pc, #52]	; (800a658 <__libc_init_array+0x38>)
 800a624:	4c0d      	ldr	r4, [pc, #52]	; (800a65c <__libc_init_array+0x3c>)
 800a626:	1b64      	subs	r4, r4, r5
 800a628:	10a4      	asrs	r4, r4, #2
 800a62a:	2600      	movs	r6, #0
 800a62c:	42a6      	cmp	r6, r4
 800a62e:	d109      	bne.n	800a644 <__libc_init_array+0x24>
 800a630:	4d0b      	ldr	r5, [pc, #44]	; (800a660 <__libc_init_array+0x40>)
 800a632:	4c0c      	ldr	r4, [pc, #48]	; (800a664 <__libc_init_array+0x44>)
 800a634:	f000 f8f6 	bl	800a824 <_init>
 800a638:	1b64      	subs	r4, r4, r5
 800a63a:	10a4      	asrs	r4, r4, #2
 800a63c:	2600      	movs	r6, #0
 800a63e:	42a6      	cmp	r6, r4
 800a640:	d105      	bne.n	800a64e <__libc_init_array+0x2e>
 800a642:	bd70      	pop	{r4, r5, r6, pc}
 800a644:	f855 3b04 	ldr.w	r3, [r5], #4
 800a648:	4798      	blx	r3
 800a64a:	3601      	adds	r6, #1
 800a64c:	e7ee      	b.n	800a62c <__libc_init_array+0xc>
 800a64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a652:	4798      	blx	r3
 800a654:	3601      	adds	r6, #1
 800a656:	e7f2      	b.n	800a63e <__libc_init_array+0x1e>
 800a658:	0800a978 	.word	0x0800a978
 800a65c:	0800a978 	.word	0x0800a978
 800a660:	0800a978 	.word	0x0800a978
 800a664:	0800a97c 	.word	0x0800a97c

0800a668 <__retarget_lock_acquire_recursive>:
 800a668:	4770      	bx	lr

0800a66a <__retarget_lock_release_recursive>:
 800a66a:	4770      	bx	lr

0800a66c <memcpy>:
 800a66c:	440a      	add	r2, r1
 800a66e:	4291      	cmp	r1, r2
 800a670:	f100 33ff 	add.w	r3, r0, #4294967295
 800a674:	d100      	bne.n	800a678 <memcpy+0xc>
 800a676:	4770      	bx	lr
 800a678:	b510      	push	{r4, lr}
 800a67a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a67e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a682:	4291      	cmp	r1, r2
 800a684:	d1f9      	bne.n	800a67a <memcpy+0xe>
 800a686:	bd10      	pop	{r4, pc}

0800a688 <memset>:
 800a688:	4402      	add	r2, r0
 800a68a:	4603      	mov	r3, r0
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d100      	bne.n	800a692 <memset+0xa>
 800a690:	4770      	bx	lr
 800a692:	f803 1b01 	strb.w	r1, [r3], #1
 800a696:	e7f9      	b.n	800a68c <memset+0x4>

0800a698 <cleanup_glue>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	460c      	mov	r4, r1
 800a69c:	6809      	ldr	r1, [r1, #0]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	b109      	cbz	r1, 800a6a6 <cleanup_glue+0xe>
 800a6a2:	f7ff fff9 	bl	800a698 <cleanup_glue>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ae:	f000 b869 	b.w	800a784 <_free_r>
	...

0800a6b4 <_reclaim_reent>:
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <_reclaim_reent+0xb4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	b570      	push	{r4, r5, r6, lr}
 800a6bc:	4604      	mov	r4, r0
 800a6be:	d051      	beq.n	800a764 <_reclaim_reent+0xb0>
 800a6c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a6c2:	b143      	cbz	r3, 800a6d6 <_reclaim_reent+0x22>
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d14a      	bne.n	800a760 <_reclaim_reent+0xac>
 800a6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6cc:	6819      	ldr	r1, [r3, #0]
 800a6ce:	b111      	cbz	r1, 800a6d6 <_reclaim_reent+0x22>
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f857 	bl	800a784 <_free_r>
 800a6d6:	6961      	ldr	r1, [r4, #20]
 800a6d8:	b111      	cbz	r1, 800a6e0 <_reclaim_reent+0x2c>
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 f852 	bl	800a784 <_free_r>
 800a6e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a6e2:	b111      	cbz	r1, 800a6ea <_reclaim_reent+0x36>
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	f000 f84d 	bl	800a784 <_free_r>
 800a6ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a6ec:	b111      	cbz	r1, 800a6f4 <_reclaim_reent+0x40>
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 f848 	bl	800a784 <_free_r>
 800a6f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a6f6:	b111      	cbz	r1, 800a6fe <_reclaim_reent+0x4a>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f843 	bl	800a784 <_free_r>
 800a6fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a700:	b111      	cbz	r1, 800a708 <_reclaim_reent+0x54>
 800a702:	4620      	mov	r0, r4
 800a704:	f000 f83e 	bl	800a784 <_free_r>
 800a708:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a70a:	b111      	cbz	r1, 800a712 <_reclaim_reent+0x5e>
 800a70c:	4620      	mov	r0, r4
 800a70e:	f000 f839 	bl	800a784 <_free_r>
 800a712:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a714:	b111      	cbz	r1, 800a71c <_reclaim_reent+0x68>
 800a716:	4620      	mov	r0, r4
 800a718:	f000 f834 	bl	800a784 <_free_r>
 800a71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71e:	b111      	cbz	r1, 800a726 <_reclaim_reent+0x72>
 800a720:	4620      	mov	r0, r4
 800a722:	f000 f82f 	bl	800a784 <_free_r>
 800a726:	69a3      	ldr	r3, [r4, #24]
 800a728:	b1e3      	cbz	r3, 800a764 <_reclaim_reent+0xb0>
 800a72a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a72c:	4620      	mov	r0, r4
 800a72e:	4798      	blx	r3
 800a730:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a732:	b1b9      	cbz	r1, 800a764 <_reclaim_reent+0xb0>
 800a734:	4620      	mov	r0, r4
 800a736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a73a:	f7ff bfad 	b.w	800a698 <cleanup_glue>
 800a73e:	5949      	ldr	r1, [r1, r5]
 800a740:	b941      	cbnz	r1, 800a754 <_reclaim_reent+0xa0>
 800a742:	3504      	adds	r5, #4
 800a744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a746:	2d80      	cmp	r5, #128	; 0x80
 800a748:	68d9      	ldr	r1, [r3, #12]
 800a74a:	d1f8      	bne.n	800a73e <_reclaim_reent+0x8a>
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 f819 	bl	800a784 <_free_r>
 800a752:	e7ba      	b.n	800a6ca <_reclaim_reent+0x16>
 800a754:	680e      	ldr	r6, [r1, #0]
 800a756:	4620      	mov	r0, r4
 800a758:	f000 f814 	bl	800a784 <_free_r>
 800a75c:	4631      	mov	r1, r6
 800a75e:	e7ef      	b.n	800a740 <_reclaim_reent+0x8c>
 800a760:	2500      	movs	r5, #0
 800a762:	e7ef      	b.n	800a744 <_reclaim_reent+0x90>
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	bf00      	nop
 800a768:	20000184 	.word	0x20000184

0800a76c <__malloc_lock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_lock+0x8>)
 800a76e:	f7ff bf7b 	b.w	800a668 <__retarget_lock_acquire_recursive>
 800a772:	bf00      	nop
 800a774:	20006850 	.word	0x20006850

0800a778 <__malloc_unlock>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__malloc_unlock+0x8>)
 800a77a:	f7ff bf76 	b.w	800a66a <__retarget_lock_release_recursive>
 800a77e:	bf00      	nop
 800a780:	20006850 	.word	0x20006850

0800a784 <_free_r>:
 800a784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a786:	2900      	cmp	r1, #0
 800a788:	d048      	beq.n	800a81c <_free_r+0x98>
 800a78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78e:	9001      	str	r0, [sp, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f1a1 0404 	sub.w	r4, r1, #4
 800a796:	bfb8      	it	lt
 800a798:	18e4      	addlt	r4, r4, r3
 800a79a:	f7ff ffe7 	bl	800a76c <__malloc_lock>
 800a79e:	4a20      	ldr	r2, [pc, #128]	; (800a820 <_free_r+0x9c>)
 800a7a0:	9801      	ldr	r0, [sp, #4]
 800a7a2:	6813      	ldr	r3, [r2, #0]
 800a7a4:	4615      	mov	r5, r2
 800a7a6:	b933      	cbnz	r3, 800a7b6 <_free_r+0x32>
 800a7a8:	6063      	str	r3, [r4, #4]
 800a7aa:	6014      	str	r4, [r2, #0]
 800a7ac:	b003      	add	sp, #12
 800a7ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7b2:	f7ff bfe1 	b.w	800a778 <__malloc_unlock>
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	d90b      	bls.n	800a7d2 <_free_r+0x4e>
 800a7ba:	6821      	ldr	r1, [r4, #0]
 800a7bc:	1862      	adds	r2, r4, r1
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	bf04      	itt	eq
 800a7c2:	681a      	ldreq	r2, [r3, #0]
 800a7c4:	685b      	ldreq	r3, [r3, #4]
 800a7c6:	6063      	str	r3, [r4, #4]
 800a7c8:	bf04      	itt	eq
 800a7ca:	1852      	addeq	r2, r2, r1
 800a7cc:	6022      	streq	r2, [r4, #0]
 800a7ce:	602c      	str	r4, [r5, #0]
 800a7d0:	e7ec      	b.n	800a7ac <_free_r+0x28>
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	b10b      	cbz	r3, 800a7dc <_free_r+0x58>
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	d9fa      	bls.n	800a7d2 <_free_r+0x4e>
 800a7dc:	6811      	ldr	r1, [r2, #0]
 800a7de:	1855      	adds	r5, r2, r1
 800a7e0:	42a5      	cmp	r5, r4
 800a7e2:	d10b      	bne.n	800a7fc <_free_r+0x78>
 800a7e4:	6824      	ldr	r4, [r4, #0]
 800a7e6:	4421      	add	r1, r4
 800a7e8:	1854      	adds	r4, r2, r1
 800a7ea:	42a3      	cmp	r3, r4
 800a7ec:	6011      	str	r1, [r2, #0]
 800a7ee:	d1dd      	bne.n	800a7ac <_free_r+0x28>
 800a7f0:	681c      	ldr	r4, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	6053      	str	r3, [r2, #4]
 800a7f6:	4421      	add	r1, r4
 800a7f8:	6011      	str	r1, [r2, #0]
 800a7fa:	e7d7      	b.n	800a7ac <_free_r+0x28>
 800a7fc:	d902      	bls.n	800a804 <_free_r+0x80>
 800a7fe:	230c      	movs	r3, #12
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	e7d3      	b.n	800a7ac <_free_r+0x28>
 800a804:	6825      	ldr	r5, [r4, #0]
 800a806:	1961      	adds	r1, r4, r5
 800a808:	428b      	cmp	r3, r1
 800a80a:	bf04      	itt	eq
 800a80c:	6819      	ldreq	r1, [r3, #0]
 800a80e:	685b      	ldreq	r3, [r3, #4]
 800a810:	6063      	str	r3, [r4, #4]
 800a812:	bf04      	itt	eq
 800a814:	1949      	addeq	r1, r1, r5
 800a816:	6021      	streq	r1, [r4, #0]
 800a818:	6054      	str	r4, [r2, #4]
 800a81a:	e7c7      	b.n	800a7ac <_free_r+0x28>
 800a81c:	b003      	add	sp, #12
 800a81e:	bd30      	pop	{r4, r5, pc}
 800a820:	20004df8 	.word	0x20004df8

0800a824 <_init>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr

0800a830 <_fini>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	bf00      	nop
 800a834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a836:	bc08      	pop	{r3}
 800a838:	469e      	mov	lr, r3
 800a83a:	4770      	bx	lr
